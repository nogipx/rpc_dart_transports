// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

part of '_logs.dart';

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class DefaultRpcLoggerFilter implements IRpcLoggerFilter {
  final RpcLoggerLevel minLogLevel;

  DefaultRpcLoggerFilter(this.minLogLevel);

  @override
  bool shouldLog(RpcLoggerLevel level, String source) {
    return level.index >= minLogLevel.index;
  }
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
class DefaultRpcLoggerFormatter implements IRpcLoggerFormatter {
  final String? label;

  const DefaultRpcLoggerFormatter([this.label]);

  @override
  LogFormattingResult format(
      DateTime timestamp, RpcLoggerLevel level, String source, String message,
      {String? context}) {
    final formattedTime =
        '${timestamp.hour.toString().padLeft(2, '0')}:${timestamp.minute.toString().padLeft(2, '0')}:${timestamp.second.toString().padLeft(2, '0')}';

    String prefix;
    String emoji;
    String connector;
    switch (level) {
      case RpcLoggerLevel.debug:
        prefix = 'DEBUG';
        emoji = 'üîç';
        connector = '‚§∑ ';
      case RpcLoggerLevel.info:
        prefix = 'INFO';
        emoji = 'üìå';
        connector = '‚§∑ ';
      case RpcLoggerLevel.warning:
        prefix = 'WARN';
        emoji = '‚ö†Ô∏è ';
        connector = '‚§∑ ';
      case RpcLoggerLevel.error:
        prefix = 'ERROR';
        emoji = '‚ùå';
        connector = '‚§∑ ';
      case RpcLoggerLevel.critical:
        prefix = 'CRIT';
        emoji = 'üî•';
        connector = '‚§∑ ';
      default:
        prefix = '';
        emoji = '';
        connector = '‚§∑ ';
    }

    final contextStr = context != null ? ' [$context]' : '';
    final labelStr = label != null ? '($label) ' : '';
    final header =
        '[$formattedTime] ${prefix.padRight(5)} $emoji ‚Ä¢ $labelStr$source$contextStr';

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    final messageLines = message.split('\n');

    // –î–ª—è –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–º–∫–æ–π
    String content;
    if (level == RpcLoggerLevel.error || level == RpcLoggerLevel.critical) {
      final formattedMessage =
          messageLines.map((line) => '  ‚îÇ $line').join('\n');
      content =
          '  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ! ERROR ! ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n$formattedMessage\n  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò';
    } else {
      content = messageLines.map((line) => '  $connector $line').join('\n');
    }

    return LogFormattingResult(header, content);
  }
}

/// –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
class DefaultRpcLogger implements RpcLogger {
  @override
  final String name;

  /// –§–ª–∞–≥ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
  final bool _consoleLoggingEnabled;

  /// –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
  final bool _coloredLoggingEnabled;

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  final RpcLoggerColors _colors;

  /// –§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤
  final IRpcLoggerFilter _filter;

  /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –ª–æ–≥–æ–≤
  final IRpcLoggerFormatter _formatter;

  /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  DefaultRpcLogger(
    this.name, {
    RpcLoggerColors colors = const RpcLoggerColors(),
    String? label,
    RpcLoggerLevel? minLogLevel,
    bool consoleLoggingEnabled = true,
    bool coloredLoggingEnabled = true,
    IRpcLoggerFilter? filter,
    IRpcLoggerFormatter? formatter,
  })  : _consoleLoggingEnabled = consoleLoggingEnabled,
        _coloredLoggingEnabled = coloredLoggingEnabled,
        _colors = colors,
        _formatter = formatter ?? const DefaultRpcLoggerFormatter(),
        _filter = filter ??
            DefaultRpcLoggerFilter(
              minLogLevel ?? RpcLoggerSettings.defaultMinLogLevel,
            );

  @override
  Future<void> log({
    required RpcLoggerLevel level,
    required String message,
    String? context,
    String? requestId,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!_filter.shouldLog(level, name)) {
      return;
    }

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (_consoleLoggingEnabled) {
      _logToConsole(
        level: level,
        message: message,
        context: context,
        error: error,
        stackTrace: stackTrace,
        color: color,
      );
    }
  }

  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª–∏
  void _logToConsole({
    required RpcLoggerLevel level,
    required String message,
    String? context,
    Object? error,
    StackTrace? stackTrace,
    AnsiColor? color,
  }) {
    final timestamp = DateTime.now();

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –¥–ª—è ERROR –∏ CRITICAL
    String fullMessage = message;
    if (level == RpcLoggerLevel.error || level == RpcLoggerLevel.critical) {
      if (error != null) {
        fullMessage += '\n\nError details: $error';
      }
      if (stackTrace != null) {
        fullMessage += '\n\nStack trace: \n$stackTrace';
      }
    }

    final formattedLog = _formatter.format(timestamp, level, name, fullMessage,
        context: context);

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if (_coloredLoggingEnabled) {
      final actualColor = color ?? _colors.colorForLevel(level);

      // –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ü–≤–µ—Ç–æ–º
      print('${actualColor.code}${formattedLog.header}${AnsiColor.reset.code}');

      // –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ —Ü–≤–µ—Ç–∞
      if (formattedLog.content.isNotEmpty) {
        print(formattedLog.content);
      }

      // –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö (–Ω–µ ERROR/CRITICAL) —É—Ä–æ–≤–Ω–µ–π
      if ((level != RpcLoggerLevel.error && level != RpcLoggerLevel.critical) &&
          error != null) {
        print('  Error details: $error');
      }

      if ((level != RpcLoggerLevel.error && level != RpcLoggerLevel.critical) &&
          stackTrace != null) {
        print('  Stack trace: \n$stackTrace');
      }
    } else {
      // –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ —Ü–≤–µ—Ç–∞
      print(formattedLog.header);
      if (formattedLog.content.isNotEmpty) {
        print(formattedLog.content);
      }

      // –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö (–Ω–µ ERROR/CRITICAL) —É—Ä–æ–≤–Ω–µ–π
      if ((level != RpcLoggerLevel.error && level != RpcLoggerLevel.critical) &&
          error != null) {
        print('  Error details: $error');
      }

      if ((level != RpcLoggerLevel.error && level != RpcLoggerLevel.critical) &&
          stackTrace != null) {
        print('  Stack trace: \n$stackTrace');
      }
    }
  }

  @override
  Future<void> debug(
    String message, {
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.debug,
      message: message,
      context: context,
      requestId: requestId,
      data: data,
      color: color,
    );
  }

  @override
  Future<void> info(
    String message, {
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.info,
      message: message,
      context: context,
      requestId: requestId,
      data: data,
      color: color,
    );
  }

  @override
  Future<void> warning(
    String message, {
    String? context,
    String? requestId,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.warning,
      message: message,
      context: context,
      requestId: requestId,
      data: data,
      color: color,
    );
  }

  @override
  Future<void> error(
    String message, {
    String? context,
    String? requestId,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.error,
      message: message,
      context: context,
      requestId: requestId,
      error: error,
      stackTrace: stackTrace,
      data: data,
      color: color,
    );
  }

  @override
  Future<void> critical(
    String message, {
    String? context,
    String? requestId,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? data,
    AnsiColor? color,
  }) async {
    await log(
      level: RpcLoggerLevel.critical,
      message: message,
      context: context,
      requestId: requestId,
      error: error,
      stackTrace: stackTrace,
      data: data,
      color: color,
    );
  }

  @override
  RpcLogger child(String childName) {
    return DefaultRpcLogger(
      '$name.$childName',
      colors: _colors,
      minLogLevel: _filter is DefaultRpcLoggerFilter
          ? (_filter as DefaultRpcLoggerFilter).minLogLevel
          : RpcLoggerSettings.defaultMinLogLevel,
      consoleLoggingEnabled: _consoleLoggingEnabled,
      coloredLoggingEnabled: _coloredLoggingEnabled,
      filter: _filter,
    );
  }
}
