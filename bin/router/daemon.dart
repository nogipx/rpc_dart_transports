// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:io';
import 'dart:async';

import 'config.dart';
import 'signals.dart';

/// –ú–µ–Ω–µ–¥–∂–µ—Ä daemon —Ä–µ–∂–∏–º–∞ —Ä–æ—É—Ç–µ—Ä–∞
///
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
/// - –î–µ–º–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ Unix)
/// - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PID —Ñ–∞–π–ª–æ–º
/// - –ü—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ daemon
/// - Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫—É
/// - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
/// - Production-ready –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
class DaemonManager {
  final RouterConfig config;

  const DaemonManager({required this.config});

  /// –î–µ–º–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
  Future<void> daemonize() async {
    if (!Platform.isLinux && !Platform.isMacOS) {
      throw UnsupportedError('–†–µ–∂–∏–º daemon –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Linux –∏ macOS');
    }

    print('üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ daemon...');

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
    final scriptPath = Platform.script.toFilePath();

    // –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    final childArgs = _buildChildArgs();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
    final logFile = config.defaultLogFile;
    final pidFile = config.defaultPidFile;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω —É–∂–µ
      await _checkExistingDaemon(pidFile);

      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –∑–∞—Ä–∞–Ω–µ–µ
      await _ensureLogFile(logFile);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ
      await _logStartup(logFile);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –≤ detached —Ä–µ–∂–∏–º–µ
      final process = await _startDetachedProcess(scriptPath, childArgs);

      // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
      await _verifyProcessStart(process, logFile);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
      await _savePidFile(pidFile, process.pid);

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
      await _logSuccess(logFile, process.pid, pidFile);

      print('‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: ${process.pid}');
      print('üìÑ PID —Ñ–∞–π–ª: $pidFile');
      print('üìù –õ–æ–≥–∏: $logFile');
      print('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --daemon-status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      print('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --daemon-stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

      // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
      exit(0);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      await _logError(logFile, 'Daemon startup failed: $e');
      exit(1);
    }
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç daemon
  Future<void> stop() async {
    final pidFile = config.defaultPidFile;

    if (!await File(pidFile).exists()) {
      print('‚ùå PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $pidFile');
      print('üí° Daemon –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      exit(1);
    }

    try {
      final pid = await _readPidFile(pidFile);
      print('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon —Å PID: $pid');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!DaemonSignals.isProcessRunning(pid)) {
        print('‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID $pid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await _cleanupPidFile(pidFile);
        print('üßπ PID —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
        exit(1);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
      print('üõë –û—Ç–ø—Ä–∞–≤–∫–∞ SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É $pid...');
      final terminated = DaemonSignals.sendSignal(pid, ProcessSignal.sigterm);

      if (!terminated) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SIGTERM');
        exit(1);
      }

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      final stopped = await _waitForProcessStop(pid, Duration(seconds: 10));

      if (stopped) {
        // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
        await _cleanupPidFile(pidFile);
        print('‚úÖ Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } else {
        print('‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL...');
        final killed = DaemonSignals.sendSignal(pid, ProcessSignal.sigkill);

        if (killed) {
          await _cleanupPidFile(pidFile);
          print('‚úÖ Daemon –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon');
          exit(1);
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ daemon: $e');
      await _cleanupInvalidPid(pidFile);
      exit(1);
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å daemon
  Future<void> status() async {
    final pidFile = config.defaultPidFile;

    if (!await File(pidFile).exists()) {
      print('‚ùå Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω (PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)');
      exit(1);
    }

    try {
      final pid = await _readPidFile(pidFile);

      if (DaemonSignals.isProcessRunning(pid)) {
        print('‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: $pid');
        print('üìÑ PID —Ñ–∞–π–ª: $pidFile');

        final logFile = config.defaultLogFile;
        print('üìù –õ–æ–≥–∏: $logFile');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await _showExtendedStatus(pid, logFile);
      } else {
        print('‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID $pid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        print('üîß –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª...');
        await _cleanupPidFile(pidFile);
        exit(1);
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
      exit(1);
    }
  }

  /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç daemon (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SIGHUP)
  Future<void> reload() async {
    final pidFile = config.defaultPidFile;

    if (!await File(pidFile).exists()) {
      print('‚ùå Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω (PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)');
      exit(1);
    }

    try {
      final pid = await _readPidFile(pidFile);

      if (DaemonSignals.isProcessRunning(pid)) {
        print('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ SIGHUP –ø—Ä–æ—Ü–µ—Å—Å—É $pid...');
        final sent = DaemonSignals.sendSignal(pid, ProcessSignal.sighup);

        if (sent) {
          print('‚úÖ –°–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω daemon —Å PID: $pid');

          // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
          final logFile = config.defaultLogFile;
          await _logReload(logFile, pid);
        } else {
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
          exit(1);
        }
      } else {
        print('‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID $pid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await _cleanupPidFile(pidFile);
        exit(1);
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ daemon: $e');
      exit(1);
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω —É–∂–µ
  Future<void> _checkExistingDaemon(String pidFile) async {
    if (await File(pidFile).exists()) {
      try {
        final pid = await _readPidFile(pidFile);
        if (DaemonSignals.isProcessRunning(pid)) {
          throw Exception('Daemon —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID: $pid');
        } else {
          // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª
          await _cleanupPidFile(pidFile);
          print('üßπ –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª');
        }
      } catch (e) {
        if (e.toString().contains('—É–∂–µ –∑–∞–ø—É—â–µ–Ω')) rethrow;
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è PID —Ñ–∞–π–ª–∞
        await _cleanupPidFile(pidFile);
      }
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  List<String> _buildChildArgs() {
    // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏—Ö
    final args = Platform.executableArguments.toList();

    // –£–±–∏—Ä–∞–µ–º daemon –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥
    args.removeWhere((arg) => arg == '--daemon-start' || arg == '--daemon' || arg == '-d');
    args.add('--_daemon-child');

    return args;
  }

  /// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–≥ —Ñ–∞–π–ª–∞
  Future<void> _ensureLogFile(String logFile) async {
    final file = File(logFile);
    await file.create(recursive: true);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    if (Platform.isLinux || Platform.isMacOS) {
      try {
        await Process.run('chmod', ['600', logFile]);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ chmod
      }
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞
  Future<void> _logStartup(String logFile) async {
    final timestamp = DateTime.now().toIso8601String();
    final startMessage = '''
$timestamp: ===== RPC Dart Router Daemon Startup =====
$timestamp: Version: 2.0.0
$timestamp: Platform: ${Platform.operatingSystem} ${Platform.operatingSystemVersion}
$timestamp: Dart: ${Platform.version}
$timestamp: PID: ${pid}
$timestamp: Working Directory: ${Directory.current.path}
$timestamp: Arguments: ${Platform.executableArguments.join(' ')}
$timestamp: ================================================
''';
    await File(logFile).writeAsString(startMessage, mode: FileMode.writeOnlyAppend);
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
  Future<void> _logError(String logFile, String error) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      final errorMessage = '$timestamp: [ERROR] $error\n';
      await File(logFile).writeAsString(errorMessage, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
  Future<void> _logReload(String logFile, int pid) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      final reloadMessage = '$timestamp: [INFO] Reload signal sent to daemon PID: $pid\n';
      await File(logFile).writeAsString(reloadMessage, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç detached –ø—Ä–æ—Ü–µ—Å—Å
  Future<Process> _startDetachedProcess(String scriptPath, List<String> childArgs) async {
    return await Process.start(
      Platform.resolvedExecutable,
      [scriptPath, ...childArgs],
      mode: ProcessStartMode.detached,
      runInShell: false,
      workingDirectory: Directory.current.path,
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
  Future<void> _verifyProcessStart(Process process, String logFile) async {
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    await Future.delayed(Duration(milliseconds: 1000));

    if (!DaemonSignals.isProcessRunning(process.pid)) {
      await _logError(logFile, 'Child process failed to start or exited immediately');
      throw Exception('–î–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è');
    }
  }

  /// –ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  Future<bool> _waitForProcessStop(int pid, Duration timeout) async {
    final stopwatch = Stopwatch()..start();

    while (stopwatch.elapsed < timeout) {
      if (!DaemonSignals.isProcessRunning(pid)) {
        return true;
      }
      await Future.delayed(Duration(milliseconds: 100));
    }

    return false;
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç PID —Ñ–∞–π–ª
  Future<void> _savePidFile(String pidFile, int pid) async {
    await File(pidFile).writeAsString('$pid');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    if (Platform.isLinux || Platform.isMacOS) {
      try {
        await Process.run('chmod', ['600', pidFile]);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ chmod
      }
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
  Future<void> _logSuccess(String logFile, int pid, String pidFile) async {
    try {
      final timestamp = DateTime.now().toIso8601String();
      final logEntry = '''
$timestamp: [INFO] Daemon successfully started
$timestamp: [INFO] Child PID: $pid
$timestamp: [INFO] PID file: $pidFile
$timestamp: [INFO] Parent process exiting
$timestamp: ================================================
''';
      await File(logFile).writeAsString(logEntry, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
    }
  }

  /// –ß–∏—Ç–∞–µ—Ç PID –∏–∑ —Ñ–∞–π–ª–∞
  Future<int> _readPidFile(String pidFile) async {
    final pidStr = await File(pidFile).readAsString();
    return int.parse(pidStr.trim());
  }

  /// –£–¥–∞–ª—è–µ—Ç PID —Ñ–∞–π–ª
  Future<void> _cleanupPidFile(String pidFile) async {
    try {
      await File(pidFile).delete();
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π PID —Ñ–∞–π–ª
  Future<void> _cleanupInvalidPid(String pidFile) async {
    try {
      final pidStr = await File(pidFile).readAsString();
      final pid = int.parse(pidStr.trim());

      if (!DaemonSignals.isProcessRunning(pid)) {
        await _cleanupPidFile(pidFile);
        print('üßπ PID —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω (–ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)');
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      await _cleanupPidFile(pidFile);
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
  Future<void> _showExtendedStatus(int pid, String logFile) async {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥-—Ñ–∞–π–ª–µ
    if (await File(logFile).exists()) {
      final stat = await File(logFile).stat();
      print('üìä –†–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞: ${_formatBytes(stat.size)}');
      print('üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${stat.modified}');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
      await _showRecentLogs(logFile);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    final memoryInfo = await _getProcessMemory(pid);
    if (memoryInfo != null) {
      print('üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $memoryInfo');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    final uptime = await _getProcessUptime(pid);
    if (uptime != null) {
      print('‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $uptime');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
    await _showOpenPorts(pid);
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
  Future<void> _showRecentLogs(String logFile) async {
    try {
      final result = await Process.run('tail', ['-n', '3', logFile]);
      if (result.exitCode == 0 && result.stdout.toString().trim().isNotEmpty) {
        print('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:');
        final lines = result.stdout.toString().trim().split('\n');
        for (final line in lines) {
          if (line.trim().isNotEmpty) {
            print('   $line');
          }
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
  Future<void> _showOpenPorts(int pid) async {
    try {
      final result = await Process.run('lsof', ['-Pan', '-p', pid.toString(), '-i']);
      if (result.exitCode == 0) {
        final lines = result.stdout.toString().split('\n');
        final portLines = lines.where((line) => line.contains('LISTEN')).toList();

        if (portLines.isNotEmpty) {
          print('üîå –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:');
          for (final line in portLines) {
            final parts = line.split(RegExp(r'\s+'));
            if (parts.length > 8) {
              final port = parts[8];
              print('   ‚Ä¢ $port');
            }
          }
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ lsof
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
  String _formatBytes(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    if (bytes < 1024 * 1024 * 1024) return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
    return '${(bytes / (1024 * 1024 * 1024)).toStringAsFixed(1)} GB';
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
  Future<String?> _getProcessMemory(int pid) async {
    try {
      final result = await Process.run('ps', ['-o', 'rss=', '-p', pid.toString()]);
      if (result.exitCode == 0) {
        final rss = int.tryParse(result.stdout.toString().trim()) ?? 0;
        return '${(rss / 1024).toStringAsFixed(1)}MB';
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    }
    return null;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
  Future<String?> _getProcessUptime(int pid) async {
    try {
      final result = await Process.run('ps', ['-o', 'etime=', '-p', pid.toString()]);
      if (result.exitCode == 0) {
        return result.stdout.toString().trim();
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è uptime
    }
    return null;
  }
}
