// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:io';
import 'dart:async';

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
///
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
/// - SIGINT (Ctrl+C) - graceful shutdown
/// - SIGTERM - graceful shutdown
/// - SIGHUP - reload –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
/// - SIGUSR1 - –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
/// - SIGUSR2 - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class SignalHandler {
  final StreamController<SignalType> _signalController = StreamController.broadcast();

  /// –°—Ç—Ä–∏–º —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
  Stream<SignalType> get signals => _signalController.stream;

  /// Completer –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è shutdown —Å–∏–≥–Ω–∞–ª–∞
  final Completer<void> _shutdownCompleter = Completer<void>();

  /// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  bool _shutdownInitiated = false;
  int _interruptCount = 0;

  /// –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
  void Function()? onReload;
  void Function()? onStats;
  void Function()? onToggleDebug;

  SignalHandler();

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
  void initialize() {
    _setupSignalHandlers();
  }

  /// –û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  Future<void> waitForShutdown() async {
    await _shutdownCompleter.future;
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
  void _setupSignalHandlers() {
    // SIGINT (Ctrl+C) - graceful shutdown
    ProcessSignal.sigint.watch().listen(_handleSigint);

    // SIGTERM - graceful shutdown
    ProcessSignal.sigterm.watch().listen(_handleSigterm);

    // SIGHUP - reload –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ Unix)
    if (Platform.isLinux || Platform.isMacOS) {
      ProcessSignal.sighup.watch().listen(_handleSighup);

      // SIGUSR1 - –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      ProcessSignal.sigusr1.watch().listen(_handleSigusr1);

      // SIGUSR2 - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞
      ProcessSignal.sigusr2.watch().listen(_handleSigusr2);
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SIGINT (Ctrl+C)
  void _handleSigint(ProcessSignal signal) {
    _interruptCount++;

    if (!_shutdownInitiated) {
      _shutdownInitiated = true;
      print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, graceful shutdown...');
      _signalController.add(SignalType.shutdown);

      if (!_shutdownCompleter.isCompleted) {
        _shutdownCompleter.complete();
      }
    } else if (_interruptCount >= 2) {
      print('\n‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π SIGINT - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!');
      _signalController.add(SignalType.forceShutdown);
      exit(130); // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è SIGINT
    } else {
      print(
          '\n‚è≥ Graceful shutdown —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π Ctrl+C –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SIGTERM
  void _handleSigterm(ProcessSignal signal) {
    if (!_shutdownInitiated) {
      _shutdownInitiated = true;
      print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, graceful shutdown...');
      _signalController.add(SignalType.shutdown);

      if (!_shutdownCompleter.isCompleted) {
        _shutdownCompleter.complete();
      }
    } else {
      print('\n‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π SIGTERM - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!');
      _signalController.add(SignalType.forceShutdown);
      exit(143); // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è SIGTERM
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SIGHUP (reload)
  void _handleSighup(ProcessSignal signal) {
    print('\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGHUP, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    _signalController.add(SignalType.reload);
    onReload?.call();
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SIGUSR1 (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
  void _handleSigusr1(ProcessSignal signal) {
    print('\nüìä –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGUSR1, –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    _signalController.add(SignalType.stats);
    onStats?.call();
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SIGUSR2 (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ debug)
  void _handleSigusr2(ProcessSignal signal) {
    print('\nüêõ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGUSR2, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞...');
    _signalController.add(SignalType.toggleDebug);
    onToggleDebug?.call();
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  Future<void> dispose() async {
    await _signalController.close();
  }
}

/// –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤
enum SignalType {
  /// Graceful shutdown (SIGINT, SIGTERM)
  shutdown,

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  forceShutdown,

  /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (SIGHUP)
  reload,

  /// –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (SIGUSR1)
  stats,

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞ (SIGUSR2)
  toggleDebug;

  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å–∏–≥–Ω–∞–ª–∞
  String get displayName {
    switch (this) {
      case SignalType.shutdown:
        return 'Graceful Shutdown';
      case SignalType.forceShutdown:
        return 'Force Shutdown';
      case SignalType.reload:
        return 'Reload Configuration';
      case SignalType.stats:
        return 'Show Statistics';
      case SignalType.toggleDebug:
        return 'Toggle Debug Mode';
    }
  }
}

/// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤ daemon —Ä–µ–∂–∏–º–µ
class DaemonSignals {
  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ü–µ—Å—Å—É –ø–æ PID
  static bool sendSignal(int pid, ProcessSignal signal) {
    try {
      return Process.killPid(pid, signal);
    } catch (e) {
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID
  static bool isProcessRunning(int pid) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ps –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      final result = Process.runSync('ps', ['-p', pid.toString()]);
      return result.exitCode == 0;
    } catch (e) {
      return false;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SIGHUP –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  static bool reloadDaemon(int pid) {
    print('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ SIGHUP –ø—Ä–æ—Ü–µ—Å—Å—É $pid...');
    return sendSignal(pid, ProcessSignal.sighup);
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SIGUSR1 –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  static bool requestStats(int pid) {
    print('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid...');
    return sendSignal(pid, ProcessSignal.sigusr1);
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SIGUSR2 –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è debug
  static bool toggleDebug(int pid) {
    print('üêõ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞ —É –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid...');
    return sendSignal(pid, ProcessSignal.sigusr2);
  }

  /// Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon (SIGTERM -> SIGKILL)
  static Future<bool> gracefulStop(int pid,
      {Duration timeout = const Duration(seconds: 10)}) async {
    print('üõë Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
    if (!sendSignal(pid, ProcessSignal.sigterm)) {
      print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SIGTERM');
      return false;
    }

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    final stopwatch = Stopwatch()..start();
    while (stopwatch.elapsed < timeout) {
      if (!isProcessRunning(pid)) {
        print('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è gracefully');
        return true;
      }
      await Future.delayed(Duration(milliseconds: 100));
    }

    // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL
    print('‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ ${timeout.inSeconds}—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL...');
    if (sendSignal(pid, ProcessSignal.sigkill)) {
      // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ SIGKILL
      await Future.delayed(Duration(milliseconds: 500));
      if (!isProcessRunning(pid)) {
        print('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        return true;
      }
    }

    print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å');
    return false;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  static Future<ProcessStatus?> getProcessStatus(int pid) async {
    try {
      if (!isProcessRunning(pid)) {
        return null;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
      final result =
          await Process.run('ps', ['-o', 'pid,ppid,etime,rss,pcpu,command', '-p', pid.toString()]);

      if (result.exitCode == 0) {
        final lines = result.stdout.toString().trim().split('\n');
        if (lines.length >= 2) {
          final parts = lines[1].trim().split(RegExp(r'\s+'));
          if (parts.length >= 6) {
            return ProcessStatus(
              pid: int.parse(parts[0]),
              ppid: int.parse(parts[1]),
              uptime: parts[2],
              memoryKB: int.parse(parts[3]),
              cpuPercent: double.parse(parts[4]),
              command: parts.sublist(5).join(' '),
            );
          }
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    return null;
  }
}

/// –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
class ProcessStatus {
  final int pid;
  final int ppid;
  final String uptime;
  final int memoryKB;
  final double cpuPercent;
  final String command;

  const ProcessStatus({
    required this.pid,
    required this.ppid,
    required this.uptime,
    required this.memoryKB,
    required this.cpuPercent,
    required this.command,
  });

  @override
  String toString() {
    return 'ProcessStatus(pid: $pid, ppid: $ppid, uptime: $uptime, memory: ${(memoryKB / 1024).toStringAsFixed(1)}MB, cpu: $cpuPercent%, command: $command)';
  }
}
