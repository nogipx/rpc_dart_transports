// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';

import 'package:args/args.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';

import 'config.dart';
import 'daemon.dart';
import 'server.dart';
import 'signals.dart';
import 'error_handler.dart';

const String version = '2.0.0';

/// –û—Å–Ω–æ–≤–Ω–æ–π CLI –∫–ª–∞—Å—Å —Ä–æ—É—Ç–µ—Ä–∞
///
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
/// - –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
/// - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
/// - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class RouterCLI {
  /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
  late final RouterConfig config;

  /// –°–µ—Ä–≤–µ—Ä —Ä–æ—É—Ç–µ—Ä–∞
  RouterServer? _server;

  /// Daemon –º–µ–Ω–µ–¥–∂–µ—Ä
  late final DaemonManager _daemon;

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  late final ErrorHandler _errorHandler;

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
  late final SignalHandler _signalHandler;

  RouterCLI._();

  /// –°–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CLI
  static Future<RouterCLI> create(List<String> arguments) async {
    final cli = RouterCLI._();
    await cli._initialize(arguments);
    return cli;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLI
  Future<void> _initialize(List<String> arguments) async {
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = await _createConfig(arguments);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    _errorHandler = ErrorHandler(
      verbose: config.verbose,
      isDaemon: config.daemon,
      logFile: config.logFile,
    );

    _daemon = DaemonManager(config: config);

    _signalHandler = SignalHandler();
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  Future<void> run() async {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ daemon –∫–æ–º–∞–Ω–¥
      if (config.stopDaemon) {
        await _daemon.stop();
        return;
      }

      if (config.statusDaemon) {
        await _daemon.status();
        return;
      }

      if (config.reloadDaemon) {
        await _daemon.reload();
        return;
      }

      // –î–µ–º–æ–Ω–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (config.daemon && !config.isDaemonChild) {
        await _daemon.daemonize();
        return; // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
      _setupSignalHandlers();

      // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      _server = RouterServer(config: config, logger: null);

      // –í daemon —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
      if (config.isDaemonChild) {
        await _logDaemonStartup();
      }

      await _server!.start();

      // –í daemon —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
      if (config.isDaemonChild) {
        await _logDaemonReady();
      }

      // –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await _signalHandler.waitForShutdown();

      // Graceful shutdown
      await _gracefulShutdown();
    } catch (e, stackTrace) {
      // –í daemon —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      if (config.isDaemonChild) {
        await _logDaemonError(e, stackTrace);
      }

      await _errorHandler.handleError(e, stackTrace);
      exit(1);
    }
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
  void _setupSignalHandlers() {
    _signalHandler.initialize();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –¥–ª—è daemon —Ä–µ–∂–∏–º–∞
    if (config.isDaemonChild) {
      _signalHandler.onReload = () async {
        await _logDaemonEvent('Configuration reload requested');
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
      };

      _signalHandler.onStats = () async {
        await _logDaemonEvent('Statistics requested');
        if (_server != null) {
          // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ getStats –≤ RouterServer
          await _logDaemonStats('Statistics not implemented yet');
        }
      };

      _signalHandler.onToggleDebug = () async {
        await _logDaemonEvent('Debug mode toggle requested');
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞
        print('üêõ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞...');
      };
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ daemon
  Future<void> _logDaemonStartup() async {
    if (config.logFile == null) return;

    try {
      final timestamp = DateTime.now().toIso8601String();
      final message = '''
$timestamp: [INFO] RPC Dart Router daemon starting
$timestamp: [INFO] Configuration: host=${config.host}, port=${config.port}
$timestamp: [INFO] Log level: ${config.logLevel}
$timestamp: [INFO] Stats enabled: ${config.enableStats}
$timestamp: [INFO] Metrics enabled: ${config.enableMetrics}
''';
      await File(config.logFile!).writeAsString(message, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å daemon
  Future<void> _logDaemonReady() async {
    if (config.logFile == null) return;

    try {
      final timestamp = DateTime.now().toIso8601String();
      final message = '''
$timestamp: [INFO] RPC Dart Router daemon ready
$timestamp: [INFO] HTTP/2 gRPC server listening on ${config.host}:${config.port}
$timestamp: [INFO] PID: ${pid}
$timestamp: [INFO] Ready to accept connections
''';
      await File(config.logFile!).writeAsString(message, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ daemon
  Future<void> _logDaemonEvent(String event) async {
    if (config.logFile == null) return;

    try {
      final timestamp = DateTime.now().toIso8601String();
      final message = '$timestamp: [INFO] $event\n';
      await File(config.logFile!).writeAsString(message, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É daemon
  Future<void> _logDaemonError(Object error, StackTrace stackTrace) async {
    if (config.logFile == null) return;

    try {
      final timestamp = DateTime.now().toIso8601String();
      final message = '''
$timestamp: [ERROR] Daemon error: $error
$timestamp: [ERROR] Stack trace: $stackTrace
''';
      await File(config.logFile!).writeAsString(message, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É daemon
  Future<void> _logDaemonStats(dynamic stats) async {
    if (config.logFile == null) return;

    try {
      final timestamp = DateTime.now().toIso8601String();
      final message = '''
$timestamp: [INFO] Router statistics:
$timestamp: [INFO] $stats
''';
      await File(config.logFile!).writeAsString(message, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  /// Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  Future<void> _gracefulShutdown() async {
    print('üîÑ Graceful shutdown –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');

    try {
      await _server?.stop().timeout(
        Duration(seconds: 10),
        onTimeout: () {
          print('‚ö†Ô∏è Graceful shutdown –ø—Ä–µ–≤—ã—Å–∏–ª 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
          exit(1);
        },
      );
      print('‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown: $e');
      exit(1);
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  Future<RouterConfig> _createConfig(List<String> arguments) async {
    final parser = _buildArgParser();

    try {
      final argResults = parser.parse(arguments);

      if (argResults['help'] as bool) {
        _printUsage(parser);
        exit(0);
      }

      if (argResults['version'] as bool) {
        print('üöÄ RPC Dart Router v$version');
        exit(0);
      }

      return RouterConfig.fromArgs(argResults);
    } on FormatException catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: ${e.message}');
      print('');
      _printUsage(parser);
      exit(1);
    }
  }

  /// –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  ArgParser _buildArgParser() {
    return ArgParser()
      ..addOption(
        'config',
        abbr: 'c',
        help: '–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É',
      )
      ..addOption(
        'host',
        abbr: 'h',
        defaultsTo: '0.0.0.0',
        help: '–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞',
      )
      ..addOption(
        'port',
        abbr: 'p',
        defaultsTo: '8080',
        help: '–ü–æ—Ä—Ç –¥–ª—è HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä–∞',
      )
      ..addOption(
        'log-level',
        abbr: 'l',
        defaultsTo: 'info',
        allowed: ['debug', 'info', 'warning', 'error', 'critical', 'none'],
        help: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
      )
      ..addFlag(
        'quiet',
        abbr: 'q',
        help: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º –≤—ã–≤–æ–¥–∞)',
      )
      ..addFlag(
        'verbose',
        abbr: 'v',
        help: '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º (–¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)',
      )
      ..addFlag(
        'stats',
        abbr: 's',
        defaultsTo: true,
        help: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞',
      )
      ..addFlag(
        'metrics',
        abbr: 'm',
        help: '–í–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ Prometheus',
      )
      ..addOption(
        'metrics-port',
        defaultsTo: '9090',
        help: '–ü–æ—Ä—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ Prometheus',
      )
      ..addFlag(
        'health-check',
        defaultsTo: true,
        help: '–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      )
      ..addOption(
        'client-timeout',
        defaultsTo: '300',
        help: '–¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
      )
      ..addOption(
        'max-connections',
        defaultsTo: '1000',
        help: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
      )
      ..addFlag(
        'daemon',
        abbr: 'd',
        help: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ daemon (—Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)',
      )
      ..addOption(
        'pid-file',
        help: '–ü—É—Ç—å –∫ PID —Ñ–∞–π–ª—É –¥–ª—è daemon —Ä–µ–∂–∏–º–∞',
      )
      ..addOption(
        'log-file',
        help: '–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –¥–ª—è daemon —Ä–µ–∂–∏–º–∞',
      )
      ..addFlag(
        'stop',
        help: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon',
      )
      ..addFlag(
        'status',
        help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å daemon',
      )
      ..addFlag(
        'reload',
        help: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å daemon (SIGHUP)',
      )
      ..addFlag(
        '_daemon-child',
        hide: true,
        help: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ daemon',
      )
      ..addFlag(
        'help',
        help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
      )
      ..addFlag(
        'version',
        help: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é',
      );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
  void _printUsage(ArgParser parser) {
    print('üöÄ RPC Dart Router v$version - HTTP/2 gRPC —Ä–æ—É—Ç–µ—Ä –¥–ª—è RPC –≤—ã–∑–æ–≤–æ–≤\n');
    print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: rpc_dart_router [options]\n');
    print('–û–ø—Ü–∏–∏:');
    print(parser.usage);
    print('\n–ü—Ä–∏–º–µ—Ä—ã:');
    print('  rpc_dart_router                           # HTTP/2 –Ω–∞ –ø–æ—Ä—Ç—É 8080');
    print('  rpc_dart_router -p 8080                   # HTTP/2 –Ω–∞ –ø–æ—Ä—Ç—É 8080');
    print('  rpc_dart_router -c config.yaml            # –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
    print('  rpc_dart_router -h 192.168.1.100          # HTTP/2 –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º IP');
    print('  rpc_dart_router --quiet                   # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º');
    print('  rpc_dart_router -v --log-level debug      # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
    print('  rpc_dart_router --metrics                 # –° —ç–∫—Å–ø–æ—Ä—Ç–æ–º –º–µ—Ç—Ä–∏–∫ Prometheus');
    print('  rpc_dart_router --max-connections 5000    # –õ–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
    print('\n–î–µ–º–æ–Ω —Ä–µ–∂–∏–º:');
    print('  rpc_dart_router -d                        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
    print('  rpc_dart_router -d --config daemon.yaml   # Daemon —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    print('  rpc_dart_router --status                  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å daemon');
    print('  rpc_dart_router --stop                    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon');
    print('  rpc_dart_router --reload                  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å daemon');
    print('\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:');
    print('  HTTP/2 gRPC     –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏–Ω–≥–æ–º');
    print('                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã RPC –≤—ã–∑–æ–≤–æ–≤ –∏ –ø–æ—Ç–æ–∫–∏');
    print('\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:');
    print('  ‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞');
    print('  ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ Prometheus (--metrics)');
    print('  ‚Ä¢ Health check –∫–ª–∏–µ–Ω—Ç–æ–≤');
    print('  ‚Ä¢ Graceful shutdown —á–µ—Ä–µ–∑ SIGTERM');
  }
}
