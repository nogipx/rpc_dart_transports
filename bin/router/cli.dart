// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';

import 'package:args/args.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';

import 'config.dart';
import 'server.dart';

const String version = '2.0.0';

/// –û—Å–Ω–æ–≤–Ω–æ–π CLI –∫–ª–∞—Å—Å —Ä–æ—É—Ç–µ—Ä–∞
///
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
/// - –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
/// - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
/// - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class RouterCLI {
  /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
  late final RouterConfig config;

  /// –°–µ—Ä–≤–µ—Ä —Ä–æ—É—Ç–µ—Ä–∞
  RouterServer? _server;

  RouterCLI._();

  /// –°–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CLI
  static Future<RouterCLI> create(List<String> arguments) async {
    final cli = RouterCLI._();
    await cli._initialize(arguments);
    return cli;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLI
  Future<void> _initialize(List<String> arguments) async {
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = await _createConfig(arguments);
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  Future<void> run() async {
    try {
      // –°–æ–∑–¥–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
      final contracts = _createRouterContracts();
      final http2Server = RpcHttp2Server.createWithContracts(
        port: config.port,
        host: config.host,
        contracts: contracts,
        logger: RpcLogger('RouterCLI'),
      );

      // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      _server = RouterServer(
        config: config,
        server: http2Server,
        logger: RpcLogger('RouterCLI'),
      );

      await _server!.start();

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (RpcServerBootstrap —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã)
      // –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞: $e');
      if (config.verbose) {
        print('Stack trace: $stackTrace');
      }
      exit(1);
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  Future<RouterConfig> _createConfig(List<String> arguments) async {
    final parser = _buildArgParser();

    try {
      final argResults = parser.parse(arguments);

      if (argResults['help'] as bool) {
        _printUsage(parser);
        exit(0);
      }

      if (argResults['version'] as bool) {
        print('üöÄ RPC Dart Router v$version');
        exit(0);
      }

      return RouterConfig.fromArgs(argResults);
    } on FormatException catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: ${e.message}');
      print('');
      _printUsage(parser);
      exit(1);
    }
  }

  /// –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  ArgParser _buildArgParser() {
    return ArgParser()
      ..addOption(
        'host',
        abbr: 'h',
        defaultsTo: '0.0.0.0',
        help: '–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞',
      )
      ..addOption(
        'port',
        abbr: 'p',
        defaultsTo: '8080',
        help: '–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞',
      )
      ..addOption(
        'log-level',
        abbr: 'l',
        defaultsTo: 'info',
        allowed: ['debug', 'info', 'warning', 'error', 'critical', 'none'],
        help: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
      )
      ..addFlag(
        'quiet',
        abbr: 'q',
        help: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º –≤—ã–≤–æ–¥–∞)',
      )
      ..addFlag(
        'verbose',
        abbr: 'v',
        help: '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º (–¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)',
      )
      ..addFlag(
        'daemon',
        abbr: 'd',
        help: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ daemon (—Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)',
      )
      ..addOption(
        'pid-file',
        help: '–ü—É—Ç—å –∫ PID —Ñ–∞–π–ª—É –¥–ª—è daemon —Ä–µ–∂–∏–º–∞',
      )
      ..addOption(
        'log-file',
        help: '–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –¥–ª—è daemon —Ä–µ–∂–∏–º–∞',
      )
      ..addFlag(
        'stop',
        help: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon',
      )
      ..addFlag(
        'status',
        help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å daemon',
      )
      ..addFlag(
        'reload',
        help: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å daemon (SIGHUP)',
      )
      ..addFlag(
        '_daemon-child',
        hide: true,
        help: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ daemon',
      )
      ..addFlag(
        'help',
        help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
      )
      ..addFlag(
        'version',
        help: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é',
      );
  }

  /// –°–æ–∑–¥–∞–µ—Ç Router –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  List<RpcResponderContract> _createRouterContracts() {
    final contracts = <RpcResponderContract>[];

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π P2P —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    contracts.add(_createP2PRouterContract());

    return contracts;
  }

  /// –°–æ–∑–¥–∞–µ—Ç P2P —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  RpcResponderContract _createP2PRouterContract() {
    return RouterResponderContract(
      logger: RpcLogger('RouterCLI').child('P2PRouter'),
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
  void _printUsage(ArgParser parser) {
    print('üöÄ RPC Dart Router v$version - P2P —Ä–æ—É—Ç–µ—Ä –¥–ª—è RPC —Å–æ–æ–±—â–µ–Ω–∏–π\n');
    print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: rpc_dart_router [options]\n');
    print('–û–ø—Ü–∏–∏:');
    print(parser.usage);
    print('\n–ü—Ä–∏–º–µ—Ä—ã:');
    print('  rpc_dart_router                           # –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É 8080');
    print('  rpc_dart_router -p 8081                   # –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É 8081');
    print('  rpc_dart_router -h 192.168.1.100          # –ó–∞–ø—É—Å–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º IP');
    print('  rpc_dart_router --verbose                 # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
    print('  rpc_dart_router --quiet                   # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º');
    print('\n–î–µ–º–æ–Ω —Ä–µ–∂–∏–º:');
    print('  rpc_dart_router -d                        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
    print('  rpc_dart_router --status                  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å daemon');
    print('  rpc_dart_router --stop                    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon');
    print('  rpc_dart_router --reload                  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å daemon');
    print('\nP2P —Ñ—É–Ω–∫—Ü–∏–∏:');
    print('  ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ');
    print('  ‚Ä¢ Unicast, multicast, broadcast —Å–æ–æ–±—â–µ–Ω–∏—è');
    print('  ‚Ä¢ Request-response –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏');
    print('  ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–æ—É—Ç–µ—Ä–∞');
    print('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤');
    print('  ‚Ä¢ Graceful shutdown —á–µ—Ä–µ–∑ SIGTERM');
  }
}
