// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';

import 'config.dart';

/// –û—Å–Ω–æ–≤–Ω–æ–π HTTP/2 —Å–µ—Ä–≤–µ—Ä —Ä–æ—É—Ç–µ—Ä–∞
///
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
/// - –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä–∞
/// - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
/// - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å RouterServer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
/// - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
class RouterServer {
  final RouterConfig config;
  final RpcLogger? logger;

  /// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  late final RpcRouterServer _routerServer;

  /// HTTP/2 —Å–µ—Ä–≤–µ—Ä (–≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π)
  RpcHttp2Server? _http2Server;

  /// –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Timer? _statsTimer;

  /// –¢–∞–π–º–µ—Ä health check –¥–ª—è daemon
  Timer? _healthCheckTimer;

  /// –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
  late final DateTime _startTime;

  /// –§–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
  bool _isRunning = false;

  RouterServer({
    required this.config,
    this.logger,
  });

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
  bool get isRunning => _isRunning;

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
  RouterServerStats get stats {
    if (!_isRunning) {
      return RouterServerStats.empty();
    }

    final routerStats = _routerServer.getStats();
    final uptime = DateTime.now().difference(_startTime);

    return RouterServerStats(
      isRunning: _isRunning,
      uptime: uptime,
      activeConnections: routerStats.activeConnections,
      totalConnections: routerStats.totalConnections,
      activeClients: routerStats.routerStats.activeClients,
      totalMessages: routerStats.routerStats.totalMessages,
      errorCount: routerStats.routerStats.errorCount,
      memoryUsage: _getMemoryUsage(),
    );
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/2 —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  Future<void> start() async {
    if (_isRunning) {
      throw StateError('–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
    }

    _startTime = DateTime.now();

    try {
      logger?.info('üöÄ –ó–∞–ø—É—Å–∫ RPC Dart Router Server');
      logger?.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
      logger?.info('  ‚Ä¢ –•–æ—Å—Ç: ${config.host}');
      logger?.info('  ‚Ä¢ –ü–æ—Ä—Ç: ${config.port}');
      logger?.info('  ‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: HTTP/2 gRPC');
      logger?.info('  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${config.logLevel}');
      logger?.info('  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${config.enableStats ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}');

      if (config.daemon) {
        logger?.info('  ‚Ä¢ –†–µ–∂–∏–º: Daemon');
        if (config.pidFile != null) {
          logger?.info('  ‚Ä¢ PID —Ñ–∞–π–ª: ${config.pidFile}');
        }
        if (config.logFile != null) {
          logger?.info('  ‚Ä¢ –õ–æ–≥ —Ñ–∞–π–ª: ${config.logFile}');
        }
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
      _routerServer = RpcRouterServer(
        logger: logger?.child('RouterServer'),
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä
      await _startHttp2Server();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
      if (config.enableStats) {
        _startStatsTimer();
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º daemon –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞
      if (config.daemon) {
        _setupDaemonLogging();
        _setupHealthCheck();
      }

      _isRunning = true;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
      _printStartupSummary();

      logger?.info('‚úÖ Router Server –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e, stackTrace) {
      final errorMsg = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: $e';

      // –í daemon —Ä–µ–∂–∏–º–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª
      if (config.daemon) {
        try {
          final logFile = config.logFile ?? '/tmp/rpc_dart_router.log';
          final timestamp = DateTime.now().toIso8601String();
          File(logFile).writeAsStringSync(
            '$timestamp: FATAL STARTUP ERROR: $e\n$stackTrace\n',
            mode: FileMode.writeOnlyAppend,
          );
        } catch (logError) {
          logger?.error('Failed to write startup error to log: $logError');
        }
      }

      logger?.error(errorMsg, error: e, stackTrace: config.verbose ? stackTrace : null);

      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await _cleanup();

      rethrow;
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/2 —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞—Å—Ç–æ—è—â–∏–º gRPC-style –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
  Future<void> _startHttp2Server() async {
    logger?.info('üöÄ –ó–∞–ø—É—Å–∫ HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ ${config.host}:${config.port}');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API!
    _http2Server = RpcHttp2Server(
      host: config.host,
      port: config.port,
      logger: config.verbose ? logger?.child('Http2Server') : null,
      onEndpointCreated: (endpoint) {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RouterServer –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
        final connectionId = _routerServer.createConnection(
          transport: endpoint.transport,
          connectionLabel: 'http2_${DateTime.now().millisecondsSinceEpoch}',
          clientAddress: 'http2-client',
        );

        logger?.info('‚úÖ HTTP/2 –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: $connectionId');
      },
      onConnectionError: (error, stackTrace) {
        logger?.error('–û—à–∏–±–∫–∞ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
            error: error, stackTrace: config.verbose ? stackTrace : null);
      },
    );

    await _http2Server!.start();
    logger?.info('üöÄ HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${config.host}:${config.port}');
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è daemon —Ä–µ–∂–∏–º–∞
  void _setupDaemonLogging() {
    final logFile = config.logFile ?? '/tmp/rpc_dart_router.log';

    try {
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      File(logFile).createSync(recursive: true);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      final startMessage =
          '${DateTime.now().toIso8601String()}: ===== RPC Router Server Started =====\n';
      File(logFile).writeAsStringSync(startMessage, mode: FileMode.writeOnlyAppend);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      final configMessage =
          '${DateTime.now().toIso8601String()}: Config - Host: ${config.host}, Port: ${config.port}, Stats: ${config.enableStats}\n';
      File(logFile).writeAsStringSync(configMessage, mode: FileMode.writeOnlyAppend);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
      _setupPeriodicLogging(logFile);

      // –ü–∏—à–µ–º —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
      final logSetupMessage =
          '${DateTime.now().toIso8601String()}: Daemon logging configured successfully\n';
      File(logFile).writeAsStringSync(logSetupMessage, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∏—à–µ–º –≤ stderr –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      logger?.warning('Failed to setup daemon logging: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  void _setupPeriodicLogging(String logFile) {
    Timer.periodic(Duration(seconds: 30), (timer) {
      if (!_isRunning) {
        timer.cancel();
        return;
      }

      try {
        final timestamp = DateTime.now().toIso8601String();
        final connectionCount = _routerServer.getStats().activeConnections;
        final logEntry =
            '$timestamp: [DAEMON] Router working, active connections: $connectionCount\n';
        File(logFile).writeAsStringSync(logEntry, mode: FileMode.writeOnlyAppend);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    });
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç health check –¥–ª—è daemon —Ä–µ–∂–∏–º–∞
  void _setupHealthCheck() {
    final logFile = config.logFile ?? '/tmp/rpc_dart_router.log';

    _healthCheckTimer = Timer.periodic(Duration(seconds: 60), (timer) {
      if (!_isRunning) {
        timer.cancel();
        return;
      }

      try {
        final timestamp = DateTime.now().toIso8601String();
        final uptime = DateTime.now().difference(_startTime);
        final routerStats = _routerServer.getStats();

        final healthMsg = '$timestamp: [HEALTH] Uptime: ${_formatDuration(uptime)}, '
            'Connections: ${routerStats.activeConnections}, '
            'Total: ${routerStats.totalConnections}, '
            'Memory: ${_getMemoryUsage()}\n';

        File(logFile).writeAsStringSync(healthMsg, mode: FileMode.writeOnlyAppend);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTTP/2 —Å–µ—Ä–≤–µ—Ä –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (_http2Server == null) {
          final errorMsg = '$timestamp: [ERROR] HTTP/2 server is null!\n';
          File(logFile).writeAsStringSync(errorMsg, mode: FileMode.writeOnlyAppend);
        }
      } catch (e) {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É health check –≤ –ª–æ–≥
        try {
          final timestamp = DateTime.now().toIso8601String();
          File(logFile).writeAsStringSync(
            '$timestamp: [ERROR] Health check failed: $e\n',
            mode: FileMode.writeOnlyAppend,
          );
        } catch (logError) {
          logger?.error('Health check and logging both failed: $e, $logError');
        }
      }
    });
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  void _startStatsTimer() {
    logger?.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30—Å');

    _statsTimer = Timer.periodic(const Duration(seconds: 30), (_) {
      if (_isRunning) {
        _printStats();
      }
    });
  }

  /// –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞
  void _printStats() {
    final routerStats = _routerServer.getStats();
    final uptime = DateTime.now().difference(_startTime);

    print('\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–û–£–¢–ï–†–ê ===');
    print('‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${_formatDuration(uptime)}');
    print('üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${routerStats.activeConnections}');
    print('üìà –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${routerStats.totalConnections}');
    print('üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${routerStats.routerStats.activeClients}');
    print('üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${routerStats.routerStats.totalMessages}');
    print('‚ùå –û—à–∏–±–æ–∫: ${routerStats.routerStats.errorCount}');

    final connections = _routerServer.getActiveConnections();
    if (connections.isNotEmpty) {
      print('üöÄ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:');
      final transportCounts = <String, int>{};
      for (final conn in connections) {
        final transport = conn.transport.replaceAll('Rpc', '').replaceAll('ResponderTransport', '');
        transportCounts[transport] = (transportCounts[transport] ?? 0) + 1;
      }
      for (final entry in transportCounts.entries) {
        print('   ‚Ä¢ ${entry.key}: ${entry.value} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
      }
    }
    print('================================\n');
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  void _printStartupSummary() {
    print('\nüéâ === HTTP/2 gRPC –†–û–£–¢–ï–† –ó–ê–ü–£–©–ï–ù ===');
    print('üì° –î–æ—Å—Ç—É–ø–Ω—ã–π endpoint:');
    print('   ‚Ä¢ HTTP/2 gRPC: http://${config.host}:${config.port}');

    print('\nüí° –ü—Ä–∏–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    print('```dart');
    print('// HTTP/2 gRPC –∫–ª–∏–µ–Ω—Ç (–≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API)');
    print('final client = RpcHttp2Client(');
    print("  host: '${config.host}',");
    print('  port: ${config.port},');
    print(');');
    print('await client.connect();');
    print('final routerClient = RpcRouterClient(callerEndpoint: client.endpoint);');
    print('await routerClient.register(clientName: "my_client");');
    print('await routerClient.initializeP2P();');
    print('```');

    print('\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:');
    print('   ‚Ä¢ Ctrl+C –∏–ª–∏ SIGTERM –¥–ª—è graceful shutdown');
    if (config.enableStats) {
      print('   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–µ 30—Å');
    }
    print('=====================================\n');
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  Future<void> stop() async {
    if (!_isRunning) {
      logger?.warning('–°–µ—Ä–≤–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }

    logger?.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Router Server...');

    await _cleanup();

    final uptime = DateTime.now().difference(_startTime);
    logger?.info('‚úÖ Router Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${_formatDuration(uptime)})');
  }

  /// –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> _cleanup() async {
    _isRunning = false;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    _statsTimer?.cancel();
    _statsTimer = null;

    _healthCheckTimer?.cancel();
    _healthCheckTimer = null;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä
    if (_http2Server != null) {
      logger?.info('–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        await _http2Server!.stop().timeout(Duration(seconds: 5));
        logger?.debug('HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      } catch (e) {
        logger?.warning('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞: $e (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)');
      }
      _http2Server = null;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try {
      await _routerServer.dispose().timeout(Duration(seconds: 5));
      logger?.debug('RouterServer –∑–∞–∫—Ä—ã—Ç');
    } catch (e) {
      logger?.warning('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è RouterServer: $e (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)');
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
  String _getMemoryUsage() {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ps –∫–æ–º–∞–Ω–¥—É
      final result = Process.runSync('ps', ['-o', 'rss=', '-p', '${pid}']);
      if (result.exitCode == 0) {
        final rss = int.tryParse(result.stdout.toString().trim()) ?? 0;
        return '${(rss / 1024).toStringAsFixed(1)}MB';
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    }
    return 'unknown';
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  String _formatDuration(Duration duration) {
    if (duration.inDays > 0) {
      return '${duration.inDays}–¥ ${duration.inHours % 24}—á ${duration.inMinutes % 60}–º';
    } else if (duration.inHours > 0) {
      return '${duration.inHours}—á ${duration.inMinutes % 60}–º';
    } else if (duration.inMinutes > 0) {
      return '${duration.inMinutes}–º ${duration.inSeconds % 60}—Å';
    } else {
      return '${duration.inSeconds}—Å';
    }
  }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Router Server
class RouterServerStats {
  final bool isRunning;
  final Duration uptime;
  final int activeConnections;
  final int totalConnections;
  final int activeClients;
  final int totalMessages;
  final int errorCount;
  final String memoryUsage;

  const RouterServerStats({
    required this.isRunning,
    required this.uptime,
    required this.activeConnections,
    required this.totalConnections,
    required this.activeClients,
    required this.totalMessages,
    required this.errorCount,
    required this.memoryUsage,
  });

  factory RouterServerStats.empty() {
    return const RouterServerStats(
      isRunning: false,
      uptime: Duration.zero,
      activeConnections: 0,
      totalConnections: 0,
      activeClients: 0,
      totalMessages: 0,
      errorCount: 0,
      memoryUsage: '0MB',
    );
  }

  @override
  String toString() {
    return 'RouterServerStats('
        'running: $isRunning, '
        'uptime: $uptime, '
        'connections: $activeConnections/$totalConnections, '
        'clients: $activeClients, '
        'messages: $totalMessages, '
        'errors: $errorCount, '
        'memory: $memoryUsage'
        ')';
  }
}
