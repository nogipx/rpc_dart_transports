// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';

import 'config.dart';

/// –†–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ RpcServerBootstrap
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å:
/// - IRpcServer –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
/// - RpcServerBootstrap –¥–ª—è production-ready –æ–±–≤—è–∑–∫–∏
/// - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Router –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
class RouterServer {
  final RouterConfig config;
  final IRpcServer server;
  final RpcLogger? logger;

  RpcServerBootstrap? _bootstrap;

  RouterServer({
    required this.config,
    required this.server,
    this.logger,
  });

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  Future<void> start() async {
    final serverLogger = logger ?? RpcLogger('RouterServer');

    serverLogger.info('üöÄ –ó–∞–ø—É—Å–∫ P2P Router Server');
    serverLogger.info('   –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${server.runtimeType}');
    serverLogger.info('   –ê–¥—Ä–µ—Å: ${server.host}:${server.port}');
    serverLogger.info('   Daemon: ${config.daemon}');

    try {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
      final contracts = _createRouterContracts(serverLogger);

      // –°–æ–∑–¥–∞–µ–º bootstrap —Å –ø–æ–ª–Ω–æ–π production –æ–±–≤—è–∑–∫–æ–π
      _bootstrap = RpcServerBootstrap(
        appName: 'RPC Dart P2P Router',
        version: '2.0.0',
        description: 'P2P —Ä–æ—É—Ç–µ—Ä –¥–ª—è RPC —Å–æ–æ–±—â–µ–Ω–∏–π',
        contracts: contracts,
        server: server,
        logger: serverLogger,
      );

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RouterConfig –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è bootstrap
      final args = _convertConfigToArgs();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ bootstrap (–≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ production —Ñ–∏—á–∏)
      await _bootstrap!.run(args);
    } catch (e, stackTrace) {
      serverLogger.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞: $e', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  Future<void> stop() async {
    // Bootstrap —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç graceful shutdown
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  /// –°–æ–∑–¥–∞–µ—Ç Router –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  List<RpcResponderContract> _createRouterContracts(RpcLogger logger) {
    final contracts = <RpcResponderContract>[];

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π P2P —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    contracts.add(_createP2PRouterContract(logger));

    logger.info('‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: ${contracts.length}');
    return contracts;
  }

  /// –°–æ–∑–¥–∞–µ—Ç P2P —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  RpcResponderContract _createP2PRouterContract(RpcLogger logger) {
    return RouterResponderContract(
      logger: logger.child('P2PRouter'),
    );
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç RouterConfig –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è RpcServerBootstrap
  List<String> _convertConfigToArgs() {
    final args = <String>[];

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    args.addAll(['--host', server.host]);
    args.addAll(['--port', server.port.toString()]);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (config.verbose) args.add('--verbose');
    if (config.quiet) args.add('--quiet');
    if (config.logFile != null) {
      args.addAll(['--log-file', config.logFile!]);
    }

    // Daemon —Ä–µ–∂–∏–º
    if (config.daemon) args.add('--daemon');
    if (config.isDaemonChild) args.add('--_daemon-child');
    if (config.stopDaemon) args.add('--stop');
    if (config.statusDaemon) args.add('--status');
    if (config.reloadDaemon) args.add('--reload');
    if (config.pidFile != null) {
      args.addAll(['--pid-file', config.pidFile!]);
    }

    return args;
  }
}
