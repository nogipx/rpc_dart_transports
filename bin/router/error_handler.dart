// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:io';
import 'dart:async';

/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ä–æ—É—Ç–µ—Ä–∞
///
/// –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
/// - –†–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
/// - Graceful recovery –¥–ª—è HTTP/2 –æ—à–∏–±–æ–∫
/// - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –¥–ª—è daemon —Ä–µ–∂–∏–º–∞
/// - –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
/// - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
class ErrorHandler {
  final bool verbose;
  final bool isDaemon;
  final String? logFile;

  const ErrorHandler({
    required this.verbose,
    required this.isDaemon,
    this.logFile,
  });

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  Future<void> handleError(dynamic error, StackTrace? stackTrace) async {
    final timestamp = DateTime.now().toIso8601String();
    final errorType = _classifyError(error);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    final errorMessage = _formatErrorMessage(error, stackTrace, timestamp, errorType);

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    await _logError(errorMessage, errorType);

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!isDaemon || errorType.isCritical) {
      _printToConsole(errorMessage, errorType);
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    await _handleSpecificError(error, errorType);
  }

  /// –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏
  ErrorType _classifyError(dynamic error) {
    final errorString = error.toString().toLowerCase();

    // HTTP/2 –æ—à–∏–±–∫–∏ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º—ã–µ)
    if (errorString.contains('http/2 error') ||
        errorString.contains('connection is being forcefully terminated') ||
        errorString.contains('http2exception')) {
      return ErrorType.http2Connection;
    }

    // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
    if (errorString.contains('connection refused') ||
        errorString.contains('network is unreachable') ||
        errorString.contains('socketexception')) {
      return ErrorType.network;
    }

    // –§–∞–π–ª–æ–≤—ã–µ –æ—à–∏–±–∫–∏
    if (errorString.contains('file not found') ||
        errorString.contains('permission denied') ||
        errorString.contains('filesystemexception')) {
      return ErrorType.filesystem;
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    if (errorString.contains('argumenterror') ||
        errorString.contains('formatexception') ||
        errorString.contains('invalid configuration')) {
      return ErrorType.configuration;
    }

    // –û—à–∏–±–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (errorString.contains('out of memory') ||
        errorString.contains('too many open files') ||
        errorString.contains('resource exhausted')) {
      return ErrorType.resource;
    }

    // –û—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (errorString.contains('access denied') ||
        errorString.contains('unauthorized') ||
        errorString.contains('certificate')) {
      return ErrorType.security;
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    return ErrorType.unknown;
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  String _formatErrorMessage(
    dynamic error,
    StackTrace? stackTrace,
    String timestamp,
    ErrorType errorType,
  ) {
    final buffer = StringBuffer();

    buffer.writeln('üö® === –û–®–ò–ë–ö–ê –†–û–£–¢–ï–†–ê ===');
    buffer.writeln('‚ùå –í—Ä–µ–º—è: $timestamp');
    buffer.writeln('üè∑Ô∏è  –¢–∏–ø: ${errorType.displayName}');
    buffer.writeln('üìù –û—à–∏–±–∫–∞: $error');

    if (verbose && stackTrace != null) {
      buffer.writeln('üìç Stack trace:');
      buffer.writeln(stackTrace.toString());
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
    final recovery = _getRecoveryRecommendations(errorType);
    if (recovery.isNotEmpty) {
      buffer.writeln('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      for (final recommendation in recovery) {
        buffer.writeln('   ‚Ä¢ $recommendation');
      }
    }

    buffer.writeln('=' * 50);

    return buffer.toString();
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª (–¥–ª—è daemon —Ä–µ–∂–∏–º–∞)
  Future<void> _logError(String errorMessage, ErrorType errorType) async {
    if (!isDaemon || logFile == null) return;

    try {
      final file = File(logFile!);
      await file.writeAsString(
        errorMessage,
        mode: FileMode.writeOnlyAppend,
      );
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥, –ø–∏—à–µ–º –≤ stderr
      stderr.writeln('Failed to write error to log file: $e');
      stderr.writeln('Original error: $errorMessage');
    }
  }

  /// –í—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
  void _printToConsole(String errorMessage, ErrorType errorType) {
    if (errorType.isCritical) {
      stderr.writeln(errorMessage);
    } else {
      print(errorMessage);
    }
  }

  /// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
  Future<void> _handleSpecificError(dynamic error, ErrorType errorType) async {
    switch (errorType) {
      case ErrorType.http2Connection:
        await _handleHttp2Error(error);
        break;

      case ErrorType.network:
        await _handleNetworkError(error);
        break;

      case ErrorType.filesystem:
        await _handleFilesystemError(error);
        break;

      case ErrorType.resource:
        await _handleResourceError(error);
        break;

      case ErrorType.security:
        await _handleSecurityError(error);
        break;

      default:
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        break;
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP/2 –æ—à–∏–±–∫–∏ (—á–∞—Å—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º—ã–µ)
  Future<void> _handleHttp2Error(dynamic error) async {
    final message =
        'üîó HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤)\n'
        '‚ôªÔ∏è  –†–æ—É—Ç–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É...';

    if (isDaemon && logFile != null) {
      try {
        final timestamp = DateTime.now().toIso8601String();
        await File(logFile!).writeAsString(
          '$timestamp: $message\n',
          mode: FileMode.writeOnlyAppend,
        );
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    } else {
      print(message);
    }

    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è HTTP/2 –æ—à–∏–±–æ–∫
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
  Future<void> _handleNetworkError(dynamic error) async {
    print('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –†–æ—É—Ç–µ—Ä –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É...');

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ fallback
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
  Future<void> _handleFilesystemError(dynamic error) async {
    print('üìÅ –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ...');
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> _handleResourceError(dynamic error) async {
    print('üíæ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤! –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...');

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
    await _forceGarbageCollection();
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  Future<void> _handleSecurityError(dynamic error) async {
    print('üîí –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...');

    // –î–ª—è –æ—à–∏–±–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    exit(1);
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
  Future<void> _forceGarbageCollection() async {
    // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ GC
    await Future.delayed(Duration(milliseconds: 100));

    // –í Dart –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ GC,
    // –Ω–æ –º–æ–∂–µ–º –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∫—ç—à–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  List<String> _getRecoveryRecommendations(ErrorType errorType) {
    switch (errorType) {
      case ErrorType.http2Connection:
        return [
          'HTTP/2 –æ—à–∏–±–∫–∏ –æ–±—ã—á–Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã',
          '–ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
          '–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
        ];

      case ErrorType.network:
        return [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
          '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ firewall',
        ];

      case ErrorType.filesystem:
        return [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º',
          '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º',
        ];

      case ErrorType.configuration:
        return [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞',
          '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –æ–ø—Ü–∏—è–º',
        ];

      case ErrorType.resource:
        return [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º–æ–π',
          '–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ max-connections',
          '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤',
        ];

      case ErrorType.security:
        return [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º',
          '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤',
        ];

      case ErrorType.unknown:
        return [
          '–í–∫–ª—é—á–∏—Ç–µ verbose —Ä–µ–∂–∏–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã',
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
        ];
    }
  }
}

/// –¢–∏–ø—ã –æ—à–∏–±–æ–∫ —Ä–æ—É—Ç–µ—Ä–∞
enum ErrorType {
  /// HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º—ã–µ)
  http2Connection,

  /// –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
  network,

  /// –û—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
  filesystem,

  /// –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  configuration,

  /// –û—à–∏–±–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (–ø–∞–º—è—Ç—å, —Ñ–∞–π–ª—ã)
  resource,

  /// –û—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security,

  /// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
  unknown;

  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  String get displayName {
    switch (this) {
      case ErrorType.http2Connection:
        return 'HTTP/2 Connection';
      case ErrorType.network:
        return 'Network Error';
      case ErrorType.filesystem:
        return 'Filesystem Error';
      case ErrorType.configuration:
        return 'Configuration Error';
      case ErrorType.resource:
        return 'Resource Error';
      case ErrorType.security:
        return 'Security Error';
      case ErrorType.unknown:
        return 'Unknown Error';
    }
  }

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
  bool get isCritical {
    switch (this) {
      case ErrorType.http2Connection:
      case ErrorType.network:
        return false;
      case ErrorType.filesystem:
      case ErrorType.configuration:
      case ErrorType.resource:
      case ErrorType.security:
      case ErrorType.unknown:
        return true;
    }
  }
}
