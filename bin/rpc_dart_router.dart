// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';

import 'package:args/args.dart';

import 'router/cli.dart';
import 'router/config.dart';
import 'router/error_handler.dart';
import 'router/daemon.dart';

const String version = '2.0.0';

void main(List<String> arguments) async {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
  runZonedGuarded<void>(
    () async {
      await _mainWithErrorHandling(arguments);
    },
    (error, stackTrace) {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      final errorHandler = ErrorHandler(
        verbose: true,
        isDaemon: false,
      );
      errorHandler.handleError(error, stackTrace);
    },
  );
}

/// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
Future<void> _mainWithErrorHandling(List<String> arguments) async {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    final parser = _createArgParser();

    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    late final ArgResults args;
    try {
      args = parser.parse(arguments);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: $e\n');
      _printUsage(parser);
      exit(1);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (args['help'] as bool) {
      _printUsage(parser);
      return;
    }

    if (args['version'] as bool) {
      print('üöÄ RPC Dart Router v$version');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    final config = await RouterConfig.fromArgs(args);

    // Daemon –∫–æ–º–∞–Ω–¥—ã
    if (args['daemon-start'] as bool) {
      final daemonManager = DaemonManager(config: config);
      await daemonManager.daemonize();
      return;
    }

    if (args['daemon-stop'] as bool) {
      final daemonManager = DaemonManager(config: config);
      await daemonManager.stop();
      return;
    }

    if (args['daemon-status'] as bool) {
      final daemonManager = DaemonManager(config: config);
      await daemonManager.status();
      return;
    }

    if (args['daemon-reload'] as bool) {
      final daemonManager = DaemonManager(config: config);
      await daemonManager.reload();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º CLI
    final cli = await RouterCLI.create(arguments);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    await cli.run();
  } catch (e, stackTrace) {
    final errorHandler = ErrorHandler(
      verbose: true,
      isDaemon: false,
    );
    await errorHandler.handleError(e, stackTrace);
    exit(1);
  }
}

/// –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
ArgParser _createArgParser() {
  final parser = ArgParser();

  // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
  parser.addOption('host', abbr: 'h', defaultsTo: '0.0.0.0', help: '–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏');
  parser.addOption('port', abbr: 'p', defaultsTo: '8080', help: '–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏');

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  parser.addOption('log-level', allowed: ['debug', 'info', 'warning', 'error'], defaultsTo: 'info');
  parser.addFlag('verbose', abbr: 'v', help: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥');
  parser.addFlag('quiet', abbr: 'q', help: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º');
  parser.addOption('log-file', help: '–§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  parser.addFlag('stats', help: '–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', defaultsTo: true);
  parser.addFlag('metrics', help: '–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ Prometheus');
  parser.addOption('metrics-port', help: '–ü–æ—Ä—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫', defaultsTo: '9090');
  parser.addFlag('health-check', help: '–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤', defaultsTo: true);
  parser.addOption('client-timeout', help: '–¢–∞–π–º–∞—É—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö', defaultsTo: '300');

  // Daemon
  parser.addFlag('daemon', abbr: 'd', help: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ daemon —Ä–µ–∂–∏–º–µ');
  parser.addFlag('daemon-start', help: '–ó–∞–ø—É—Å—Ç–∏—Ç—å daemon');
  parser.addFlag('daemon-stop', help: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon');
  parser.addFlag('daemon-status', help: '–°—Ç–∞—Ç—É—Å daemon');
  parser.addFlag('daemon-reload', help: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å daemon');
  parser.addFlag('stop', help: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon (–∞–ª–∏–∞—Å –¥–ª—è daemon-stop)');
  parser.addFlag('status', help: '–°—Ç–∞—Ç—É—Å daemon (–∞–ª–∏–∞—Å –¥–ª—è daemon-status)');
  parser.addFlag('reload', help: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å daemon (–∞–ª–∏–∞—Å –¥–ª—è daemon-reload)');
  parser.addFlag('_daemon-child', help: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞', hide: true);
  parser.addOption('pid-file', help: '–§–∞–π–ª PID –¥–ª—è daemon');

  // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  parser.addOption('max-connections', help: '–ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π', defaultsTo: '1000');
  parser.addOption('worker-threads', help: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ (0=auto)', defaultsTo: '0');

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  parser.addFlag('tls', help: '–í–∫–ª—é—á–∏—Ç—å TLS');
  parser.addOption('cert-file', help: '–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ TLS');
  parser.addOption('key-file', help: '–§–∞–π–ª –∫–ª—é—á–∞ TLS');

  // –°–ª—É–∂–µ–±–Ω—ã–µ
  parser.addFlag('help', help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É');
  parser.addFlag('version', help: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é');

  return parser;
}

/// –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
void _printUsage(ArgParser parser) {
  print('üöÄ RPC Dart Router v$version');
  print('');
  print('–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π HTTP/2 gRPC —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏');
  print('');
  print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  print('  dart run bin/rpc_dart_router.dart [–æ–ø—Ü–∏–∏]');
  print('');
  print('–û–ø—Ü–∏–∏:');
  print(parser.usage);
  print('');
  print('–ü—Ä–∏–º–µ—Ä—ã:');
  print('  # –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  print('  dart run bin/rpc_dart_router.dart');
  print('');
  print('  # –ó–∞–ø—É—Å–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ö–æ—Å—Ç–µ –∏ –ø–æ—Ä—Ç—É');
  print('  dart run bin/rpc_dart_router.dart -h 127.0.0.1 -p 8080');
  print('');
  print('  # –ó–∞–ø—É—Å–∫ –≤ daemon —Ä–µ–∂–∏–º–µ');
  print('  dart run bin/rpc_dart_router.dart --daemon-start');
  print('');
  print('  # –ó–∞–ø—É—Å–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏');
  print('  dart run bin/rpc_dart_router.dart --verbose --metrics');
  print('');
}
