// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';

import 'package:args/args.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';

const String version = '2.0.0';

void main(List<String> arguments) async {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
  runZonedGuarded<void>(
    () async {
      await _mainWithErrorHandling(arguments);
    },
    (error, stackTrace) {
      // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ unhandled exceptions
      final timestamp = DateTime.now().toIso8601String();
      final errorMsg = 'üö® === –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê ===\n'
          '‚ùå –í—Ä–µ–º—è: $timestamp\n'
          '‚ùå –¢–∏–ø: ${error.runtimeType}\n'
          'üìù –û—à–∏–±–∫–∞: $error\n';

      // –í daemon —Ä–µ–∂–∏–º–µ –ø–∏—à–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª
      if (_isDaemonChild) {
        try {
          final logFile = _daemonLogFile ?? '/tmp/rpc_dart_router.log';
          File(logFile).writeAsStringSync(
            '$timestamp: FATAL ERROR: $error\n$stackTrace\n',
            mode: FileMode.writeOnlyAppend,
          );
        } catch (e) {
          // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥, –ø–∏—à–µ–º –≤ stderr
          stderr.writeln('Failed to write to log: $e');
        }
      }

      print(errorMsg);

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP/2 –æ—à–∏–±–æ–∫
      if (error.toString().contains('HTTP/2 error') ||
          error.toString().contains('Connection is being forcefully terminated')) {
        final httpMsg =
            'üîó HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤)\n‚ôªÔ∏è  –†–æ—É—Ç–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É...';
        print(httpMsg);
        if (_isDaemonChild && _daemonLogFile != null) {
          try {
            File(_daemonLogFile!).writeAsStringSync(
              '$timestamp: $httpMsg\n',
              mode: FileMode.writeOnlyAppend,
            );
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
          }
        }
        return; // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è HTTP/2 –æ—à–∏–±–æ–∫
      }

      if (_isVerbose) {
        print('üìç Stack trace: $stackTrace');
      }

      print('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏...');
      exit(1);
    },
  );
}

/// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
Future<void> _mainWithErrorHandling(List<String> arguments) async {
  final parser = _buildArgParser();

  try {
    final argResults = parser.parse(arguments);

    if (argResults['help'] as bool) {
      _printUsage(parser);
      return;
    }

    if (argResults['version'] as bool) {
      print('üöÄ RPC Dart Router v$version');
      return;
    }

    final config = _parseConfig(argResults);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ daemon –∫–æ–º–∞–Ω–¥
    if (argResults['stop'] as bool) {
      await _stopDaemon(config);
      return;
    }

    if (argResults['status'] as bool) {
      await _statusDaemon(config);
      return;
    }

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º daemon –∏ –µ—â–µ –Ω–µ –¥–µ–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã - –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω–∏–∑–∞—Ü–∏—é
    if (config.daemon && !_isDaemonChild) {
      await _daemonize(config, arguments);
      return; // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
    }

    final routerCli = RouterCLI(config);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    await routerCli.start();

    // Graceful shutdown
    await _waitForShutdownSignal();

    // Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    print('üîÑ Graceful shutdown –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
    try {
      await routerCli.stop().timeout(
        Duration(seconds: 10),
        onTimeout: () {
          print('‚ö†Ô∏è Graceful shutdown –ø—Ä–µ–≤—ã—Å–∏–ª 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
          exit(1);
        },
      );
      print('‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown: $e');
      exit(1);
    }
  } on FormatException catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: ${e.message}');
    print('');
    _printUsage(parser);
    exit(1);
  } catch (e, stackTrace) {
    print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    if (_isVerbose) {
      print('üìç Stack trace: $stackTrace');
    }
    exit(1);
  }
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
class RouterConfig {
  final String host;
  final int port;
  final bool enableStats;
  final String logLevel;
  final bool verbose;
  final int clientTimeoutSeconds;
  final bool daemon;
  final String? pidFile;
  final String? logFile;

  const RouterConfig({
    this.host = '0.0.0.0',
    this.port = 11112, // HTTP/2 –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.enableStats = true,
    this.logLevel = 'info',
    this.verbose = false,
    this.clientTimeoutSeconds = 300,
    this.daemon = false,
    this.pidFile,
    this.logFile,
  });
}

bool _isVerbose = false;
bool _isDaemonChild = false;
String? _daemonLogFile;

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å CLI —Ä–æ—É—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ HTTP/2)
class RouterCLI {
  final RouterConfig config;
  final RpcLogger logger;

  /// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  late final RpcRouterServer _routerServer;

  /// HTTP/2 —Å–µ—Ä–≤–µ—Ä (–≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π)
  RpcHttp2Server? _http2Server;

  /// –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  final List<StreamSubscription> _http2Subscriptions = [];

  /// –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Timer? _statsTimer;

  /// –¢–∞–π–º–µ—Ä health check –¥–ª—è daemon
  Timer? _healthCheckTimer;

  /// –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
  late final DateTime _startTime;

  RouterCLI(this.config) : logger = RpcLogger('RouterCLI') {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    RpcLogger.setDefaultMinLogLevel(RpcLoggerLevel.info);

    // Daemon –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è daemon —Ä–µ–∂–∏–º–∞
  void _setupDaemonLogging() {
    final logFile = config.logFile ?? '/tmp/rpc_dart_router.log';

    try {
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      File(logFile).createSync(recursive: true);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      final startMessage =
          '${DateTime.now().toIso8601String()}: ===== RPC Router Daemon Child Started =====\n';
      File(logFile).writeAsStringSync(startMessage, mode: FileMode.writeOnlyAppend);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      final configMessage =
          '${DateTime.now().toIso8601String()}: Config - Host: ${config.host}, Port: ${config.port}, Stats: ${config.enableStats}\n';
      File(logFile).writeAsStringSync(configMessage, mode: FileMode.writeOnlyAppend);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
      _setupPeriodicLogging(logFile);

      // –ü–∏—à–µ–º —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
      final logSetupMessage =
          '${DateTime.now().toIso8601String()}: Daemon logging configured successfully\n';
      File(logFile).writeAsStringSync(logSetupMessage, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∏—à–µ–º –≤ stderr –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      stderr.writeln('Warning: Failed to setup daemon logging: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  void _setupPeriodicLogging(String logFile) {
    Timer.periodic(Duration(seconds: 30), (timer) {
      try {
        final timestamp = DateTime.now().toIso8601String();
        final connectionCount = _routerServer.getStats().activeConnections;
        final logEntry =
            '$timestamp: [DAEMON] Router working, active connections: $connectionCount\n';
        File(logFile).writeAsStringSync(logEntry, mode: FileMode.writeOnlyAppend);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    });
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç health check –¥–ª—è daemon —Ä–µ–∂–∏–º–∞
  void _setupHealthCheck() {
    final logFile = config.logFile ?? '/tmp/rpc_dart_router.log';

    _healthCheckTimer = Timer.periodic(Duration(seconds: 60), (timer) {
      try {
        final timestamp = DateTime.now().toIso8601String();
        final uptime = DateTime.now().difference(_startTime);
        final stats = _routerServer.getStats();

        final healthMsg = '$timestamp: [HEALTH] Uptime: ${_formatDuration(uptime)}, '
            'Connections: ${stats.activeConnections}, '
            'Total: ${stats.totalConnections}, '
            'Memory: ${_getMemoryUsage()}\n';

        File(logFile).writeAsStringSync(healthMsg, mode: FileMode.writeOnlyAppend);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTTP/2 —Å–µ—Ä–≤–µ—Ä –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (_http2Server == null) {
          final errorMsg = '$timestamp: [ERROR] HTTP/2 server is null!\n';
          File(logFile).writeAsStringSync(errorMsg, mode: FileMode.writeOnlyAppend);
        }
      } catch (e) {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É health check –≤ –ª–æ–≥
        try {
          final timestamp = DateTime.now().toIso8601String();
          File(logFile).writeAsStringSync(
            '$timestamp: [ERROR] Health check failed: $e\n',
            mode: FileMode.writeOnlyAppend,
          );
        } catch (logError) {
          stderr.writeln('Health check and logging both failed: $e, $logError');
        }
      }
    });
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
  String _getMemoryUsage() {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ps –∫–æ–º–∞–Ω–¥—É
      final result = Process.runSync('ps', ['-o', 'rss=', '-p', '\$\$']);
      if (result.exitCode == 0) {
        final rss = int.tryParse(result.stdout.toString().trim()) ?? 0;
        return '${(rss / 1024).toStringAsFixed(1)}MB';
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    }
    return 'unknown';
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/2 —Ä–æ—É—Ç–µ—Ä
  Future<void> start() async {
    _startTime = DateTime.now();

    try {
      logger.info('üöÄ –ó–∞–ø—É—Å–∫ RPC Dart Router v$version (HTTP/2 gRPC)');
      logger.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
      logger.info('  ‚Ä¢ –•–æ—Å—Ç: ${config.host}');
      logger.info('  ‚Ä¢ –ü–æ—Ä—Ç: ${config.port}');
      logger.info('  ‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: HTTP/2 gRPC');
      logger.info('  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${config.logLevel}');
      logger.info('  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${config.enableStats ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}');

      if (config.daemon && _isDaemonChild) {
        logger.info('  ‚Ä¢ –†–µ–∂–∏–º: Daemon');
        if (config.pidFile != null) {
          logger.info('  ‚Ä¢ PID —Ñ–∞–π–ª: ${config.pidFile}');
        }
        if (config.logFile != null) {
          logger.info('  ‚Ä¢ –õ–æ–≥ —Ñ–∞–π–ª: ${config.logFile}');
        }
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
      _routerServer = RpcRouterServer(
        logger: logger.child('RouterServer'),
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä
      await _startHttp2Server();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
      if (config.enableStats) {
        _startStatsTimer();
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º daemon –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞
      if (config.daemon && _isDaemonChild) {
        _setupDaemonLogging();
        _setupHealthCheck();
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
      _printStartupSummary();
    } catch (e, stackTrace) {
      final errorMsg = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞: $e';

      // –í daemon —Ä–µ–∂–∏–º–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª
      if (config.daemon && _isDaemonChild) {
        try {
          final logFile = config.logFile ?? '/tmp/rpc_dart_router.log';
          final timestamp = DateTime.now().toIso8601String();
          File(logFile).writeAsStringSync(
            '$timestamp: FATAL STARTUP ERROR: $e\n$stackTrace\n',
            mode: FileMode.writeOnlyAppend,
          );
        } catch (logError) {
          stderr.writeln('Failed to write startup error to log: $logError');
        }
      }

      logger.error(errorMsg, error: e, stackTrace: config.verbose ? stackTrace : null);

      // –í daemon —Ä–µ–∂–∏–º–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º exit(1) —Å—Ä–∞–∑—É - –ø—ã—Ç–∞–µ–º—Å—è graceful shutdown
      if (config.daemon && _isDaemonChild) {
        stderr.writeln('Daemon startup failed, attempting graceful shutdown...');
        try {
          await stop();
        } catch (stopError) {
          stderr.writeln('Graceful shutdown failed: $stopError');
        }
      }

      exit(1);
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/2 —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞—Å—Ç–æ—è—â–∏–º gRPC-style –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
  Future<void> _startHttp2Server() async {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ ${config.host}:${config.port}');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API!
    _http2Server = RpcHttp2Server(
      host: config.host,
      port: config.port,
      logger: config.verbose ? logger.child('Http2Server') : null,
      onEndpointCreated: (endpoint) {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RouterServer –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
        final connectionId = _routerServer.createConnection(
          transport: endpoint.transport,
          connectionLabel: 'http2_${DateTime.now().millisecondsSinceEpoch}',
          clientAddress: 'http2-client',
        );

        logger.info('‚úÖ HTTP/2 –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: $connectionId');
      },
      onConnectionError: (error, stackTrace) {
        logger.error('–û—à–∏–±–∫–∞ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
            error: error, stackTrace: config.verbose ? stackTrace : null);
      },
    );

    await _http2Server!.start();
    logger.info('üöÄ HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${config.host}:${config.port}');
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  void _handleHttp2Transport(RpcHttp2ResponderTransport transport) {
    final connectionId = 'http2_${DateTime.now().millisecondsSinceEpoch}';

    logger.debug('üîó –ù–æ–≤—ã–π HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: $connectionId');

    try {
      // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RouterServer
      final actualConnectionId = _routerServer.createConnection(
        transport: transport,
        connectionLabel: connectionId,
        clientAddress: 'http2-client',
      );

      logger.info('‚úÖ HTTP/2 –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: $actualConnectionId');

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      transport.incomingMessages.listen(
        (message) {
          try {
            // –°–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è RouterServer'–æ–º
            logger.debug(
                'HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç $actualConnectionId: stream ${message.streamId}');
          } catch (e) {
            logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç $actualConnectionId: $e');
          }
        },
        onError: (error) async {
          try {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
            if (error.toString().contains('Connection is being forcefully terminated') ||
                error.toString().contains('HTTP/2 error')) {
              logger.debug(
                  'üîó HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ $actualConnectionId –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º (–Ω–æ—Ä–º–∞–ª—å–Ω–æ): $error');
            } else {
              logger.warning('‚ùå –û—à–∏–±–∫–∞ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è $actualConnectionId: $error');
            }

            // Graceful –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await _routerServer.closeConnection(actualConnectionId, reason: 'HTTP/2 error: $error');
          } catch (e) {
            logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è $actualConnectionId: $e');
          }
        },
        onDone: () async {
          try {
            logger.info('üîå HTTP/2 –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: $actualConnectionId');
            await _routerServer.closeConnection(actualConnectionId, reason: 'HTTP/2 closed');
          } catch (e) {
            logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è $actualConnectionId –≤ onDone: $e');
          }
        },
        cancelOnError: false, // –ù–µ –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
      );
    } catch (e, stackTrace) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞',
          error: e, stackTrace: config.verbose ? stackTrace : null);
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  void _startStatsTimer() {
    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30—Å');

    _statsTimer = Timer.periodic(const Duration(seconds: 30), (_) {
      _printStats();
    });
  }

  /// –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞
  void _printStats() {
    final stats = _routerServer.getStats();
    final uptime = DateTime.now().difference(_startTime);

    print('\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–û–£–¢–ï–†–ê ===');
    print('‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${_formatDuration(uptime)}');
    print('üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.activeConnections}');
    print('üìà –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.totalConnections}');
    print('üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${stats.routerStats.activeClients}');
    print('üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.routerStats.totalMessages}');
    print('‚ùå –û—à–∏–±–æ–∫: ${stats.routerStats.errorCount}');

    final connections = _routerServer.getActiveConnections();
    if (connections.isNotEmpty) {
      print('üöÄ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:');
      final transportCounts = <String, int>{};
      for (final conn in connections) {
        final transport = conn.transport.replaceAll('Rpc', '').replaceAll('ResponderTransport', '');
        transportCounts[transport] = (transportCounts[transport] ?? 0) + 1;
      }
      for (final entry in transportCounts.entries) {
        print('   ‚Ä¢ ${entry.key}: ${entry.value} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
      }
    }
    print('================================\n');
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  void _printStartupSummary() {
    print('\nüéâ === HTTP/2 gRPC –†–û–£–¢–ï–† –ó–ê–ü–£–©–ï–ù ===');
    print('üì° –î–æ—Å—Ç—É–ø–Ω—ã–π endpoint:');
    print('   ‚Ä¢ HTTP/2 gRPC: http://${config.host}:${config.port}');

    print('\nüí° –ü—Ä–∏–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    print('```dart');
    print('// HTTP/2 gRPC –∫–ª–∏–µ–Ω—Ç');
    print('final transport = await RpcHttp2CallerTransport.connect(');
    print("  host: '${config.host}',");
    print('  port: ${config.port},');
    print(');');
    print('final endpoint = RpcCallerEndpoint(transport: transport);');
    print('final client = RpcRouterClient(callerEndpoint: endpoint);');
    print('await client.register(clientName: "my_client");');
    print('await client.initializeP2P();');
    print('```');

    print('\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:');
    print('   ‚Ä¢ Ctrl+C –∏–ª–∏ SIGTERM –¥–ª—è graceful shutdown');
    if (config.enableStats) {
      print('   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–µ 30—Å');
    }
    print('=====================================\n');
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä
  Future<void> stop() async {
    logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    _statsTimer?.cancel();
    _statsTimer = null;

    _healthCheckTimer?.cancel();
    _healthCheckTimer = null;

    // –û—Ç–º–µ–Ω—è–µ–º HTTP/2 –ø–æ–¥–ø–∏—Å–∫–∏
    for (final subscription in _http2Subscriptions) {
      try {
        await subscription.cancel();
      } catch (e) {
        logger.warning('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã HTTP/2 –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      }
    }
    _http2Subscriptions.clear();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä
    if (_http2Server != null) {
      logger.info('–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        await _http2Server!.stop().timeout(Duration(seconds: 5));
        logger.debug('HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      } catch (e) {
        logger.warning('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞: $e (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)');
      }
      _http2Server = null;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try {
      await _routerServer.dispose().timeout(Duration(seconds: 5));
      logger.debug('RouterServer –∑–∞–∫—Ä—ã—Ç');
    } catch (e) {
      logger.warning('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è RouterServer: $e (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)');
    }

    final uptime = DateTime.now().difference(_startTime);
    logger.info('‚úÖ –†–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${_formatDuration(uptime)})');
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  String _formatDuration(Duration duration) {
    if (duration.inDays > 0) {
      return '${duration.inDays}–¥ ${duration.inHours % 24}—á ${duration.inMinutes % 60}–º';
    } else if (duration.inHours > 0) {
      return '${duration.inHours}—á ${duration.inMinutes % 60}–º';
    } else if (duration.inMinutes > 0) {
      return '${duration.inMinutes}–º ${duration.inSeconds % 60}—Å';
    } else {
      return '${duration.inSeconds}—Å';
    }
  }
}

/// –î–µ–º–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º)
Future<void> _daemonize(RouterConfig config, List<String> arguments) async {
  if (!Platform.isLinux && !Platform.isMacOS) {
    print('‚ùå –†–µ–∂–∏–º daemon –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Linux –∏ macOS');
    exit(1);
  }

  print('üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ daemon...');

  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
  final scriptPath = Platform.script.toFilePath();

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (—É–±–∏—Ä–∞–µ–º --daemon –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥)
  final childArgs = arguments.where((arg) => arg != '--daemon' && arg != '-d').toList();
  childArgs.add('--_daemon-child');

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
  final logFile = config.logFile ?? '/tmp/rpc_dart_router.log';
  final pidFile = config.pidFile ?? '/tmp/rpc_dart_router.pid';

  try {
    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –∑–∞—Ä–∞–Ω–µ–µ
    await File(logFile).create(recursive: true);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ
    final startupMessage =
        '${DateTime.now().toIso8601String()}: ===== Daemon startup initiated =====\n';
    await File(logFile).writeAsString(startupMessage, mode: FileMode.writeOnlyAppend);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –≤ detached —Ä–µ–∂–∏–º–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    final process = await Process.start(
      Platform.resolvedExecutable,
      [scriptPath, ...childArgs],
      mode: ProcessStartMode.detached,
      runInShell: false,
      workingDirectory: Directory.current.path,
      // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ
    );

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    await Future.delayed(Duration(milliseconds: 500));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω
    if (!_isProcessRunning(process.pid)) {
      print('‚ùå –î–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è');
      exit(1);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
    await File(pidFile).writeAsString('${process.pid}');

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    try {
      final logEntry =
          '${DateTime.now().toIso8601String()}: ===== Daemon —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ—á–µ—Ä–Ω–∏–π PID: ${process.pid} =====\n';
      await File(logFile).writeAsString(logEntry, mode: FileMode.writeOnlyAppend);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
    }

    print('‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: ${process.pid}');
    print('üìÑ PID —Ñ–∞–π–ª: $pidFile');
    print('üìù –õ–æ–≥–∏: $logFile');
    print('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è');

    // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
    exit(0);
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    exit(1);
  }
}

/// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç daemon
Future<void> _stopDaemon(RouterConfig config) async {
  final pidFile = config.pidFile ?? '/tmp/rpc_dart_router.pid';

  if (!await File(pidFile).exists()) {
    print('‚ùå PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $pidFile');
    print('üí° Daemon –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    exit(1);
  }

  try {
    final pidStr = await File(pidFile).readAsString();
    final pid = int.parse(pidStr.trim());

    print('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon —Å PID: $pid');

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
      final result = Process.killPid(pid, ProcessSignal.sigterm);
      print('üì§ SIGTERM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result');

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ killPid)
      var attempts = 0;
      while (attempts < 50) {
        // –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        await Future.delayed(Duration(milliseconds: 200));
        if (!_isProcessRunning(pid)) {
          break;
        }
        attempts++;
        if (attempts % 10 == 0) {
          print('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞... ($attempts/50)');
        }
      }

      if (_isProcessRunning(pid)) {
        print('‚ö†Ô∏è Graceful shutdown –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...');
        Process.killPid(pid, ProcessSignal.sigkill);
        await Future.delayed(Duration(seconds: 1));

        if (_isProcessRunning(pid)) {
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å');
          exit(1);
        }
      }

      // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
      await File(pidFile).delete();
      print('‚úÖ Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: $e');
      // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å PID —Ñ–∞–π–ª –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (!_isProcessRunning(pid)) {
        await File(pidFile).delete();
        print('üßπ PID —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω (–ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)');
      }
      exit(1);
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ daemon: $e');
    exit(1);
  }
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å daemon
Future<void> _statusDaemon(RouterConfig config) async {
  final pidFile = config.pidFile ?? '/tmp/rpc_dart_router.pid';

  if (!await File(pidFile).exists()) {
    print('‚ùå Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω (PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)');
    exit(1);
  }

  try {
    final pidStr = await File(pidFile).readAsString();
    final pid = int.parse(pidStr.trim());

    if (_isProcessRunning(pid)) {
      print('‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: $pid');
      print('üìÑ PID —Ñ–∞–π–ª: $pidFile');
      if (config.logFile != null) {
        print('üìù –õ–æ–≥–∏: ${config.logFile}');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
      final logFile = config.logFile ?? '/tmp/rpc_dart_router.log';
      if (await File(logFile).exists()) {
        final stat = await File(logFile).stat();
        print('üìä –†–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞: ${_formatBytes(stat.size)}');
        print('üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${stat.modified}');
      }
    } else {
      print('‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID $pid –Ω–µ –Ω–∞–π–¥–µ–Ω');
      print('üîß –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª...');
      await File(pidFile).delete();
      exit(1);
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
    exit(1);
  }
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID
bool _isProcessRunning(int pid) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ps –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    final result = Process.runSync('ps', ['-p', pid.toString()]);
    return result.exitCode == 0;
  } catch (e) {
    return false;
  }
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
String _formatBytes(int bytes) {
  if (bytes < 1024) return '$bytes B';
  if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
  if (bytes < 1024 * 1024 * 1024) return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
  return '${(bytes / (1024 * 1024 * 1024)).toStringAsFixed(1)} GB';
}

/// –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
ArgParser _buildArgParser() {
  return ArgParser()
    ..addOption(
      'host',
      abbr: 'h',
      defaultsTo: '0.0.0.0',
      help: '–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞',
    )
    ..addOption(
      'port',
      abbr: 'p',
      defaultsTo: '11112',
      help: '–ü–æ—Ä—Ç –¥–ª—è HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä–∞',
    )
    ..addOption(
      'log-level',
      abbr: 'l',
      defaultsTo: 'info',
      allowed: ['debug', 'info', 'warning', 'error', 'critical', 'none'],
      help: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    )
    ..addFlag(
      'quiet',
      abbr: 'q',
      help: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º –≤—ã–≤–æ–¥–∞)',
    )
    ..addFlag(
      'verbose',
      abbr: 'v',
      help: '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º (–¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)',
    )
    ..addFlag(
      'stats',
      abbr: 's',
      defaultsTo: false,
      help: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞',
    )
    ..addFlag(
      'health-check',
      defaultsTo: true,
      help: '–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤',
    )
    ..addOption(
      'client-timeout',
      defaultsTo: '300',
      help: '–¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
    )
    ..addFlag(
      'daemon',
      abbr: 'd',
      help: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ daemon (—Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)',
    )
    ..addOption(
      'pid-file',
      help: '–ü—É—Ç—å –∫ PID —Ñ–∞–π–ª—É –¥–ª—è daemon —Ä–µ–∂–∏–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /tmp/rpc_dart_router.pid)',
    )
    ..addOption(
      'log-file',
      help: '–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –¥–ª—è daemon —Ä–µ–∂–∏–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /tmp/rpc_dart_router.log)',
    )
    ..addFlag(
      'stop',
      help: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon',
    )
    ..addFlag(
      'status',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å daemon',
    )
    ..addFlag(
      '_daemon-child',
      hide: true,
      help: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ daemon',
    )
    ..addFlag(
      'help',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
    )
    ..addFlag(
      'version',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é',
    );
}

/// –ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
RouterConfig _parseConfig(ArgResults argResults) {
  final host = argResults['host'] as String;
  final portStr = argResults['port'] as String;
  final logLevelStr = argResults['log-level'] as String;
  final quiet = argResults['quiet'] as bool;
  final verbose = argResults['verbose'] as bool;
  final enableStats = argResults['stats'] as bool;
  final clientTimeoutStr = argResults['client-timeout'] as String;
  final daemon = argResults['daemon'] as bool;
  final pidFile = argResults['pid-file'] as String?;
  final logFile = argResults['log-file'] as String?;
  final isDaemonChild = argResults['_daemon-child'] as bool;

  _isVerbose = verbose;
  _isDaemonChild = isDaemonChild;
  if (isDaemonChild) {
    _daemonLogFile = logFile ?? '/tmp/rpc_dart_router.log';
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
  final port = int.tryParse(portStr);
  if (port == null || port < 1 || port > 65535) {
    throw FormatException('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535, –ø–æ–ª—É—á–µ–Ω: $portStr');
  }

  // –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ñ–ª–∞–≥–æ–≤
  if (quiet && verbose) {
    throw FormatException('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --quiet –∏ --verbose –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  RpcLoggerLevel logLevel;
  switch (logLevelStr) {
    case 'debug':
      logLevel = RpcLoggerLevel.debug;
      break;
    case 'info':
      logLevel = RpcLoggerLevel.info;
      break;
    case 'warning':
      logLevel = RpcLoggerLevel.warning;
      break;
    case 'error':
      logLevel = RpcLoggerLevel.error;
      break;
    case 'critical':
      logLevel = RpcLoggerLevel.critical;
      break;
    case 'none':
      logLevel = RpcLoggerLevel.none;
      break;
    default:
      throw FormatException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: $logLevelStr');
  }

  // Quiet –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç log-level
  if (quiet) {
    logLevel = RpcLoggerLevel.none;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–∞
  final clientTimeout = int.tryParse(clientTimeoutStr);
  if (clientTimeout == null || clientTimeout < 1) {
    throw FormatException('–¢–∞–π–º–∞—É—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }

  return RouterConfig(
    host: host,
    port: port,
    enableStats: enableStats,
    logLevel: logLevel.name,
    verbose: verbose,
    clientTimeoutSeconds: clientTimeout,
    daemon: daemon,
    pidFile: pidFile,
    logFile: logFile,
  );
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
void _printUsage(ArgParser parser) {
  print('üöÄ RPC Dart Router v$version - HTTP/2 gRPC —Ä–æ—É—Ç–µ—Ä –¥–ª—è RPC –≤—ã–∑–æ–≤–æ–≤\n');
  print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: rpc_dart_router [options]\n');
  print('–û–ø—Ü–∏–∏:');
  print(parser.usage);
  print('\n–ü—Ä–∏–º–µ—Ä—ã:');
  print('  rpc_dart_router                    # HTTP/2 –Ω–∞ –ø–æ—Ä—Ç—É 11112');
  print('  rpc_dart_router -p 8080            # HTTP/2 –Ω–∞ –ø–æ—Ä—Ç—É 8080');
  print('  rpc_dart_router -h 192.168.1.100   # HTTP/2 –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º IP');
  print('  rpc_dart_router --quiet             # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º');
  print('  rpc_dart_router -v --log-level debug # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
  print('  rpc_dart_router --stats             # –° –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π');
  print('  rpc_dart_router --client-timeout 600 # –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç');
  print('\n–î–µ–º–æ–Ω —Ä–µ–∂–∏–º:');
  print('  rpc_dart_router -d                  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
  print('  rpc_dart_router -d --pid-file /var/run/router.pid # –ö–∞—Å—Ç–æ–º–Ω—ã–π PID —Ñ–∞–π–ª');
  print('  rpc_dart_router -d --log-file /var/log/router.log # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª');
  print('  rpc_dart_router --status            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å daemon');
  print('  rpc_dart_router --stop              # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon');
  print('\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:');
  print('  HTTP/2 gRPC     –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏–Ω–≥–æ–º');
  print(
      '                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã RPC –≤—ã–∑–æ–≤–æ–≤: unary, client/server/bidirectional streams');
  print('\n–î–µ–º–æ–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:');
  print('  ‚Ä¢ PID —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /tmp/rpc_dart_router.pid');
  print('  ‚Ä¢ –õ–æ–≥ —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /tmp/rpc_dart_router.log');
  print('  ‚Ä¢ Graceful shutdown —á–µ—Ä–µ–∑ SIGTERM');
  print('  ‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ SIGKILL');
}

/// –û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C, SIGTERM)
Future<void> _waitForShutdownSignal() async {
  final completer = Completer<void>();
  bool shutdownInitiated = false;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SIGINT (Ctrl+C)
  ProcessSignal.sigint.watch().listen((signal) {
    if (!shutdownInitiated) {
      shutdownInitiated = true;
      print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      if (!completer.isCompleted) {
        completer.complete();
      }
    } else {
      print('\n‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π SIGINT - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!');
      exit(130); // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è SIGINT
    }
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SIGTERM
  ProcessSignal.sigterm.watch().listen((signal) {
    if (!shutdownInitiated) {
      shutdownInitiated = true;
      print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      if (!completer.isCompleted) {
        completer.complete();
      }
    } else {
      print('\n‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π SIGTERM - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!');
      exit(143); // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è SIGTERM
    }
  });

  await completer.future;
}
