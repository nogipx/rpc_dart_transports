// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:args/args.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';
import 'package:web_socket_channel/io.dart';

const String version = '2.0.0';

void main(List<String> arguments) async {
  final parser = _buildArgParser();

  try {
    final argResults = parser.parse(arguments);

    if (argResults['help'] as bool) {
      _printUsage(parser);
      return;
    }

    if (argResults['version'] as bool) {
      print('üöÄ RPC Dart Router v$version');
      return;
    }

    final config = _parseConfig(argResults);
    final routerCli = RouterCLI(config);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    await routerCli.start();

    // Graceful shutdown
    await _waitForShutdownSignal();
    await routerCli.stop();
  } on FormatException catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: ${e.message}');
    print('');
    _printUsage(parser);
    exit(1);
  } catch (e, stackTrace) {
    print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    if (_isVerbose) {
      print('üìç Stack trace: $stackTrace');
    }
    exit(1);
  }
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
class RouterConfig {
  final String host;
  final int websocketPort;
  final int http2Port;
  final List<String> transports;
  final bool enableStats;
  final String logLevel;
  final bool verbose;
  final int clientTimeoutSeconds;

  const RouterConfig({
    this.host = '0.0.0.0',
    this.websocketPort = 11111,
    this.http2Port = 11112,
    this.transports = const ['http2'], // HTTP/2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.enableStats = true, // –í–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.logLevel = 'info',
    this.verbose = false,
    this.clientTimeoutSeconds = 300,
  });
}

/// –¢–∏–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
enum TransportType {
  websocket,
  http2,
}

bool _isVerbose = false;

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å CLI —Ä–æ—É—Ç–µ—Ä–∞
class RouterCLI {
  final RouterConfig config;
  final RpcLogger logger;

  /// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  late final RpcRouterServer _routerServer;

  /// –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  final Map<TransportType, HttpServer> _servers = {};

  /// –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Timer? _statsTimer;

  /// –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
  late final DateTime _startTime;

  RouterCLI(this.config) : logger = RpcLogger('RouterCLI') {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    RpcLoggerSettings.setDefaultMinLogLevel(RpcLoggerLevel.info);
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞–º–∏
  Future<void> start() async {
    _startTime = DateTime.now();

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ RPC Dart Router v$version');
    logger.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    logger.info('  ‚Ä¢ –•–æ—Å—Ç: ${config.host}');
    logger.info('  ‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã: ${config.transports.join(', ')}');
    logger.info('  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${config.logLevel}');
    logger.info('  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${config.enableStats ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}');

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
      _routerServer = RpcRouterServer(
        logger: logger.child('RouterServer'),
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
      for (final transport in config.transports) {
        await _startTransport(transport);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
      if (config.enableStats) {
        _startStatsTimer();
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
      _printStartupSummary();
    } catch (e, stackTrace) {
      logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞',
          error: e, stackTrace: config.verbose ? stackTrace : null);
      exit(1);
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  Future<void> _startTransport(String transport) async {
    switch (transport) {
      case 'websocket':
        await _startWebSocketServer();
        break;
      case 'http2':
        await _startHttp2Server();
        break;
      default:
        throw FormatException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: $transport');
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä
  Future<void> _startWebSocketServer() async {
    final server = await HttpServer.bind(config.host, config.websocketPort);
    _servers[TransportType.websocket] = server;

    logger.info('üåê WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://${config.host}:${config.websocketPort}');

    server.listen((request) async {
      if (WebSocketTransformer.isUpgradeRequest(request)) {
        await _handleWebSocketConnection(request);
      } else {
        await _handleNonWebSocketRequest(request);
      }
    });
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/2 —Å–µ—Ä–≤–µ—Ä
  Future<void> _startHttp2Server() async {
    final server = await HttpServer.bind(config.host, config.http2Port);
    _servers[TransportType.http2] = server;

    logger.info('üöÄ HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${config.host}:${config.http2Port}');

    server.listen((request) async {
      await _handleHttp2Connection(request);
    });
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  Future<void> _handleWebSocketConnection(HttpRequest request) async {
    try {
      final webSocket = await WebSocketTransformer.upgrade(request);
      final clientAddress = request.connectionInfo?.remoteAddress.toString() ?? 'unknown';

      logger.debug('üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: $clientAddress');

      // –°–æ–∑–¥–∞–µ–º WebSocket —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      final channel = IOWebSocketChannel(webSocket);
      final transport = RpcWebSocketResponderTransport(
        channel,
        logger: config.verbose ? logger.child('WSTransport') : null,
      );

      // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RouterServer
      final connectionId = _routerServer.createConnection(
        transport: transport,
        connectionLabel: 'ws_${clientAddress}_${DateTime.now().millisecondsSinceEpoch}',
        clientAddress: clientAddress,
      );

      logger.info('‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: $connectionId');

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      webSocket.done.then((_) async {
        logger.info('üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: $connectionId');
        await _routerServer.closeConnection(connectionId, reason: 'WebSocket closed');
      }).catchError((error) async {
        logger.warning('‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è $connectionId: $error');
        await _routerServer.closeConnection(connectionId, reason: 'WebSocket error: $error');
      });
    } catch (e, stackTrace) {
      logger.error('–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
          error: e, stackTrace: config.verbose ? stackTrace : null);
      request.response.statusCode = 500;
      await request.response.close();
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ-WebSocket –∑–∞–ø—Ä–æ—Å –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
  Future<void> _handleNonWebSocketRequest(HttpRequest request) async {
    logger.debug('–ü–æ–ª—É—á–µ–Ω –Ω–µ-WebSocket –∑–∞–ø—Ä–æ—Å: ${request.method} ${request.uri}');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—É—Ç–µ—Ä–µ
    final stats = _routerServer.getStats();
    final uptime = DateTime.now().difference(_startTime);

    final info = {
      'service': 'RPC Dart Router',
      'version': version,
      'transport': 'WebSocket',
      'uptime_seconds': uptime.inSeconds,
      'active_connections': stats.activeConnections,
      'total_connections': stats.totalConnections,
      'endpoints': {
        'websocket': 'ws://${config.host}:${config.websocketPort}',
        if (config.transports.contains('http2'))
          'http2': 'http://${config.host}:${config.http2Port}',
      }
    };

    request.response
      ..statusCode = 200
      ..headers.contentType = ContentType.json
      ..write(jsonEncode(info))
      ..close();
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  Future<void> _handleHttp2Connection(HttpRequest request) async {
    try {
      final clientAddress = request.connectionInfo?.remoteAddress.toString() ?? 'unknown';

      logger.debug('üîó HTTP/2 –∑–∞–ø—Ä–æ—Å: ${request.method} ${request.uri} –æ—Ç $clientAddress');

      // –ü–æ–∫–∞ —á—Ç–æ HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      final stats = _routerServer.getStats();
      final uptime = DateTime.now().difference(_startTime);

      final info = {
        'service': 'RPC Dart Router',
        'version': version,
        'transport': 'HTTP/2',
        'status': 'available',
        'note': 'HTTP/2 router requires proper gRPC-style connection setup',
        'uptime_seconds': uptime.inSeconds,
        'active_connections': stats.activeConnections,
        'suggestion': 'Use RouterClient with RpcHttp2CallerTransport for proper connection',
        'websocket_endpoint': 'ws://${config.host}:${config.websocketPort}',
      };

      request.response
        ..statusCode = 200
        ..headers.contentType = ContentType.json
        ..write(jsonEncode(info))
        ..close();
    } catch (e, stackTrace) {
      logger.error('–û—à–∏–±–∫–∞ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
          error: e, stackTrace: config.verbose ? stackTrace : null);

      request.response
        ..statusCode = 500
        ..write('Internal server error')
        ..close();
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  void _startStatsTimer() {
    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30—Å');

    _statsTimer = Timer.periodic(const Duration(seconds: 30), (_) {
      _printStats();
    });
  }

  /// –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞
  void _printStats() {
    final stats = _routerServer.getStats();
    final uptime = DateTime.now().difference(_startTime);

    print('\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–û–£–¢–ï–†–ê ===');
    print('‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${_formatDuration(uptime)}');
    print('üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.activeConnections}');
    print('üìà –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.totalConnections}');
    print('üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${stats.routerStats.activeClients}');
    print('üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.routerStats.totalMessages}');
    print('‚ùå –û—à–∏–±–æ–∫: ${stats.routerStats.errorCount}');

    final connections = _routerServer.getActiveConnections();
    if (connections.isNotEmpty) {
      print('üöÄ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:');
      final transportCounts = <String, int>{};
      for (final conn in connections) {
        final transport = conn.transport.replaceAll('Rpc', '').replaceAll('ResponderTransport', '');
        transportCounts[transport] = (transportCounts[transport] ?? 0) + 1;
      }
      for (final entry in transportCounts.entries) {
        print('   ‚Ä¢ ${entry.key}: ${entry.value} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
      }
    }
    print('================================\n');
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  void _printStartupSummary() {
    print('\nüéâ === –†–û–£–¢–ï–† –ó–ê–ü–£–©–ï–ù ===');
    print('üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');

    for (final transport in config.transports) {
      switch (transport) {
        case 'websocket':
          print('   ‚Ä¢ WebSocket: ws://${config.host}:${config.websocketPort}');
          break;
        case 'http2':
          print('   ‚Ä¢ HTTP/2: http://${config.host}:${config.http2Port}');
          break;
      }
    }

    print('\nüí° –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    if (config.transports.contains('websocket')) {
      print('```dart');
      print('// WebSocket –∫–ª–∏–µ–Ω—Ç');
      print('final transport = RpcWebSocketCallerTransport.connect(');
      print("  Uri.parse('ws://${config.host}:${config.websocketPort}'),");
      print(');');
      print('final endpoint = RpcCallerEndpoint(transport: transport);');
      print('final client = RouterClient(callerEndpoint: endpoint);');
      print('```');
    }

    if (config.transports.contains('http2')) {
      print('```dart');
      print('// HTTP/2 –∫–ª–∏–µ–Ω—Ç');
      print('final transport = await RpcHttp2CallerTransport.connect(');
      print("  host: '${config.host}',");
      print('  port: ${config.http2Port},');
      print(');');
      print('final endpoint = RpcCallerEndpoint(transport: transport);');
      print('final client = RouterClient(callerEndpoint: endpoint);');
      print('```');
    }

    print('\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:');
    print('   ‚Ä¢ Ctrl+C –∏–ª–∏ SIGTERM –¥–ª—è graceful shutdown');
    print('   ‚Ä¢ GET /health –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    if (config.enableStats) {
      print('   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–µ 30—Å');
    }
    print('========================\n');
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä
  Future<void> stop() async {
    logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    _statsTimer?.cancel();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    for (final entry in _servers.entries) {
      logger.info('–ó–∞–∫—Ä—ã—Ç–∏–µ ${entry.key.name} —Å–µ—Ä–≤–µ—Ä–∞...');
      await entry.value.close();
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
    await _routerServer.dispose();

    final uptime = DateTime.now().difference(_startTime);
    logger.info('‚úÖ –†–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${_formatDuration(uptime)})');
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  String _formatDuration(Duration duration) {
    if (duration.inDays > 0) {
      return '${duration.inDays}–¥ ${duration.inHours % 24}—á ${duration.inMinutes % 60}–º';
    } else if (duration.inHours > 0) {
      return '${duration.inHours}—á ${duration.inMinutes % 60}–º';
    } else if (duration.inMinutes > 0) {
      return '${duration.inMinutes}–º ${duration.inSeconds % 60}—Å';
    } else {
      return '${duration.inSeconds}—Å';
    }
  }
}

/// –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
ArgParser _buildArgParser() {
  return ArgParser()
    ..addOption(
      'host',
      abbr: 'h',
      defaultsTo: '0.0.0.0',
      help: '–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞',
    )
    ..addOption(
      'websocket-port',
      abbr: 'p',
      defaultsTo: '11111',
      help: '–ü–æ—Ä—Ç –¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞',
    )
    ..addOption(
      'http2-port',
      help: '–ü–æ—Ä—Ç –¥–ª—è HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é port + 1)',
    )
    ..addMultiOption(
      'transport',
      abbr: 't',
      defaultsTo: ['http2'],
      allowed: ['websocket', 'http2'],
      help: '–¢–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞',
    )
    ..addOption(
      'log-level',
      abbr: 'l',
      defaultsTo: 'info',
      allowed: ['debug', 'info', 'warning', 'error', 'critical', 'none'],
      help: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    )
    ..addFlag(
      'quiet',
      abbr: 'q',
      help: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º –≤—ã–≤–æ–¥–∞)',
    )
    ..addFlag(
      'verbose',
      abbr: 'v',
      help: '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º (–¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)',
    )
    ..addFlag(
      'stats',
      abbr: 's',
      defaultsTo: true,
      help: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞',
    )
    ..addFlag(
      'health-check',
      defaultsTo: true,
      help: '–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤',
    )
    ..addOption(
      'client-timeout',
      defaultsTo: '300',
      help: '–¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
    )
    ..addFlag(
      'help',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
    )
    ..addFlag(
      'version',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é',
    );
}

/// –ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
RouterConfig _parseConfig(ArgResults argResults) {
  final host = argResults['host'] as String;
  final websocketPortStr = argResults['websocket-port'] as String;
  final http2PortStr = argResults['http2-port'] as String?;
  final transportStrs = argResults['transport'] as List<String>;
  final logLevelStr = argResults['log-level'] as String;
  final quiet = argResults['quiet'] as bool;
  final verbose = argResults['verbose'] as bool;
  final enableStats = argResults['stats'] as bool;
  final clientTimeoutStr = argResults['client-timeout'] as String;

  _isVerbose = verbose;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
  final websocketPort = int.tryParse(websocketPortStr);
  if (websocketPort == null || websocketPort < 1 || websocketPort > 65535) {
    throw FormatException('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535, –ø–æ–ª—É—á–µ–Ω: $websocketPortStr');
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è HTTP/2 –ø–æ—Ä—Ç–∞
  int? http2Port;
  if (http2PortStr != null) {
    http2Port = int.tryParse(http2PortStr);
    if (http2Port == null || http2Port < 1 || http2Port > 65535) {
      throw FormatException('HTTP/2 –ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535, –ø–æ–ª—É—á–µ–Ω: $http2PortStr');
    }
  }

  // –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ñ–ª–∞–≥–æ–≤
  if (quiet && verbose) {
    throw FormatException('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --quiet –∏ --verbose –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
  final transports = <String>[];
  for (final transportStr in transportStrs) {
    switch (transportStr) {
      case 'websocket':
        transports.add('websocket');
        break;
      case 'http2':
        transports.add('http2');
        break;
      default:
        throw FormatException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: $transportStr');
    }
  }

  if (transports.isEmpty) {
    throw FormatException('–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  RpcLoggerLevel logLevel;
  switch (logLevelStr) {
    case 'debug':
      logLevel = RpcLoggerLevel.debug;
      break;
    case 'info':
      logLevel = RpcLoggerLevel.info;
      break;
    case 'warning':
      logLevel = RpcLoggerLevel.warning;
      break;
    case 'error':
      logLevel = RpcLoggerLevel.error;
      break;
    case 'critical':
      logLevel = RpcLoggerLevel.critical;
      break;
    case 'none':
      logLevel = RpcLoggerLevel.none;
      break;
    default:
      throw FormatException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: $logLevelStr');
  }

  // Quiet –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç log-level
  if (quiet) {
    logLevel = RpcLoggerLevel.none;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–∞
  final clientTimeout = int.tryParse(clientTimeoutStr);
  if (clientTimeout == null || clientTimeout < 1) {
    throw FormatException('–¢–∞–π–º–∞—É—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }

  return RouterConfig(
    host: host,
    websocketPort: websocketPort,
    http2Port: http2Port ?? (websocketPort + 1),
    transports: transports,
    enableStats: enableStats,
    logLevel: logLevel.name,
    verbose: verbose,
    clientTimeoutSeconds: clientTimeout,
  );
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
void _printUsage(ArgParser parser) {
  print('üöÄ RPC Dart Router v$version - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è RPC –≤—ã–∑–æ–≤–æ–≤\n');
  print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: rpc_dart_router [options]\n');
  print('–û–ø—Ü–∏–∏:');
  print(parser.usage);
  print('\n–ü—Ä–∏–º–µ—Ä—ã:');
  print('  rpc_dart_router                                    # HTTP/2 –Ω–∞ –ø–æ—Ä—Ç—É 11112');
  print('  rpc_dart_router -t websocket -t http2              # –û–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
  print('  rpc_dart_router -h localhost --websocket-port 8080 # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞');
  print('  rpc_dart_router --http2-port 8443                  # –Ø–≤–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è HTTP/2');
  print('  rpc_dart_router --quiet                            # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º');
  print('  rpc_dart_router -v --log-level debug               # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
  print('  rpc_dart_router --no-stats                         # –ë–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  print('  rpc_dart_router --client-timeout 300               # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç');
  print('\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:');
  print('  websocket  WebSocket —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');
  print('  http2      HTTP/2 gRPC-style —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
}

/// –û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C, SIGTERM)
Future<void> _waitForShutdownSignal() async {
  final completer = Completer<void>();

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SIGINT (Ctrl+C)
  ProcessSignal.sigint.watch().listen((signal) {
    print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    if (!completer.isCompleted) {
      completer.complete();
    }
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SIGTERM
  ProcessSignal.sigterm.watch().listen((signal) {
    print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    if (!completer.isCompleted) {
      completer.complete();
    }
  });

  await completer.future;
}
