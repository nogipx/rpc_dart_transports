import 'dart:io';

import 'package:args/args.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';
import 'package:web_socket_channel/io.dart';

const String version = '1.0.0';

void main(List<String> arguments) async {
  final parser = _buildArgParser();

  try {
    final argResults = parser.parse(arguments);

    if (argResults['help'] as bool) {
      _printUsage(parser);
      return;
    }

    if (argResults['version'] as bool) {
      print('üöÄ RPC Dart Router v$version');
      return;
    }

    final config = _parseConfig(argResults);
    await _startRouter(config);
  } on FormatException catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: ${e.message}');
    print('');
    _printUsage(parser);
    exit(1);
  } catch (e, stackTrace) {
    print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    if (_isVerbose) {
      print('üìç Stack trace: $stackTrace');
    }
    exit(1);
  }
}

class RouterConfig {
  final String host;
  final int port;
  final RpcLoggerLevel logLevel;
  final bool quiet;
  final bool verbose;

  const RouterConfig({
    required this.host,
    required this.port,
    required this.logLevel,
    required this.quiet,
    required this.verbose,
  });
}

bool _isVerbose = false;

ArgParser _buildArgParser() {
  return ArgParser()
    ..addOption(
      'host',
      abbr: 'h',
      defaultsTo: '0.0.0.0',
      help: '–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞',
    )
    ..addOption(
      'port',
      abbr: 'p',
      defaultsTo: '11111',
      help: '–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è',
    )
    ..addOption(
      'log-level',
      abbr: 'l',
      defaultsTo: 'info',
      allowed: ['debug', 'info', 'warning', 'error', 'critical', 'none'],
      help: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    )
    ..addFlag(
      'quiet',
      abbr: 'q',
      help: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º –≤—ã–≤–æ–¥–∞)',
    )
    ..addFlag(
      'verbose',
      abbr: 'v',
      help: '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º (–¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)',
    )
    ..addFlag(
      'help',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
    )
    ..addFlag(
      'version',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é',
    );
}

RouterConfig _parseConfig(ArgResults argResults) {
  final host = argResults['host'] as String;
  final portStr = argResults['port'] as String;
  final logLevelStr = argResults['log-level'] as String;
  final quiet = argResults['quiet'] as bool;
  final verbose = argResults['verbose'] as bool;

  _isVerbose = verbose;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
  final port = int.tryParse(portStr);
  if (port == null || port < 1 || port > 65535) {
    throw FormatException('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535, –ø–æ–ª—É—á–µ–Ω: $portStr');
  }

  // –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ñ–ª–∞–≥–æ–≤
  if (quiet && verbose) {
    throw FormatException('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --quiet –∏ --verbose –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  RpcLoggerLevel logLevel;
  switch (logLevelStr) {
    case 'debug':
      logLevel = RpcLoggerLevel.debug;
      break;
    case 'info':
      logLevel = RpcLoggerLevel.info;
      break;
    case 'warning':
      logLevel = RpcLoggerLevel.warning;
      break;
    case 'error':
      logLevel = RpcLoggerLevel.error;
      break;
    case 'critical':
      logLevel = RpcLoggerLevel.critical;
      break;
    case 'none':
      logLevel = RpcLoggerLevel.none;
      break;
    default:
      throw FormatException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: $logLevelStr');
  }

  // Quiet –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç log-level
  if (quiet) {
    logLevel = RpcLoggerLevel.none;
  }

  return RouterConfig(
    host: host,
    port: port,
    logLevel: logLevel,
    quiet: quiet,
    verbose: verbose,
  );
}

void _printUsage(ArgParser parser) {
  print('üöÄ RPC Dart Router - WebSocket —Ä–æ—É—Ç–µ—Ä –¥–ª—è RPC –≤—ã–∑–æ–≤–æ–≤\n');
  print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: rpc_dart_router [options]\n');
  print('–û–ø—Ü–∏–∏:');
  print(parser.usage);
  print('\n–ü—Ä–∏–º–µ—Ä—ã:');
  print('  rpc_dart_router                           # –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  print('  rpc_dart_router -h localhost -p 8080     # –ó–∞–ø—É—Å–∫ –Ω–∞ localhost:8080');
  print('  rpc_dart_router --quiet                   # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º');
  print('  rpc_dart_router -v --log-level debug     # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º —Å debug –ª–æ–≥–∞–º–∏');
}

Future<void> _startRouter(RouterConfig config) async {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  RpcLoggerSettings.setDefaultMinLogLevel(config.logLevel);

  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä —Ä–æ—É—Ç–µ—Ä–∞
  final logger = RpcLogger('RouterCLI', label: 'CLI');

  await logger.info('–ó–∞–ø—É—Å–∫–∞–µ–º RPC Dart Router...');
  await logger.debug('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.host}:${config.port}, log: ${config.logLevel.name}');

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
    final server = await HttpServer.bind(config.host, config.port);
    await logger.info('–†–æ—É—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://${config.host}:${config.port}');

    // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π RouterContract –¥–ª—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    final routerContract = RouterResponderContract();
    await logger.debug('RouterContract —Å–æ–∑–¥–∞–Ω');

    int connectionCount = 0;

    await for (final request in server) {
      if (WebSocketTransformer.isUpgradeRequest(request)) {
        connectionCount++;
        final connectionId = connectionCount;

        await logger.debug('–ü–æ–ª—É—á–µ–Ω WebSocket –∑–∞–ø—Ä–æ—Å –æ—Ç ${request.connectionInfo?.remoteAddress}');

        final webSocket = await WebSocketTransformer.upgrade(request);

        // –°–æ–∑–¥–∞–µ–º WebSocket –∫–∞–Ω–∞–ª –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        final channel = IOWebSocketChannel(webSocket);
        final transport = RpcWebSocketResponderTransport(
          channel,
          logger: config.logLevel == RpcLoggerLevel.debug
              ? RpcLogger('ServerTransport#$connectionId')
              : null,
        );

        // –°–æ–∑–¥–∞–µ–º RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        final endpoint =
            RpcResponderEndpoint(transport: transport, debugLabel: 'RouterEndpoint#$connectionId');

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        endpoint.registerServiceContract(routerContract);

        await logger
            .info('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #$connectionId: ${request.connectionInfo?.remoteAddress}');
        if (config.verbose) {
          await logger.debug('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞: ${routerContract.routerImpl.stats}');
        }

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket —Å–æ–±—ã—Ç–∏—è
        webSocket.done.then((_) async {
          await logger.info('–ö–ª–∏–µ–Ω—Ç #$connectionId –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
          endpoint.close();
        }).catchError((error) async {
          await logger.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ #$connectionId: $error');
          endpoint.close();
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º endpoint
        endpoint.start();
        await logger.debug('Endpoint #$connectionId –∑–∞–ø—É—â–µ–Ω');
      } else {
        await logger
            .warning('–ü–æ–ª—É—á–µ–Ω –Ω–µ-WebSocket –∑–∞–ø—Ä–æ—Å –æ—Ç ${request.connectionInfo?.remoteAddress}');
        request.response
          ..statusCode = HttpStatus.forbidden
          ..write('WebSocket connections only')
          ..close();
      }
    }
  } catch (e, stackTrace) {
    await logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞',
        error: e, stackTrace: config.verbose ? stackTrace : null);
    exit(1);
  }
}
