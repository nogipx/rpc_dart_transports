// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:isolate';

import 'package:args/args.dart';
import 'package:rpc_dart/rpc_dart.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';
import 'package:rpc_dart_transports/src/http2/rpc_http2_responder_transport.dart';
import 'package:http2/http2.dart' as http2;

const String version = '2.0.0';

void main(List<String> arguments) async {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∑–æ–Ω–µ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
  runZonedGuarded<void>(
    () async {
      await _mainWithErrorHandling(arguments);
    },
    (error, stackTrace) {
      // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ unhandled exceptions
      print('üö® === –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê ===');
      print('‚ùå –¢–∏–ø: ${error.runtimeType}');
      print('üìù –û—à–∏–±–∫–∞: $error');

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP/2 –æ—à–∏–±–æ–∫
      if (error.toString().contains('HTTP/2 error') ||
          error.toString().contains('Connection is being forcefully terminated')) {
        print(
            'üîó HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤)');
        print('‚ôªÔ∏è  –†–æ—É—Ç–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É...');
        return; // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è HTTP/2 –æ—à–∏–±–æ–∫
      }

      if (_isVerbose) {
        print('üìç Stack trace: $stackTrace');
      }

      print('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏...');
      exit(1);
    },
  );
}

/// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
Future<void> _mainWithErrorHandling(List<String> arguments) async {
  final parser = _buildArgParser();

  try {
    final argResults = parser.parse(arguments);

    if (argResults['help'] as bool) {
      _printUsage(parser);
      return;
    }

    if (argResults['version'] as bool) {
      print('üöÄ RPC Dart Router v$version');
      return;
    }

    final config = _parseConfig(argResults);
    final routerCli = RouterCLI(config);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    await routerCli.start();

    // Graceful shutdown
    await _waitForShutdownSignal();

    // Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    print('üîÑ Graceful shutdown –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
    try {
      await routerCli.stop().timeout(
        Duration(seconds: 10),
        onTimeout: () {
          print('‚ö†Ô∏è Graceful shutdown –ø—Ä–µ–≤—ã—Å–∏–ª 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
          exit(1);
        },
      );
      print('‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown: $e');
      exit(1);
    }
  } on FormatException catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: ${e.message}');
    print('');
    _printUsage(parser);
    exit(1);
  } catch (e, stackTrace) {
    print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    if (_isVerbose) {
      print('üìç Stack trace: $stackTrace');
    }
    exit(1);
  }
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
class RouterConfig {
  final String host;
  final int port;
  final bool enableStats;
  final String logLevel;
  final bool verbose;
  final int clientTimeoutSeconds;

  const RouterConfig({
    this.host = '0.0.0.0',
    this.port = 11112, // HTTP/2 –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.enableStats = true,
    this.logLevel = 'info',
    this.verbose = false,
    this.clientTimeoutSeconds = 300,
  });
}

bool _isVerbose = false;

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å CLI —Ä–æ—É—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ HTTP/2)
class RouterCLI {
  final RouterConfig config;
  final RpcLogger logger;

  /// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  late final RpcRouterServer _routerServer;

  /// HTTP/2 —Å–µ—Ä–≤–µ—Ä
  RpcHttp2Server? _http2Server;

  /// –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  final List<StreamSubscription> _http2Subscriptions = [];

  /// –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  Timer? _statsTimer;

  /// –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
  late final DateTime _startTime;

  RouterCLI(this.config) : logger = RpcLogger('RouterCLI') {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    RpcLoggerSettings.setDefaultMinLogLevel(RpcLoggerLevel.info);
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/2 —Ä–æ—É—Ç–µ—Ä
  Future<void> start() async {
    _startTime = DateTime.now();

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ RPC Dart Router v$version (HTTP/2 gRPC)');
    logger.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    logger.info('  ‚Ä¢ –•–æ—Å—Ç: ${config.host}');
    logger.info('  ‚Ä¢ –ü–æ—Ä—Ç: ${config.port}');
    logger.info('  ‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: HTTP/2 gRPC');
    logger.info('  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${config.logLevel}');
    logger.info('  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${config.enableStats ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}');

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
      _routerServer = RpcRouterServer(
        logger: logger.child('RouterServer'),
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä
      await _startHttp2Server();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
      if (config.enableStats) {
        _startStatsTimer();
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
      _printStartupSummary();
    } catch (e, stackTrace) {
      logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞',
          error: e, stackTrace: config.verbose ? stackTrace : null);
      exit(1);
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/2 —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞—Å—Ç–æ—è—â–∏–º gRPC-style –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
  Future<void> _startHttp2Server() async {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ ${config.host}:${config.port}');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–¥–æ–±–Ω—ã–π API!
    _http2Server = await RpcHttp2ResponderTransport.bind(
      host: config.host,
      port: config.port,
      logger: config.verbose ? logger.child('Http2Server') : null,
    );

    logger.info('üöÄ HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${config.host}:${config.port}');

    // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    final subscription = _http2Server!.transports.listen(
      (transport) => _handleHttp2Transport(transport),
      onError: (error, stackTrace) {
        logger.error('–û—à–∏–±–∫–∞ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞',
            error: error, stackTrace: config.verbose ? stackTrace : null);
      },
      onDone: () {
        logger.info('HTTP/2 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      },
    );

    _http2Subscriptions.add(subscription);
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  void _handleHttp2Transport(RpcHttp2ResponderTransport transport) {
    final connectionId = 'http2_${DateTime.now().millisecondsSinceEpoch}';

    logger.debug('üîó –ù–æ–≤—ã–π HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: $connectionId');

    try {
      // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RouterServer
      final actualConnectionId = _routerServer.createConnection(
        transport: transport,
        connectionLabel: connectionId,
        clientAddress: 'http2-client',
      );

      logger.info('‚úÖ HTTP/2 –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: $actualConnectionId');

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      transport.incomingMessages.listen(
        (message) {
          try {
            // –°–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è RouterServer'–æ–º
            logger.debug(
                'HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç $actualConnectionId: stream ${message.streamId}');
          } catch (e) {
            logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç $actualConnectionId: $e');
          }
        },
        onError: (error) async {
          try {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
            if (error.toString().contains('Connection is being forcefully terminated') ||
                error.toString().contains('HTTP/2 error')) {
              logger.debug(
                  'üîó HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ $actualConnectionId –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º (–Ω–æ—Ä–º–∞–ª—å–Ω–æ): $error');
            } else {
              logger.warning('‚ùå –û—à–∏–±–∫–∞ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è $actualConnectionId: $error');
            }

            // Graceful –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await _routerServer.closeConnection(actualConnectionId, reason: 'HTTP/2 error: $error');
          } catch (e) {
            logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è $actualConnectionId: $e');
          }
        },
        onDone: () async {
          try {
            logger.info('üîå HTTP/2 –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: $actualConnectionId');
            await _routerServer.closeConnection(actualConnectionId, reason: 'HTTP/2 closed');
          } catch (e) {
            logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è $actualConnectionId –≤ onDone: $e');
          }
        },
        cancelOnError: false, // –ù–µ –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
      );
    } catch (e, stackTrace) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞',
          error: e, stackTrace: config.verbose ? stackTrace : null);
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  void _startStatsTimer() {
    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30—Å');

    _statsTimer = Timer.periodic(const Duration(seconds: 30), (_) {
      _printStats();
    });
  }

  /// –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞
  void _printStats() {
    final stats = _routerServer.getStats();
    final uptime = DateTime.now().difference(_startTime);

    print('\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–û–£–¢–ï–†–ê ===');
    print('‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${_formatDuration(uptime)}');
    print('üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.activeConnections}');
    print('üìà –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.totalConnections}');
    print('üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${stats.routerStats.activeClients}');
    print('üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.routerStats.totalMessages}');
    print('‚ùå –û—à–∏–±–æ–∫: ${stats.routerStats.errorCount}');

    final connections = _routerServer.getActiveConnections();
    if (connections.isNotEmpty) {
      print('üöÄ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:');
      final transportCounts = <String, int>{};
      for (final conn in connections) {
        final transport = conn.transport.replaceAll('Rpc', '').replaceAll('ResponderTransport', '');
        transportCounts[transport] = (transportCounts[transport] ?? 0) + 1;
      }
      for (final entry in transportCounts.entries) {
        print('   ‚Ä¢ ${entry.key}: ${entry.value} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
      }
    }
    print('================================\n');
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  void _printStartupSummary() {
    print('\nüéâ === HTTP/2 gRPC –†–û–£–¢–ï–† –ó–ê–ü–£–©–ï–ù ===');
    print('üì° –î–æ—Å—Ç—É–ø–Ω—ã–π endpoint:');
    print('   ‚Ä¢ HTTP/2 gRPC: http://${config.host}:${config.port}');

    print('\nüí° –ü—Ä–∏–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    print('```dart');
    print('// HTTP/2 gRPC –∫–ª–∏–µ–Ω—Ç');
    print('final transport = await RpcHttp2CallerTransport.connect(');
    print("  host: '${config.host}',");
    print('  port: ${config.port},');
    print(');');
    print('final endpoint = RpcCallerEndpoint(transport: transport);');
    print('final client = RpcRouterClient(callerEndpoint: endpoint);');
    print('await client.register(clientName: "my_client");');
    print('await client.initializeP2P();');
    print('```');

    print('\nüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:');
    print('   ‚Ä¢ Ctrl+C –∏–ª–∏ SIGTERM –¥–ª—è graceful shutdown');
    if (config.enableStats) {
      print('   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–µ 30—Å');
    }
    print('=====================================\n');
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä
  Future<void> stop() async {
    logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    _statsTimer?.cancel();
    _statsTimer = null;

    // –û—Ç–º–µ–Ω—è–µ–º HTTP/2 –ø–æ–¥–ø–∏—Å–∫–∏
    for (final subscription in _http2Subscriptions) {
      try {
        await subscription.cancel();
      } catch (e) {
        logger.warning('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã HTTP/2 –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      }
    }
    _http2Subscriptions.clear();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä
    if (_http2Server != null) {
      logger.info('–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞...');
      try {
        await _http2Server!.close().timeout(Duration(seconds: 5));
        logger.debug('HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      } catch (e) {
        logger.warning('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞: $e (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)');
      }
      _http2Server = null;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try {
      await _routerServer.dispose().timeout(Duration(seconds: 5));
      logger.debug('RouterServer –∑–∞–∫—Ä—ã—Ç');
    } catch (e) {
      logger.warning('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è RouterServer: $e (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)');
    }

    final uptime = DateTime.now().difference(_startTime);
    logger.info('‚úÖ –†–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${_formatDuration(uptime)})');
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  String _formatDuration(Duration duration) {
    if (duration.inDays > 0) {
      return '${duration.inDays}–¥ ${duration.inHours % 24}—á ${duration.inMinutes % 60}–º';
    } else if (duration.inHours > 0) {
      return '${duration.inHours}—á ${duration.inMinutes % 60}–º';
    } else if (duration.inMinutes > 0) {
      return '${duration.inMinutes}–º ${duration.inSeconds % 60}—Å';
    } else {
      return '${duration.inSeconds}—Å';
    }
  }
}

/// –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
ArgParser _buildArgParser() {
  return ArgParser()
    ..addOption(
      'host',
      abbr: 'h',
      defaultsTo: '0.0.0.0',
      help: '–•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞',
    )
    ..addOption(
      'port',
      abbr: 'p',
      defaultsTo: '11112',
      help: '–ü–æ—Ä—Ç –¥–ª—è HTTP/2 gRPC —Å–µ—Ä–≤–µ—Ä–∞',
    )
    ..addOption(
      'log-level',
      abbr: 'l',
      defaultsTo: 'info',
      allowed: ['debug', 'info', 'warning', 'error', 'critical', 'none'],
      help: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    )
    ..addFlag(
      'quiet',
      abbr: 'q',
      help: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º –≤—ã–≤–æ–¥–∞)',
    )
    ..addFlag(
      'verbose',
      abbr: 'v',
      help: '–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º (–¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)',
    )
    ..addFlag(
      'stats',
      abbr: 's',
      defaultsTo: false,
      help: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ—É—Ç–µ—Ä–∞',
    )
    ..addFlag(
      'health-check',
      defaultsTo: true,
      help: '–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤',
    )
    ..addOption(
      'client-timeout',
      defaultsTo: '300',
      help: '–¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
    )
    ..addFlag(
      'help',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
    )
    ..addFlag(
      'version',
      help: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é',
    );
}

/// –ü–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
RouterConfig _parseConfig(ArgResults argResults) {
  final host = argResults['host'] as String;
  final portStr = argResults['port'] as String;
  final logLevelStr = argResults['log-level'] as String;
  final quiet = argResults['quiet'] as bool;
  final verbose = argResults['verbose'] as bool;
  final enableStats = argResults['stats'] as bool;
  final clientTimeoutStr = argResults['client-timeout'] as String;

  _isVerbose = verbose;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
  final port = int.tryParse(portStr);
  if (port == null || port < 1 || port > 65535) {
    throw FormatException('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535, –ø–æ–ª—É—á–µ–Ω: $portStr');
  }

  // –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ñ–ª–∞–≥–æ–≤
  if (quiet && verbose) {
    throw FormatException('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --quiet –∏ --verbose –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  RpcLoggerLevel logLevel;
  switch (logLevelStr) {
    case 'debug':
      logLevel = RpcLoggerLevel.debug;
      break;
    case 'info':
      logLevel = RpcLoggerLevel.info;
      break;
    case 'warning':
      logLevel = RpcLoggerLevel.warning;
      break;
    case 'error':
      logLevel = RpcLoggerLevel.error;
      break;
    case 'critical':
      logLevel = RpcLoggerLevel.critical;
      break;
    case 'none':
      logLevel = RpcLoggerLevel.none;
      break;
    default:
      throw FormatException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: $logLevelStr');
  }

  // Quiet –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç log-level
  if (quiet) {
    logLevel = RpcLoggerLevel.none;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–∞
  final clientTimeout = int.tryParse(clientTimeoutStr);
  if (clientTimeout == null || clientTimeout < 1) {
    throw FormatException('–¢–∞–π–º–∞—É—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }

  return RouterConfig(
    host: host,
    port: port,
    enableStats: enableStats,
    logLevel: logLevel.name,
    verbose: verbose,
    clientTimeoutSeconds: clientTimeout,
  );
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
void _printUsage(ArgParser parser) {
  print('üöÄ RPC Dart Router v$version - HTTP/2 gRPC —Ä–æ—É—Ç–µ—Ä –¥–ª—è RPC –≤—ã–∑–æ–≤–æ–≤\n');
  print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: rpc_dart_router [options]\n');
  print('–û–ø—Ü–∏–∏:');
  print(parser.usage);
  print('\n–ü—Ä–∏–º–µ—Ä—ã:');
  print('  rpc_dart_router                    # HTTP/2 –Ω–∞ –ø–æ—Ä—Ç—É 11112');
  print('  rpc_dart_router -p 8080            # HTTP/2 –Ω–∞ –ø–æ—Ä—Ç—É 8080');
  print('  rpc_dart_router -h 192.168.1.100   # HTTP/2 –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º IP');
  print('  rpc_dart_router --quiet             # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º');
  print('  rpc_dart_router -v --log-level debug # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
  print('  rpc_dart_router --stats             # –° –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π');
  print('  rpc_dart_router --client-timeout 600 # –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç');
  print('\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:');
  print('  HTTP/2 gRPC     –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏–Ω–≥–æ–º');
  print(
      '                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã RPC –≤—ã–∑–æ–≤–æ–≤: unary, client/server/bidirectional streams');
}

/// –û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C, SIGTERM)
Future<void> _waitForShutdownSignal() async {
  final completer = Completer<void>();
  bool shutdownInitiated = false;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SIGINT (Ctrl+C)
  ProcessSignal.sigint.watch().listen((signal) {
    if (!shutdownInitiated) {
      shutdownInitiated = true;
      print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      if (!completer.isCompleted) {
        completer.complete();
      }
    } else {
      print('\n‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π SIGINT - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!');
      exit(130); // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è SIGINT
    }
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SIGTERM
  ProcessSignal.sigterm.watch().listen((signal) {
    if (!shutdownInitiated) {
      shutdownInitiated = true;
      print('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      if (!completer.isCompleted) {
        completer.complete();
      }
    } else {
      print('\n‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π SIGTERM - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!');
      exit(143); // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è SIGTERM
    }
  });

  await completer.future;
}
