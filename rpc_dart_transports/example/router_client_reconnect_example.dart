// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RouterClientWithReconnect
void main() async {
  await basicReconnectExample();
  await advancedReconnectExample();
  await chatClientExample();
}

/// –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Future<void> basicReconnectExample() async {
  print('=== –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä RouterClientWithReconnect ===');

  final logger = RpcLogger('ReconnectExample');

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  final routerClient = RouterClientWithReconnect(
    serverUri: Uri.parse('ws://localhost:8080'), // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
    logger: logger,
  );

  try {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    routerClient.connectionState.listen((state) {
      print('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $state');
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    print('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–æ—É—Ç–µ—Ä—É...');
    await routerClient.connect();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
    final clientId = await routerClient.register(
      clientName: 'TestClient',
      groups: ['test'],
      metadata: {'version': '1.0'},
    );
    print('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–µ–Ω—Ç: $clientId');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º P2P
    await routerClient.initializeP2P(
      onP2PMessage: (message) {
        print('–ü–æ–ª—É—á–µ–Ω–æ P2P —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.type} –æ—Ç ${message.senderId}');
      },
    );
    print('P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    await routerClient.subscribeToEvents();
    routerClient.events.listen((event) {
      print('–°–æ–±—ã—Ç–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: ${event.type}');
    });

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞
    print('–ö–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... (–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º)');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
    final timer = Timer.periodic(Duration(seconds: 5), (timer) async {
      try {
        if (routerClient.isConnected) {
          await routerClient.sendBroadcast({
            'message': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${DateTime.now()}',
          });
          print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      }
    });

    // –†–∞–±–æ—Ç–∞–µ–º 30 —Å–µ–∫—É–Ω–¥
    await Future.delayed(Duration(seconds: 30));
    timer.cancel();
  } catch (e) {
    print('–û—à–∏–±–∫–∞: $e');
  } finally {
    await routerClient.dispose();
    print('–ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç\n');
  }
}

/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Future<void> advancedReconnectExample() async {
  print('=== –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===');

  // –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  final reconnectConfig = ReconnectConfig(
    strategy: ReconnectStrategy.exponentialBackoff,
    initialDelay: Duration(seconds: 1),
    maxDelay: Duration(seconds: 15),
    maxAttempts: 0, // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    backoffMultiplier: 1.5,
    connectionTimeout: Duration(seconds: 10),
    enableJitter: true,
  );

  final routerClient = RouterClientWithReconnect(
    serverUri: Uri.parse('ws://localhost:8080'),
    reconnectConfig: reconnectConfig,
    logger: RpcLogger('AdvancedReconnect'),
  );

  try {
    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    routerClient.connectionState.listen((state) {
      final timestamp = DateTime.now().toString().substring(11, 19);
      print('[$timestamp] –°–æ—Å—Ç–æ—è–Ω–∏–µ: $state');
    });

    await routerClient.connect();
    await routerClient.register(clientName: 'AdvancedClient');

    print('–ö–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    print('- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞');
    print('- –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s');
    print('- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 15s');
    print('- Jitter –≤–∫–ª—é—á–µ–Ω');
    print('- –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');

    // –†–∞–±–æ—Ç–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    await Future.delayed(Duration(seconds: 20));
  } catch (e) {
    print('–û—à–∏–±–∫–∞: $e');
  } finally {
    await routerClient.dispose();
    print('');
  }
}

/// –ü—Ä–∏–º–µ—Ä —á–∞—Ç-–∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
Future<void> chatClientExample() async {
  print('=== –ß–∞—Ç-–∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º ===');

  final chatClient = ChatClientWithReconnect(
    serverUri: Uri.parse('ws://localhost:8080'),
    userName: 'TestUser',
  );

  try {
    await chatClient.start();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    await Future.delayed(Duration(seconds: 2));
    await chatClient.sendMessage('–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!');

    await Future.delayed(Duration(seconds: 3));
    await chatClient.sendMessage('–ö–∞–∫ –¥–µ–ª–∞?');

    // –†–∞–±–æ—Ç–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    await Future.delayed(Duration(seconds: 15));
  } catch (e) {
    print('–û—à–∏–±–∫–∞ —á–∞—Ç-–∫–ª–∏–µ–Ω—Ç–∞: $e');
  } finally {
    await chatClient.stop();
    print('–ß–∞—Ç-–∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

/// –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç-–∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
class ChatClientWithReconnect {
  final Uri serverUri;
  final String userName;

  late final RouterClientWithReconnect _routerClient;
  String? _clientId;

  ChatClientWithReconnect({
    required this.serverUri,
    required this.userName,
  });

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —á–∞—Ç-–∫–ª–∏–µ–Ω—Ç
  Future<void> start() async {
    print('–ó–∞–ø—É—Å–∫ —á–∞—Ç-–∫–ª–∏–µ–Ω—Ç–∞: $userName');

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    _routerClient = RouterClientWithReconnect(
      serverUri: serverUri,
      reconnectConfig: ReconnectConfig(
        strategy: ReconnectStrategy.exponentialBackoff,
        initialDelay: Duration(seconds: 2),
        maxDelay: Duration(seconds: 30),
        enableJitter: true,
      ),
      logger: RpcLogger('ChatClient'),
    );

    // –°–ª—É—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    _routerClient.connectionState.listen((state) {
      switch (state) {
        case ReconnectState.connected:
          print('[$userName] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É');
          break;
        case ReconnectState.disconnected:
          print('[$userName] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —á–∞—Ç–∞');
          break;
        case ReconnectState.reconnecting:
          print('[$userName] üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
          break;
        case ReconnectState.waiting:
          print('[$userName] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
          break;
        case ReconnectState.stopped:
          print('[$userName] ‚õî –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
          break;
      }
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
    await _routerClient.connect();
    _clientId = await _routerClient.register(
      clientName: userName,
      groups: ['chat'],
      metadata: {'type': 'chat_client'},
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º P2P –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    await _routerClient.initializeP2P(
      onP2PMessage: _handleChatMessage,
      filterRouterHeartbeats: true,
    );

    print('[$userName] –ß–∞—Ç-–∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (ID: $_clientId)');
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è
  void _handleChatMessage(RouterMessage message) {
    if (message.type == RouterMessageType.multicast &&
        message.payload?['chatMessage'] != null) {
      final chatText = message.payload!['chatMessage'] as String;
      final senderName = message.payload!['senderName'] as String;
      final timestamp = DateTime.now().toString().substring(11, 19);

      print('[$timestamp] <$senderName>: $chatText');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
  Future<void> sendMessage(String text) async {
    if (!_routerClient.isConnected) {
      print('[$userName] ‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $text');
      return;
    }

    try {
      await _routerClient.sendMulticast('chat', {
        'chatMessage': text,
        'senderName': userName,
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      });

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      final timestamp = DateTime.now().toString().substring(11, 19);
      print('[$timestamp] <$userName>: $text');
    } catch (e) {
      print('[$userName] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Ç-–∫–ª–∏–µ–Ω—Ç
  Future<void> stop() async {
    await _routerClient.dispose();
  }
}
