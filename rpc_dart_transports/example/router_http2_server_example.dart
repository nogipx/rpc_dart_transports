// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';

/// –ü—Ä–∏–º–µ—Ä HTTP/2 —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º.
/// –†–æ—É—Ç–µ—Ä –º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞–º–∏!
void main() async {
  print('üöÄ HTTP/2 –†–æ—É—Ç–µ—Ä –°–µ—Ä–≤–µ—Ä\n');

  await runHttp2RouterServer();
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP/2 —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
Future<void> runHttp2RouterServer() async {
  final logger = RpcLogger('RouterHTTP2Server');

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  final routerServer = RpcRouterServer(
    logger: logger,
  );

  logger.info('–°–æ–∑–¥–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç-–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ã–π RouterServer');

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä
    final server = await HttpServer.bind('localhost', 8443);
    logger.info('üåê HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://localhost:8443');

    print('‚úÖ –†–æ—É—Ç–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    print('   ‚Ä¢ HTTP/2: https://localhost:8443');
    print('   ‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: HTTP/2 gRPC-style');
    print('   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ HTTP (–±–µ–∑ TLS –≤ –ø—Ä–∏–º–µ—Ä–µ)\n');

    print('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RouterClientHttp2:\n');
    print('```dart');
    print('final client = await RouterClientHttp2.connect(');
    print('  host: "localhost",');
    print('  port: 8443,');
    print(');');
    print('```\n');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await for (final request in server) {
      _handleHttp2Connection(request, routerServer, logger);
    }
  } catch (e, stackTrace) {
    logger.error('–û—à–∏–±–∫–∞ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞: $e', error: e, stackTrace: stackTrace);
  } finally {
    await routerServer.dispose();
    logger.info('–†–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
void _handleHttp2Connection(
  HttpRequest request,
  RpcRouterServer routerServer,
  RpcLogger logger,
) async {
  try {
    final clientAddress = request.connectionInfo?.remoteAddress.toString();

    logger.debug('üîó –ù–æ–≤–æ–µ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: $clientAddress');

    // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç—Ä–µ–±—É–µ—Ç ServerTransportConnection
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    logger.info('HTTP/2 —Ä–æ—É—Ç–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 501 Not Implemented
    request.response
      ..statusCode = HttpStatus.notImplemented
      ..write('HTTP/2 router requires proper HTTP/2 connection setup')
      ..close();

    return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  } catch (e, stackTrace) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e', error: e, stackTrace: stackTrace);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTTP –æ—à–∏–±–∫—É
    request.response
      ..statusCode = HttpStatus.internalServerError
      ..write('Internal server error')
      ..close();
  }
}
