// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';

/// –ë–æ–µ–≤–æ–π –ø—Ä–∏–º–µ—Ä —Ä–æ—É—Ç–µ—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏:
///
/// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 30—Å)
/// ‚úÖ Heartbeat –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–∞–π–º–∞—É—Ç 2 –º–∏–Ω—É—Ç—ã)
/// ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
/// ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
/// ‚úÖ –ù–µ—Ç dummy –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
Future<void> main() async {
  print('üöÄ –î–µ–º–æ –±–æ–µ–≤–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n');

  // === –°–ï–†–í–ï–† ===

  // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
  final routerContract = RouterResponderContract();

  print('‚úÖ –†–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º:');
  print('   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥');
  print('   - –¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 2 –º–∏–Ω—É—Ç—ã');
  print('   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n');

  // === –ö–õ–ò–ï–ù–¢–´ ===

  // –≠–º—É–ª—è—Ü–∏—è 2 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  print('üë§ –≠–º—É–ª—è—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ #1 (–º–æ–±–∏–ª—å–Ω—ã–π)...');
  await testClientRegistration('mobile-user-1', ['mobile', 'chat'], routerContract);

  await Future.delayed(Duration(seconds: 2));

  print('\nüë§ –≠–º—É–ª—è—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ #2 (–¥–µ—Å–∫—Ç–æ–ø)...');
  await testClientRegistration('desktop-user-1', ['desktop', 'chat'], routerContract);

  await Future.delayed(Duration(seconds: 3));

  print('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞:');
  final stats = routerContract.routerImpl.stats;
  print('   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${stats.activeClients}');
  print('   - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.totalMessages}');
  print('   - –û—à–∏–±–æ–∫: ${stats.errorCount}');
  print('   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${DateTime.now().difference(stats.startTime!).inSeconds}—Å');

  print('\n‚è≥ –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...');
  print('   (–í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 2 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)');

  // –≠–º—É–ª—è—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
  for (int i = 1; i <= 5; i++) {
    await Future.delayed(Duration(minutes: 1));
    final currentStats = routerContract.routerImpl.stats;
    print('   ‚è∞ $i –º–∏–Ω: –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ${currentStats.activeClients}');
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  final finalStats = routerContract.routerImpl.stats;
  print('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  print('   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${finalStats.activeClients}');
  print('   - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${finalStats.totalMessages}');
  print('   - –û—à–∏–±–æ–∫: ${finalStats.errorCount}');

  // –ó–∞–∫—Ä—ã—Ç–∏–µ
  await routerContract.dispose();
  print('\n‚úÖ –†–æ—É—Ç–µ—Ä –∑–∞–∫—Ä—ã—Ç. –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
Future<void> testClientRegistration(
  String clientName,
  List<String> groups,
  RouterResponderContract router,
) async {
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
  final clientStreamController = StreamController<RouterMessage>();

  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    final success = await router.routerImpl.registerClient(
      router.routerImpl.generateClientId(),
      clientStreamController,
      clientName: clientName,
      groups: groups,
      metadata: {
        'platform': groups.contains('mobile') ? 'mobile' : 'desktop',
        'version': '1.0.0',
        'userAgent': 'TestClient/1.0',
      },
    );

    if (success) {
      print('   ‚úÖ –ö–ª–∏–µ–Ω—Ç $clientName –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
      final clients = router.routerImpl.getActiveClients();
      final ourClient = clients.lastWhere((c) => c.clientName == clientName);

      print('   üì± ID: ${ourClient.clientId}');
      print('   üë• –ì—Ä—É–ø–ø—ã: ${ourClient.groups.join(', ')}');
      print('   üïê –ü–æ–¥–∫–ª—é—á–µ–Ω: ${ourClient.connectedAt}');

      // –≠–º—É–ª—è—Ü–∏—è heartbeat'–∞
      router.routerImpl.updateClientActivity(ourClient.clientId);
      print('   üíì Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } else {
      print('   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ $clientName');
    }
  } catch (e) {
    print('   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (—ç–º—É–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)
    Timer(Duration(minutes: 3), () {
      clientStreamController.close();
    });
  }
}
