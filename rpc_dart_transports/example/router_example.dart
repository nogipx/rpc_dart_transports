// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';

import 'package:rpc_dart/rpc_dart.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';
import 'package:web_socket_channel/io.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Router –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
void main() async {
  // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  RpcLoggerSettings.setDefaultMinLogLevel(RpcLoggerLevel.info);

  print('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ Router RPC\n');

  // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä —Å —Ä–æ—É—Ç–µ—Ä–æ–º
  await startRouterServer();

  // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
  await Future.delayed(Duration(seconds: 1));

  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
  await runClients();
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä —Å —Ä–æ—É—Ç–µ—Ä–æ–º
Future<void> startRouterServer() async {
  print('üì° –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ —Ä–æ—É—Ç–µ—Ä–∞...');

  final server = await HttpServer.bind('localhost', 8081);
  print('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8081\n');

  // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  final routerContract = RouterResponderContract(
    logger: RpcLogger('RouterServer'),
  );

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  server.listen((request) async {
    if (WebSocketTransformer.isUpgradeRequest(request)) {
      try {
        final socket = await WebSocketTransformer.upgrade(request);
        final channel = IOWebSocketChannel(socket);

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        final transport = RpcWebSocketResponderTransport(
          channel,
          logger: RpcLogger('ServerTransport'),
        );

        // –°–æ–∑–¥–∞–µ–º endpoint –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        final endpoint = RpcResponderEndpoint(
          transport: transport,
          debugLabel: 'RouterEndpoint',
        );

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        endpoint.registerServiceContract(routerContract);
        endpoint.start();

        print('üîå –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        socket.done.then((_) {
          print('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
          endpoint.close();
        });
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket: $e');
      }
    }
  });
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞
Future<void> runClients() async {
  print('üë• –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...\n');

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  final clients = <RouterCallerContract>[];
  final clientNames = ['Alice', 'Bob', 'Charlie'];

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  for (final name in clientNames) {
    try {
      final client = await createAndConnectClient(name);
      clients.add(client);
      print('‚úÖ –ö–ª–∏–µ–Ω—Ç $name –ø–æ–¥–∫–ª—é—á–µ–Ω —Å ID: ${client.clientId}\n');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ $name: $e\n');
    }
  }

  if (clients.length < 2) {
    print('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
    return;
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  for (final client in clients) {
    client.messages.listen((message) {
      final clientName = clientNames[clients.indexOf(client)];
      switch (message.type) {
        case RouterMessageType.unicast:
          print('üì© $clientName –ø–æ–ª—É—á–∏–ª unicast –æ—Ç ${message.senderId}: ${message.payload}');
          break;
        case RouterMessageType.multicast:
          print(
              'üì¢ $clientName –ø–æ–ª—É—á–∏–ª multicast –æ—Ç ${message.senderId} (–≥—Ä—É–ø–ø–∞: ${message.groupName}): ${message.payload}');
          break;
        case RouterMessageType.broadcast:
          print('üì° $clientName –ø–æ–ª—É—á–∏–ª broadcast –æ—Ç ${message.senderId}: ${message.payload}');
          break;
        case RouterMessageType.error:
          print('‚ùå $clientName –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É: ${message.errorMessage}');
          break;
        default:
          print('üìù $clientName –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.type}: ${message.payload}');
      }
    });
  }

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  await demonstrateRouting(clients, clientNames);

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  print('\nüîö –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
  for (final client in clients) {
    await client.disconnect();
  }

  exit(0);
}

/// –°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
Future<RouterCallerContract> createAndConnectClient(String name) async {
  // –°–æ–∑–¥–∞–µ–º WebSocket —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  final transport = RpcWebSocketCallerTransport.connect(
    Uri.parse('ws://localhost:8081'),
    logger: RpcLogger('Client_$name'),
  );

  // –°–æ–∑–¥–∞–µ–º endpoint
  final endpoint = RpcCallerEndpoint(
    transport: transport,
    debugLabel: 'Client_$name',
  );

  // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫–ª–∏–µ–Ω—Ç
  final client = RouterCallerContract(
    endpoint,
    logger: RpcLogger('RouterClient_$name'),
  );

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–æ—É—Ç–µ—Ä—É
  await client.connect(
    clientName: name,
    groups: ['developers', 'testers'],
  );

  return client;
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
Future<void> demonstrateRouting(
  List<RouterCallerContract> clients,
  List<String> clientNames,
) async {
  final alice = clients[0];
  final bob = clients[1];
  final charlie = clients.length > 2 ? clients[2] : null;

  await Future.delayed(Duration(milliseconds: 500));

  print('üéØ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è UNICAST ===');
  // Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Bob'—É
  await alice.sendUnicast(
    targetId: bob.clientId!,
    payload: {'message': '–ü—Ä–∏–≤–µ—Ç, Bob! –≠—Ç–æ Alice üëã', 'time': DateTime.now().toIso8601String()},
  );

  await Future.delayed(Duration(milliseconds: 500));

  // Bob –æ—Ç–≤–µ—á–∞–µ—Ç Alice
  await bob.sendUnicast(
    targetId: alice.clientId!,
    payload: {'message': '–ü—Ä–∏–≤–µ—Ç, Alice! –ö–∞–∫ –¥–µ–ª–∞? üòä', 'time': DateTime.now().toIso8601String()},
  );

  await Future.delayed(Duration(seconds: 1));

  print('\nüì¢ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MULTICAST ===');
  // Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  await alice.sendMulticast(
    groupName: 'developers',
    payload: {
      'message': '–†–µ–±—è—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É –∑–∞–≤—Ç—Ä–∞! üìÖ',
      'sender': 'Alice',
      'time': DateTime.now().toIso8601String()
    },
  );

  await Future.delayed(Duration(seconds: 1));

  print('\nüì° === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BROADCAST ===');
  // Bob –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º
  await bob.sendBroadcast(
    payload: {
      'message': 'üéâ –£—Ä–∞! –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–ª–∏–∑—É!',
      'sender': 'Bob',
      'announcement': true,
      'time': DateTime.now().toIso8601String()
    },
  );

  await Future.delayed(Duration(milliseconds: 500));

  // Charlie –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ broadcast (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (charlie != null) {
    await charlie.sendBroadcast(
      payload: {
        'message': 'üëè –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–µ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—Å–µ—Ö!',
        'sender': 'Charlie',
        'reaction': true,
        'time': DateTime.now().toIso8601String()
      },
    );
  }

  await Future.delayed(Duration(seconds: 1));

  print('\nüèì === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è PING ===');
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
  try {
    final latency = await alice.ping();
    print('‚è±Ô∏è  Alice: ping –∫ —Ä–æ—É—Ç–µ—Ä—É = ${latency.inMilliseconds}ms');
  } catch (e) {
    print('‚ùå Alice: –æ—à–∏–±–∫–∞ ping = $e');
  }

  await Future.delayed(Duration(milliseconds: 500));

  print('\nüì° === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –°–û–ë–´–¢–ò–ô –†–û–£–¢–ï–†–ê ===');
  // Alice –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  try {
    await alice.subscribeToEvents();
    print('‚úÖ Alice –ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–æ—É—Ç–µ—Ä–∞');

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    alice.events.listen((event) {
      print('üîî Alice –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–±—ã—Ç–∏–µ ${event.type}: ${event.data}');
    });

    await Future.delayed(Duration(seconds: 1));
  } catch (e) {
    print('‚ùå Alice: –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è = $e');
  }

  print('\nüö´ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ ===');
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
  await alice.sendUnicast(
    targetId: 'nonexistent_client',
    payload: {'message': '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'},
  );

  await Future.delayed(Duration(seconds: 2));
}
