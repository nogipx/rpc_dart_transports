// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';

import 'package:rpc_dart/rpc_dart.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';
import 'package:web_socket_channel/io.dart';

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–æ—É—Ç–µ—Ä–∞ RPC –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
///
/// –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
/// 1. –ó–∞–ø—É—Å–∫ —Ä–æ—É—Ç–µ—Ä–∞ –Ω–∞ WebSocket
/// 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
/// 3. –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π: unicast, multicast, broadcast
/// 4. –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π —Ä–æ—É—Ç–µ—Ä–∞
/// 5. Request-Response –ø–∞—Ç—Ç–µ—Ä–Ω
Future<void> main() async {
  print('üöÄ –ó–∞–ø—É—Å–∫ —Ä–æ—É—Ç–µ—Ä–∞ RPC –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n');

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
  final serverData = await startRouterServer();
  final server = serverData['server'] as HttpServer;
  final routerContract = serverData['contract'] as RouterResponderContract;

  print('‚úÖ –†–æ—É—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8081\n');

  // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
  await Future.delayed(Duration(milliseconds: 500));

  try {
    await runClientDemo();
  } catch (e, stackTrace) {
    print('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: $e\n$stackTrace');
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    await routerContract.dispose();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    await server.close(force: true);
    print('üîö –†–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

    // –î–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ –Ω–∞ –æ—á–∏—Å—Ç–∫—É
    await Future.delayed(Duration(milliseconds: 100));

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    exit(0);
  }
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä
Future<Map<String, dynamic>> startRouterServer() async {
  // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  final routerContract = RouterResponderContract(
    logger: RpcLogger('RouterServer'),
  );

  // –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
  final server = await HttpServer.bind('localhost', 8081);

  server.listen((request) async {
    if (WebSocketTransformer.isUpgradeRequest(request)) {
      try {
        final websocket = await WebSocketTransformer.upgrade(request);
        final channel = IOWebSocketChannel(websocket);
        final transport = RpcWebSocketResponderTransport(
          channel,
          logger: RpcLogger('ServerTransport'),
        );

        // –°–æ–∑–¥–∞–µ–º endpoint –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        final endpoint = RpcResponderEndpoint(
          transport: transport,
          debugLabel: 'RouterEndpoint',
        );

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        endpoint.registerServiceContract(routerContract);
        endpoint.start();

        print('üîå –ù–æ–≤–æ–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
        request.response.statusCode = 500;
        await request.response.close();
      }
    } else {
      request.response.statusCode = 404;
      await request.response.close();
    }
  });

  return {
    'server': server,
    'contract': routerContract,
  };
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–æ–≤
Future<void> runClientDemo() async {
  print('üë• –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...\n');

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  final clients = <RouterClient>[];
  final clientNames = ['Alice', 'Bob', 'Charlie'];
  StreamSubscription? eventsSubscription;

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    for (final name in clientNames) {
      try {
        final client = await createAndConnectClient(name);
        clients.add(client);
        print('‚úÖ –ö–ª–∏–µ–Ω—Ç $name –ø–æ–¥–∫–ª—é—á–µ–Ω —Å ID: ${client.clientId}\n');
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ $name: $e\n');
      }
    }

    if (clients.length < 2) {
      print('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
      return;
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º P2P –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    for (int i = 0; i < clients.length; i++) {
      final client = clients[i];
      final clientName = clientNames[i];

      await client.initializeP2P(
        onP2PMessage: (message) {
          switch (message.type) {
            case RouterMessageType.unicast:
              print('üì© $clientName –ø–æ–ª—É—á–∏–ª unicast –æ—Ç ${message.senderId}: ${message.payload}');
              break;
            case RouterMessageType.multicast:
              print(
                  'üì¢ $clientName –ø–æ–ª—É—á–∏–ª multicast –æ—Ç ${message.senderId} (–≥—Ä—É–ø–ø–∞: ${message.groupName}): ${message.payload}');
              break;
            case RouterMessageType.broadcast:
              print('üì° $clientName –ø–æ–ª—É—á–∏–ª broadcast –æ—Ç ${message.senderId}: ${message.payload}');
              break;
            case RouterMessageType.request:
              print('üîî $clientName –ø–æ–ª—É—á–∏–ª request –æ—Ç ${message.senderId}: ${message.payload}');
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
              _handleRequest(client, message);
              break;
            case RouterMessageType.response:
              print('‚úÖ $clientName –ø–æ–ª—É—á–∏–ª response –æ—Ç ${message.senderId}: ${message.payload}');
              break;
            case RouterMessageType.error:
              print('‚ùå $clientName –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É: ${message.errorMessage}');
              break;
            default:
              print('üìù $clientName –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.type}: ${message.payload}');
          }
        },
      );
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    await clients[0].subscribeToEvents();
    eventsSubscription = clients[0].events.listen((event) {
      print('üîî Alice –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–±—ã—Ç–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ ${event.type}: ${event.data}');
    });

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    await demonstrateRouting(clients, clientNames);
  } finally {
    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    await eventsSubscription?.cancel();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print('\nüîö –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
    for (final client in clients) {
      try {
        await client.dispose();
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞: $e');
      }
    }
  }
}

/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π request –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç response
void _handleRequest(RouterClient client, RouterMessage request) {
  final requestId = request.payload?['requestId'] as String?;
  final senderId = request.senderId;

  if (requestId != null && senderId != null) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    final responseMessage = RouterMessage.response(
      targetId: senderId,
      requestId: requestId,
      payload: {
        'originalRequest': request.payload,
        'respondedBy': client.clientId,
        'timestamp': DateTime.now().toIso8601String(),
      },
      senderId: client.clientId,
    );

    client.sendP2PMessage(responseMessage);
  }
}

/// –°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
Future<RouterClient> createAndConnectClient(String name) async {
  // –°–æ–∑–¥–∞–µ–º WebSocket —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  final transport = RpcWebSocketCallerTransport.connect(
    Uri.parse('ws://localhost:8081'),
    logger: RpcLogger('Client_$name'),
  );

  // –°–æ–∑–¥–∞–µ–º endpoint
  final endpoint = RpcCallerEndpoint(
    transport: transport,
    debugLabel: 'Client_$name',
  );

  // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫–ª–∏–µ–Ω—Ç
  final client = RouterClient(
    callerEndpoint: endpoint,
    logger: RpcLogger('RouterClient_$name'),
  );

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –≤ —Ä–æ—É—Ç–µ—Ä–µ
  await client.register(
    clientName: name,
    groups: ['developers', 'testers'],
  );

  return client;
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
Future<void> demonstrateRouting(
  List<RouterClient> clients,
  List<String> clientNames,
) async {
  final alice = clients[0];
  final bob = clients[1];
  final charlie = clients.length > 2 ? clients[2] : null;

  await Future.delayed(Duration(milliseconds: 200));

  print('üèì === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è PING ===');
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
  try {
    final latency = await alice.ping();
    print('‚è±Ô∏è  Alice: ping –∫ —Ä–æ—É—Ç–µ—Ä—É = ${latency.inMilliseconds}ms\n');
  } catch (e) {
    print('‚ùå Alice: –æ—à–∏–±–∫–∞ ping = $e\n');
  }

  print('üîç === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DISCOVERY ===');
  // Alice –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤
  try {
    final onlineClients = await alice.getOnlineClients();
    print('üîç Alice –ø–æ–ª—É—á–∏–ª–∞ —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤:');
    for (final client in onlineClients) {
      print('   - ${client.clientName} (${client.clientId}) - –≥—Ä—É–ø–ø—ã: ${client.groups}');
    }
    print('');
  } catch (e) {
    print('‚ùå Alice: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ = $e\n');
  }

  print('üéØ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è UNICAST ===');
  // Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Bob'—É
  await alice.sendUnicast(
    bob.clientId!,
    {'message': '–ü—Ä–∏–≤–µ—Ç, Bob! –≠—Ç–æ Alice üëã', 'time': DateTime.now().toIso8601String()},
  );

  await Future.delayed(Duration(milliseconds: 200));

  // Bob –æ—Ç–≤–µ—á–∞–µ—Ç Alice
  await bob.sendUnicast(
    alice.clientId!,
    {'message': '–ü—Ä–∏–≤–µ—Ç, Alice! –ö–∞–∫ –¥–µ–ª–∞? üòä', 'time': DateTime.now().toIso8601String()},
  );

  await Future.delayed(Duration(milliseconds: 300));

  print('\nüì¢ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MULTICAST ===');
  // Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  await alice.sendMulticast(
    'developers',
    {
      'message': '–†–µ–±—è—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É –∑–∞–≤—Ç—Ä–∞! üìÖ',
      'sender': 'Alice',
      'time': DateTime.now().toIso8601String()
    },
  );

  await Future.delayed(Duration(milliseconds: 300));

  print('\nüì° === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BROADCAST ===');
  // Bob –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º
  await bob.sendBroadcast({
    'message': 'üéâ –£—Ä–∞! –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–ª–∏–∑—É!',
    'sender': 'Bob',
    'announcement': true,
    'time': DateTime.now().toIso8601String()
  });

  await Future.delayed(Duration(milliseconds: 200));

  // Charlie –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ broadcast (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (charlie != null) {
    await charlie.sendBroadcast({
      'message': 'üëè –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–µ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—Å–µ—Ö!',
      'sender': 'Charlie',
      'reaction': true,
      'time': DateTime.now().toIso8601String()
    });
  }

  await Future.delayed(Duration(milliseconds: 300));

  print('\nüîÑ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è REQUEST-RESPONSE ===');
  // Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å Bob'—É
  try {
    final response = await alice.sendRequest(
      bob.clientId!,
      {
        'question': '–ö–∞–∫–∞—è —É —Ç–µ–±—è –ª—é–±–∏–º–∞—è —Ñ–∏—á–∞ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏?',
        'from': 'Alice',
      },
      timeout: Duration(seconds: 3),
    );
    print('üí¨ Alice –ø–æ–ª—É—á–∏–ª–∞ –æ—Ç–≤–µ—Ç –æ—Ç Bob: $response');
  } catch (e) {
    print('‚ùå Alice: –æ—à–∏–±–∫–∞ request-response = $e');
  }

  await Future.delayed(Duration(milliseconds: 300));

  print('\nüö´ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ ===');
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
  await alice.sendUnicast(
    'nonexistent_client',
    {'message': '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'},
  );

  await Future.delayed(Duration(milliseconds: 300));

  print('\n‚úÖ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===');
}
