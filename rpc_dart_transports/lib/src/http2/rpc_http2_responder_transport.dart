// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:io';
import 'dart:typed_data';

import 'package:http2/http2.dart' as http2;
import 'package:rpc_dart/rpc_dart.dart';

import 'http2_common.dart';

/// HTTP/2 —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö RPC –≤—ã–∑–æ–≤–æ–≤
///
/// –†–µ–∞–ª–∏–∑—É–µ—Ç IRpcTransport –ø–æ–≤–µ—Ä—Ö HTTP/2 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –∏ gRPC-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª.
class RpcHttp2ResponderTransport implements IRpcTransport {
  /// HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  final http2.ServerTransportConnection _connection;

  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  final StreamController<RpcTransportMessage> _messageController =
      StreamController<RpcTransportMessage>.broadcast();

  /// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Stream ID (—Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–µ—Ç–Ω—ã–µ)
  int _nextStreamId = 2; // –°–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–µ—Ç–Ω—ã–µ ID

  /// –ê–∫—Ç–∏–≤–Ω—ã–µ HTTP/2 streams (–≤—Ö–æ–¥—è—â–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)
  final Map<int, http2.ServerTransportStream> _incomingStreams = {};

  /// –ò—Å—Ö–æ–¥—è—â–∏–µ streams (responses)
  final Map<int, http2.ServerTransportStream> _outgoingStreams = {};

  /// –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è streams
  final Map<int, StreamSubscription> _streamSubscriptions = {};

  /// –ü–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ stream (–¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
  final Map<int, RpcMessageParser> _streamParsers = {};

  /// –§–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è
  bool _isClosed = false;

  /// –õ–æ–≥–≥–µ—Ä
  final RpcLogger? _logger;

  RpcHttp2ResponderTransport._({
    required http2.ServerTransportConnection connection,
    RpcLogger? logger,
  })  : _connection = connection,
        _logger = logger?.child('Http2ServerTransport') {
    _setupConnectionListener();
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–π HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  static RpcHttp2ResponderTransport create({
    required http2.ServerTransportConnection connection,
    RpcLogger? logger,
  }) {
    logger?.debug('–°–æ–∑–¥–∞–Ω–∏–µ HTTP/2 —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');

    return RpcHttp2ResponderTransport._(
      connection: connection,
      logger: logger,
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç HTTP/2 —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  ///
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  static Future<RpcHttp2Server> bind({
    required String host,
    required int port,
    RpcLogger? logger,
  }) async {
    logger?.info('–°–æ–∑–¥–∞–Ω–∏–µ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ $host:$port');

    final serverSocket = await ServerSocket.bind(host, port);

    logger?.info('HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ $host:$port');

    return RpcHttp2Server._(
      serverSocket: serverSocket,
      logger: logger,
    );
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö streams –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
  void _setupConnectionListener() {
    _logger?.debug('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');

    _connection.incomingStreams.listen(
      (http2.ServerTransportStream stream) {
        _handleIncomingStream(stream);
      },
      onError: (error, stackTrace) {
        _logger?.error('–û—à–∏–±–∫–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ HTTP/2', error: error, stackTrace: stackTrace);

        if (!_messageController.isClosed) {
          _messageController.addError(error, stackTrace);
        }
      },
      onDone: () {
        _logger?.debug('HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        close();
      },
    );
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π stream –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  void _handleIncomingStream(http2.ServerTransportStream stream) {
    final streamId = stream.id;
    print('üì• [ServerTransport] –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π stream: $streamId');
    _logger?.debug('–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π stream: $streamId');

    _incomingStreams[streamId] = stream;
    print(
        'üìù [ServerTransport] –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ stream $streamId –≤ _incomingStreams. –í—Å–µ–≥–æ: ${_incomingStreams.length}');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ stream
    final subscription = stream.incomingMessages.listen(
      (http2.StreamMessage message) {
        _handleIncomingMessage(streamId, message);
      },
      onError: (error, stackTrace) {
        _logger?.error('–û—à–∏–±–∫–∞ –≤ stream $streamId', error: error, stackTrace: stackTrace);

        if (!_messageController.isClosed) {
          _messageController.addError(error, stackTrace);
        }
      },
      onDone: () {
        _logger?.debug('–í—Ö–æ–¥—è—â–∏–π stream $streamId –∑–∞–≤–µ—Ä—à–µ–Ω');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞
        if (!_messageController.isClosed) {
          _messageController.add(RpcTransportMessage(
            streamId: streamId,
            isEndOfStream: true,
          ));
        }

        // –ù–µ —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É –∏–∑ _incomingStreams, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ releaseStreamId –∏–ª–∏ close
        _streamSubscriptions.remove(streamId);
        _streamParsers.remove(streamId);
      },
    );

    _streamSubscriptions[streamId] = subscription;
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  void _handleIncomingMessage(int streamId, http2.StreamMessage message) {
    _logger?.debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è stream $streamId, —Ç–∏–ø: ${message.runtimeType}');

    try {
      if (message is http2.HeadersStreamMessage) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ headers (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞)
        _handleIncomingHeaders(streamId, message);
      } else if (message is http2.DataStreamMessage) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        _handleIncomingData(streamId, message);
      }
    } catch (e, stackTrace) {
      _logger?.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è stream $streamId',
          error: e, stackTrace: stackTrace);

      if (!_messageController.isClosed) {
        _messageController.addError(e, stackTrace);
      }
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ HTTP/2 headers –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  void _handleIncomingHeaders(int streamId, http2.HeadersStreamMessage message) {
    _logger?.debug('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö headers –¥–ª—è stream $streamId');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –º–µ—Ç–æ–¥–∞ –∏–∑ headers
    String? methodPath;
    for (final header in message.headers) {
      final name = String.fromCharCodes(header.name);
      if (name == ':path') {
        methodPath = String.fromCharCodes(header.value);
        break;
      }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTTP/2 headers –≤ RPC –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    final metadata = http2HeadersToRpcMetadata(message.headers);

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final transportMessage = RpcTransportMessage(
      streamId: streamId,
      metadata: metadata,
      isEndOfStream: message.endStream,
      methodPath: methodPath,
    );

    if (!_messageController.isClosed) {
      _messageController.add(transportMessage);
    }

    _logger?.debug('–í—Ö–æ–¥—è—â–∏–µ headers –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è stream $streamId, –º–µ—Ç–æ–¥: $methodPath');
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ HTTP/2 –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  void _handleIncomingData(int streamId, http2.DataStreamMessage message) {
    _logger?.debug(
        '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è stream $streamId, —Ä–∞–∑–º–µ—Ä: ${message.bytes.length} –±–∞–π—Ç');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ stream
      final parser = _streamParsers.putIfAbsent(
        streamId,
        () => RpcMessageParser(logger: _logger?.child('Parser-$streamId')),
      );

      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º gRPC frame(s) –∏—Å–ø–æ–ª—å–∑—É—è RpcMessageParser
      final bytes = message.bytes is Uint8List
          ? message.bytes as Uint8List
          : Uint8List.fromList(message.bytes);
      final messages = parser(bytes);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
      for (final msgData in messages) {
        final transportMessage = RpcTransportMessage(
          streamId: streamId,
          payload: msgData,
          isEndOfStream: message.endStream && msgData == messages.last,
        );

        if (!_messageController.isClosed) {
          _messageController.add(transportMessage);
        }
      }

      _logger?.debug('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${messages.length} –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è stream $streamId');
    } catch (e, stackTrace) {
      _logger?.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –≤—Ö–æ–¥—è—â–∏—Ö gRPC –¥–∞–Ω–Ω—ã—Ö –¥–ª—è stream $streamId',
          error: e, stackTrace: stackTrace);

      if (!_messageController.isClosed) {
        _messageController.addError(e, stackTrace);
      }
    }
  }

  @override
  int createStream() {
    if (_isClosed) throw StateError('Transport is closed');

    final streamId = _nextStreamId;
    _nextStreamId += 2; // –°–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–µ—Ç–Ω—ã–µ ID (2, 4, 6, ...)

    _logger?.debug('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏—Å—Ö–æ–¥—è—â–∏–π stream: $streamId');
    return streamId;
  }

  @override
  bool releaseStreamId(int streamId) {
    if (_isClosed) return false;

    _logger?.debug('–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ stream: $streamId');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π stream –º—è–≥–∫–æ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    final incomingStream = _incomingStreams.remove(streamId);
    if (incomingStream != null) {
      try {
        incomingStream.sendData(Uint8List(0), endStream: true);
        _logger?.debug('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω END_STREAM –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ stream $streamId');
      } catch (e) {
        _logger
            ?.debug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å END_STREAM, –∏—Å–ø–æ–ª—å–∑—É–µ–º terminate –¥–ª—è stream $streamId');
        incomingStream.terminate();
      }
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π stream –º—è–≥–∫–æ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    final outgoingStream = _outgoingStreams.remove(streamId);
    if (outgoingStream != null) {
      try {
        outgoingStream.sendData(Uint8List(0), endStream: true);
        _logger?.debug('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω END_STREAM –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ stream $streamId');
      } catch (e) {
        _logger
            ?.debug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å END_STREAM, –∏—Å–ø–æ–ª—å–∑—É–µ–º terminate –¥–ª—è stream $streamId');
        outgoingStream.terminate();
      }
    }

    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    final subscription = _streamSubscriptions.remove(streamId);
    subscription?.cancel();

    // –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ stream
    _streamParsers.remove(streamId);

    return true;
  }

  @override
  Future<void> sendMetadata(
    int streamId,
    RpcMetadata metadata, {
    bool endStream = false,
  }) async {
    if (_isClosed) throw StateError('Transport is closed');

    _logger?.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è stream $streamId');

    // –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏—â–µ–º –≤—Ö–æ–¥—è—â–∏–π stream
    final incomingStream = _incomingStreams[streamId];
    if (incomingStream == null) {
      _logger?.warning('Incoming stream $streamId not found, skipping metadata send');
      return;
    }

    try {
      // –ï—Å–ª–∏ —É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
      final serverMetadata = metadata.getHeaderValue(':status') == null
          ? RpcMetadata([
              ...RpcMetadata.forServerInitialResponse().headers,
              ...metadata.headers,
            ])
          : metadata;

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RPC –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ HTTP/2 headers (–æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
      final headers = rpcMetadataToHttp2Headers(serverMetadata);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º headers –≤ –æ—Ç–≤–µ—Ç
      incomingStream.sendHeaders(headers, endStream: endStream);

      _logger?.debug('–û—Ç–≤–µ—Ç–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è stream $streamId');
    } catch (e) {
      _logger?.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è stream $streamId: $e');
      rethrow;
    }
  }

  @override
  Future<void> sendMessage(
    int streamId,
    Uint8List data, {
    bool endStream = false,
  }) async {
    if (_isClosed) throw StateError('Transport is closed');

    final incomingStream = _incomingStreams[streamId];
    if (incomingStream == null) {
      _logger?.warning('Incoming stream $streamId not found, skipping message send');
      return;
    }

    _logger?.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è stream $streamId, —Ä–∞–∑–º–µ—Ä: ${data.length} –±–∞–π—Ç');

    try {
      // –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ gRPC frame —Ñ–æ—Ä–º–∞—Ç
      final framedData = packGrpcMessage(data);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ HTTP/2
      incomingStream.sendData(framedData, endStream: endStream);

      _logger?.debug('–û—Ç–≤–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è stream $streamId');
    } catch (e) {
      _logger?.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è stream $streamId: $e');
      rethrow;
    }
  }

  @override
  Future<void> finishSending(int streamId) async {
    if (_isClosed) return;

    final incomingStream = _incomingStreams[streamId];
    if (incomingStream == null) {
      _logger?.debug('Incoming stream $streamId not found, skipping finish sending');
      return;
    }

    _logger?.debug('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è stream $streamId');

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º END_STREAM —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      incomingStream.sendData(Uint8List(0), endStream: true);

      _logger?.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è stream $streamId');
    } catch (e) {
      _logger?.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è stream $streamId: $e');
    }
  }

  @override
  Stream<RpcTransportMessage> get incomingMessages => _messageController.stream;

  @override
  Stream<RpcTransportMessage> getMessagesForStream(int streamId) {
    return incomingMessages.where((message) => message.streamId == streamId);
  }

  @override
  Future<void> close() async {
    if (_isClosed) return;

    _logger?.debug('–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP/2 —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
    _isClosed = true;

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    final totalStreams = _incomingStreams.length + _outgoingStreams.length;
    if (totalStreams > 0) {
      _logger?.debug('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è $totalStreams –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...');
      await Future.delayed(Duration(milliseconds: 50));
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ streams –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
    for (final stream in _incomingStreams.values) {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å stream –º—è–≥–∫–æ
        stream.sendData(Uint8List(0), endStream: true);
        _logger?.debug('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω END_STREAM –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ stream ${stream.id}');
      } catch (e) {
        _logger?.debug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å END_STREAM –¥–ª—è stream ${stream.id}: $e');
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º terminate
        try {
          stream.terminate();
        } catch (e2) {
          _logger?.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ terminate –≤—Ö–æ–¥—è—â–µ–≥–æ stream ${stream.id}: $e2');
        }
      }
    }
    _incomingStreams.clear();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ streams –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
    for (final stream in _outgoingStreams.values) {
      try {
        stream.sendData(Uint8List(0), endStream: true);
        _logger?.debug('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω END_STREAM –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ stream ${stream.id}');
      } catch (e) {
        _logger?.debug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å END_STREAM –¥–ª—è stream ${stream.id}: $e');
        try {
          stream.terminate();
        } catch (e2) {
          _logger?.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ terminate –∏—Å—Ö–æ–¥—è—â–µ–≥–æ stream ${stream.id}: $e2');
        }
      }
    }
    _outgoingStreams.clear();

    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
    for (final subscription in _streamSubscriptions.values) {
      await subscription.cancel();
    }
    _streamSubscriptions.clear();

    // –û—á–∏—â–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã
    _streamParsers.clear();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await _connection.finish();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    if (!_messageController.isClosed) {
      await _messageController.close();
    }

    _logger?.debug('HTTP/2 —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç');
  }
}

/// HTTP/2 —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
///
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π RpcHttp2ResponderTransport –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
/// –≤—Ö–æ–¥—è—â–µ–≥–æ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —ç–º–∏—Ç–∏—Ç –∏—Ö –≤ –ø–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤.
class RpcHttp2Server {
  /// –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç
  final ServerSocket _serverSocket;

  /// –õ–æ–≥–≥–µ—Ä
  final RpcLogger? _logger;

  /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
  final StreamController<RpcHttp2ResponderTransport> _transportController =
      StreamController<RpcHttp2ResponderTransport>.broadcast();

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  StreamSubscription<Socket>? _socketSubscription;

  /// –§–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è
  bool _isClosed = false;

  RpcHttp2Server._({
    required ServerSocket serverSocket,
    RpcLogger? logger,
  })  : _serverSocket = serverSocket,
        _logger = logger?.child('Http2Server') {
    _startListening();
  }

  /// –ü–æ—Ç–æ–∫ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  Stream<RpcHttp2ResponderTransport> get transports => _transportController.stream;

  /// –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
  InternetAddress get address => _serverSocket.address;

  /// –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
  int get port => _serverSocket.port;

  /// –ù–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  void _startListening() {
    _logger?.info('–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ ${address.address}:$port');

    _socketSubscription = _serverSocket.listen(
      (socket) => _handleSocket(socket),
      onError: (error, stackTrace) {
        _logger?.error('–û—à–∏–±–∫–∞ –≤ HTTP/2 —Å–µ—Ä–≤–µ—Ä–µ', error: error, stackTrace: stackTrace);
        if (!_transportController.isClosed) {
          _transportController.addError(error, stackTrace);
        }
      },
      onDone: () {
        _logger?.info('HTTP/2 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        close();
      },
    );
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  void _handleSocket(Socket socket) {
    final clientAddress = socket.remoteAddress.toString();
    final clientPort = socket.remotePort;

    _logger?.debug('–ù–æ–≤–æ–µ HTTP/2 TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: $clientAddress:$clientPort');

    try {
      // –°–æ–∑–¥–∞–µ–º HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      final http2Connection = http2.ServerTransportConnection.viaSocket(socket);

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      final transport = RpcHttp2ResponderTransport.create(
        connection: http2Connection,
        logger: _logger?.child('Transport-$clientAddress'),
      );

      // –≠–º–∏—Ç–∏–º –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      if (!_transportController.isClosed) {
        _transportController.add(transport);
        _logger?.info('HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è $clientAddress:$clientPort');
      }
    } catch (e, stackTrace) {
      _logger?.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è $clientAddress:$clientPort',
          error: e, stackTrace: stackTrace);
      try {
        socket.destroy();
      } catch (_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      }
    }
  }

  /// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
  Future<void> close() async {
    if (_isClosed) return;

    _logger?.info('–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞...');
    _isClosed = true;

    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await _socketSubscription?.cancel();
    _socketSubscription = null;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç
    await _serverSocket.close();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
    if (!_transportController.isClosed) {
      await _transportController.close();
    }

    _logger?.info('HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  }
}
