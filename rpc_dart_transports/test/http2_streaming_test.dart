// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:test/test.dart';
import 'package:http2/http2.dart' as http2;
import 'package:rpc_dart_transports/rpc_dart_transports.dart';

void main() {
  group('HTTP/2 Streaming RPC Tests', () {
    late Http2StreamingTestServer testServer;

    setUp(() async {
      testServer = Http2StreamingTestServer();
      await testServer.start();
    });

    tearDown(() async {
      await testServer.stop();
    });

    test('server_streaming_rpc_–¥–æ–ª–∂–µ–Ω_–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å_–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ_–æ—Ç–≤–µ—Ç—ã',
        () async {
      // Arrange
      final client = await RpcHttp2CallerTransport.connect(
        host: 'localhost',
        port: testServer.port,
      );

      try {
        final responses = <String>[];
        final completer = Completer<void>();
        var responseCount = 0;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        testServer.setServerStreamingHandler((request) async* {
          final baseMessage = utf8.decode(request);
          for (int i = 1; i <= 5; i++) {
            await Future.delayed(Duration(milliseconds: 50));
            yield utf8.encode('$baseMessage Response #$i');
          }
        });

        // Act
        final streamId = client.createStream();

        // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        client.getMessagesForStream(streamId).listen(
          (message) {
            if (message.payload != null) {
              final responseText = utf8.decode(message.payload!);
              responses.add(responseText);
              responseCount++;

              print('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç #$responseCount: $responseText');

              // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
              if (responseCount >= 5) {
                completer.complete();
              }
            }
          },
          onError: (error) => completer.completeError(error),
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        final metadata =
            RpcMetadata.forClientRequest('StreamService', 'ServerStream');
        await client.sendMetadata(streamId, metadata);
        await client.sendMessage(
            streamId, Uint8List.fromList(utf8.encode('Hello Stream')));
        await client.finishSending(streamId);

        // Assert
        await completer.future.timeout(
          Duration(seconds: 10),
          onTimeout: () => throw TimeoutException(
              'Timeout waiting for server streaming responses'),
        );

        expect(responses.length, equals(5));
        expect(responses[0], equals('Hello Stream Response #1'));
        expect(responses[1], equals('Hello Stream Response #2'));
        expect(responses[2], equals('Hello Stream Response #3'));
        expect(responses[3], equals('Hello Stream Response #4'));
        expect(responses[4], equals('Hello Stream Response #5'));
      } finally {
        await client.close();
      }
    });

    test('client_streaming_rpc_–¥–æ–ª–∂–µ–Ω_–ø—Ä–∏–Ω–∏–º–∞—Ç—å_–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ_–∑–∞–ø—Ä–æ—Å—ã',
        () async {
      // Arrange
      final client = await RpcHttp2CallerTransport.connect(
        host: 'localhost',
        port: testServer.port,
      );

      try {
        final responseCompleter = Completer<String>();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–∫–∫—É–º—É–ª—è—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        testServer.setClientStreamingHandler((requests) async {
          final allMessages = <String>[];
          await for (final request in requests) {
            final message = utf8.decode(request);
            allMessages.add(message);
            print('üì• –°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª: $message');
          }
          return utf8.encode(
              'Received ${allMessages.length} messages: ${allMessages.join(", ")}');
        });

        // Act
        final streamId = client.createStream();

        // –°–ª—É—à–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        client.getMessagesForStream(streamId).listen(
          (message) {
            if (message.payload != null && !responseCompleter.isCompleted) {
              final responseText = utf8.decode(message.payload!);
              responseCompleter.complete(responseText);
            }
          },
          onError: (error) {
            if (!responseCompleter.isCompleted) {
              responseCompleter.completeError(error);
            }
          },
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        final metadata =
            RpcMetadata.forClientRequest('StreamService', 'ClientStream');
        await client.sendMetadata(streamId, metadata);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for (int i = 1; i <= 3; i++) {
          await Future.delayed(Duration(milliseconds: 100));
          final message = 'Message #$i';
          print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: $message');
          await client.sendMessage(
              streamId, Uint8List.fromList(utf8.encode(message)));
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await client.finishSending(streamId);

        // Assert
        final response = await responseCompleter.future.timeout(
          Duration(seconds: 3),
          onTimeout: () => throw TimeoutException(
              'Timeout waiting for client streaming response'),
        );

        expect(response,
            equals('Received 3 messages: Message #1, Message #2, Message #3'));
      } finally {
        await client.close();
      }
    });

    test('bidirectional_streaming_rpc_–¥–æ–ª–∂–µ–Ω_–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å_–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π_–ø–æ—Ç–æ–∫',
        () async {
      // Arrange
      final client = await RpcHttp2CallerTransport.connect(
        host: 'localhost',
        port: testServer.port,
      );

      try {
        final responses = <String>[];
        final responseCompleter = Completer<void>();
        var expectedResponses = 3;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º bidirectional –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        testServer.setBidirectionalHandler((requests) async* {
          await for (final request in requests) {
            final message = utf8.decode(request);
            print('üîÑ –°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: $message');

            // –≠—Ö–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–∞
            yield utf8.encode('Echo: $message');
          }
        });

        // Act
        final streamId = client.createStream();

        // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        client.getMessagesForStream(streamId).listen(
          (message) {
            if (message.payload != null) {
              final responseText = utf8.decode(message.payload!);
              responses.add(responseText);
              print('üîÑ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª: $responseText');

              if (responses.length >= expectedResponses) {
                responseCompleter.complete();
              }
            }
          },
          onError: (error) => responseCompleter.completeError(error),
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        final metadata = RpcMetadata.forClientRequest(
            'StreamService', 'BidirectionalStream');
        await client.sendMetadata(streamId, metadata);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        for (int i = 1; i <= 3; i++) {
          await Future.delayed(Duration(milliseconds: 200));
          final message = 'Bidirectional Message #$i';
          print('üîÑ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: $message');
          await client.sendMessage(
              streamId, Uint8List.fromList(utf8.encode(message)));
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await client.finishSending(streamId);

        // Assert
        await responseCompleter.future.timeout(
          Duration(seconds: 10),
          onTimeout: () => throw TimeoutException(
              'Timeout waiting for bidirectional responses'),
        );

        expect(responses.length, equals(3));
        expect(responses[0], equals('Echo: Bidirectional Message #1'));
        expect(responses[1], equals('Echo: Bidirectional Message #2'));
        expect(responses[2], equals('Echo: Bidirectional Message #3'));
      } finally {
        await client.close();
      }
    });

    test('—Å–º–µ—à–∞–Ω–Ω—ã–µ_–ø–æ—Ç–æ–∫–∏_–¥–æ–ª–∂–Ω—ã_—Ä–∞–±–æ—Ç–∞—Ç—å_–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ', () async {
      // Arrange
      final client = await RpcHttp2CallerTransport.connect(
        host: 'localhost',
        port: testServer.port,
      );

      try {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ handlers
        testServer.setServerStreamingHandler((request) async* {
          for (int i = 1; i <= 2; i++) {
            yield utf8.encode('Server Stream #$i');
          }
        });

        testServer.setClientStreamingHandler((requests) async {
          var count = 0;
          await for (final _ in requests) {
            count++;
          }
          return utf8.encode('Client sent $count messages');
        });

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        final futures = <Future>[];

        // Server streaming –≤—ã–∑–æ–≤
        futures.add(_testServerStreaming(client));

        // Client streaming –≤—ã–∑–æ–≤
        futures.add(_testClientStreaming(client));

        // Act & Assert
        await Future.wait(futures).timeout(
          Duration(seconds: 10),
          onTimeout: () =>
              throw TimeoutException('Timeout in parallel streaming test'),
        );

        print('‚úÖ –í—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ streaming –≤—ã–∑–æ–≤—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      } finally {
        await client.close();
      }
    });
  });
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç server streaming —Ç–µ—Å—Ç
Future<void> _testServerStreaming(RpcHttp2CallerTransport client) async {
  final responses = <String>[];
  final completer = Completer<void>();

  final streamId = client.createStream();

  client.getMessagesForStream(streamId).listen(
    (message) {
      if (message.payload != null) {
        responses.add(utf8.decode(message.payload!));
        if (responses.length >= 2) {
          completer.complete();
        }
      }
    },
    onError: (error) => completer.completeError(error),
  );

  final metadata =
      RpcMetadata.forClientRequest('StreamService', 'ServerStream');
  await client.sendMetadata(streamId, metadata);
  await client.sendMessage(streamId, Uint8List.fromList(utf8.encode('Test')));
  await client.finishSending(streamId);

  await completer.future;
  expect(responses.length, equals(2));
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç client streaming —Ç–µ—Å—Ç
Future<void> _testClientStreaming(RpcHttp2CallerTransport client) async {
  final responseCompleter = Completer<String>();

  final streamId = client.createStream();

  client.getMessagesForStream(streamId).listen(
    (message) {
      if (message.payload != null && !responseCompleter.isCompleted) {
        responseCompleter.complete(utf8.decode(message.payload!));
      }
    },
    onError: (error) {
      if (!responseCompleter.isCompleted) {
        responseCompleter.completeError(error);
      }
    },
  );

  final metadata =
      RpcMetadata.forClientRequest('StreamService', 'ClientStream');
  await client.sendMetadata(streamId, metadata);

  for (int i = 1; i <= 2; i++) {
    await Future.delayed(
        Duration(milliseconds: 50)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await client.sendMessage(
        streamId, Uint8List.fromList(utf8.encode('Message $i')));
  }
  await client.finishSending(streamId);

  final response = await responseCompleter.future;
  expect(response, equals('Client sent 2 messages'));
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π HTTP/2 —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streaming
class Http2StreamingTestServer {
  ServerSocket? _serverSocket;
  int _port = 0;
  final List<StreamSubscription> _subscriptions = [];

  // Handlers –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ streaming
  Stream<Uint8List> Function(Uint8List)? _serverStreamingHandler;
  Future<Uint8List> Function(Stream<Uint8List>)? _clientStreamingHandler;
  Stream<Uint8List> Function(Stream<Uint8List>)? _bidirectionalHandler;

  int get port => _port;

  void setServerStreamingHandler(
      Stream<Uint8List> Function(Uint8List) handler) {
    _serverStreamingHandler = handler;
  }

  void setClientStreamingHandler(
      Future<Uint8List> Function(Stream<Uint8List>) handler) {
    _clientStreamingHandler = handler;
  }

  void setBidirectionalHandler(
      Stream<Uint8List> Function(Stream<Uint8List>) handler) {
    _bidirectionalHandler = handler;
  }

  Future<void> start() async {
    _serverSocket = await ServerSocket.bind('localhost', 0);
    _port = _serverSocket!.port;

    print('üöÄ HTTP/2 Streaming —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $_port');

    final subscription = _serverSocket!.listen((socket) {
      _handleConnection(socket);
    });

    _subscriptions.add(subscription);
  }

  Future<void> stop() async {
    for (final subscription in _subscriptions) {
      await subscription.cancel();
    }
    _subscriptions.clear();

    await _serverSocket?.close();
    _serverSocket = null;

    print('üõë HTTP/2 Streaming —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  void _handleConnection(Socket socket) {
    print(
        'üìû –ù–æ–≤–æ–µ streaming –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç ${socket.remoteAddress}:${socket.remotePort}');

    try {
      final connection = http2.ServerTransportConnection.viaSocket(socket);
      final transport =
          RpcHttp2ResponderTransport.create(connection: connection);

      final subscription = transport.incomingMessages.listen(
        (message) async {
          await _handleStreamingMessage(transport, message);
        },
        onError: (error) {
          print('‚ùå –û—à–∏–±–∫–∞ –≤ HTTP/2 streaming —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: $error');
        },
        onDone: () {
          print('üîå HTTP/2 streaming —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        },
      );

      _subscriptions.add(subscription);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTTP/2 streaming —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
      socket.destroy();
    }
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–∏–ø—ã streams
  final Map<int, String> _streamTypes = <int, String>{};

  Future<void> _handleStreamingMessage(
      RpcHttp2ResponderTransport transport, RpcTransportMessage message) async {
    try {
      if (message.isMetadataOnly) {
        final methodPath = message.methodPath ?? 'Unknown';
        print('üìã –ü–æ–ª—É—á–µ–Ω—ã streaming –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: $methodPath');

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–∏–ø stream
        _streamTypes[message.streamId] = methodPath;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        final responseMetadata = RpcMetadata.forServerInitialResponse();
        await transport.sendMetadata(message.streamId, responseMetadata);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∂–¥–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (methodPath.contains('ClientStream')) {
          await _handleClientStreaming(transport, message.streamId);
        } else if (methodPath.contains('BidirectionalStream')) {
          await _handleBidirectionalStreaming(transport, message.streamId);
        }
      } else if (message.payload != null) {
        // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        print(
            'üì¶ –ü–æ–ª—É—á–µ–Ω—ã streaming –¥–∞–Ω–Ω—ã–µ –¥–ª—è stream ${message.streamId}, —Ä–∞–∑–º–µ—Ä: ${message.payload!.length}');

        final streamType = _streamTypes[message.streamId];

        // –î–ª—è server streaming –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        if (streamType != null && streamType.contains('ServerStream')) {
          await _handleServerStreamingData(
              transport, message.streamId, message.payload!);
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ streaming —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è server streaming
  Future<void> _handleServerStreamingData(RpcHttp2ResponderTransport transport,
      int streamId, Uint8List data) async {
    if (_serverStreamingHandler == null) return;

    print('üì° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º server streaming –∑–∞–ø—Ä–æ—Å, —Ä–∞–∑–º–µ—Ä: ${data.length}');

    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ handler
      final responseStream = _serverStreamingHandler!(data);

      await for (final responseData in responseStream) {
        print(
            'üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º server streaming –æ—Ç–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä: ${responseData.length}');
        await transport.sendMessage(streamId, responseData);
        await Future.delayed(Duration(milliseconds: 20)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      }

      await transport.finishSending(streamId);
      print('‚úÖ Server streaming –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è stream $streamId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ server streaming data: $e');
    }
  }

  Future<void> _handleClientStreaming(
      RpcHttp2ResponderTransport transport, int streamId) async {
    if (_clientStreamingHandler == null) return;

    print('üì• –ó–∞–ø—É—Å–∫ client streaming –¥–ª—è stream $streamId');

    try {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      final messageController = StreamController<Uint8List>();

      // –°–ª—É—à–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∏—Ö
      final subscription = transport.getMessagesForStream(streamId).listen(
        (msg) {
          if (msg.payload != null) {
            print(
                'üì• –ü–æ–ª—É—á–µ–Ω–æ client streaming —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: ${msg.payload!.length}');
            if (!messageController.isClosed) {
              messageController.add(msg.payload!);
            }
          }

          // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—Ü –ø–æ—Ç–æ–∫–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
          if (msg.isEndOfStream) {
            print('üì• –ü–æ–ª—É—á–µ–Ω END_STREAM, –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ');
            if (!messageController.isClosed) {
              messageController.close();
            }
          }
        },
        onDone: () {
          print('üì• –ü–æ—Ç–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
          if (!messageController.isClosed) {
            messageController.close();
          }
        },
        onError: (error) {
          print('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: $error');
          if (!messageController.isClosed) {
            messageController.addError(error);
          }
        },
      );

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ handler
      final result = await _clientStreamingHandler!(messageController.stream);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      print('üì• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º client streaming –æ—Ç–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä: ${result.length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
      try {
        await transport.sendMessage(streamId, result);
        await transport.finishSending(streamId);
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ client streaming –æ—Ç–≤–µ—Ç–∞: $e');
        return;
      }

      await subscription.cancel();
      print('‚úÖ Client streaming –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è stream $streamId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ client streaming: $e');
    }
  }

  Future<void> _handleBidirectionalStreaming(
      RpcHttp2ResponderTransport transport, int streamId) async {
    if (_bidirectionalHandler == null) return;

    print('üîÑ –ó–∞–ø—É—Å–∫ bidirectional streaming –¥–ª—è stream $streamId');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      final incomingMessages = transport
          .getMessagesForStream(streamId)
          .where((msg) => msg.payload != null)
          .map((msg) => msg.payload!);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ handler –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
      final responseStream = _bidirectionalHandler!(incomingMessages);

      await for (final responseData in responseStream) {
        print(
            'üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º bidirectional –æ—Ç–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä: ${responseData.length}');
        await transport.sendMessage(streamId, responseData);
        await Future.delayed(Duration(milliseconds: 20)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      }

      await transport.finishSending(streamId);
      print('‚úÖ Bidirectional streaming –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è stream $streamId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ bidirectional streaming: $e');
    }
  }
}
