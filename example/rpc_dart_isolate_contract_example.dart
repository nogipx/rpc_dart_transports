// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: MIT

import 'dart:async';
import 'dart:math';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';

// ============================================================================
// üìã –ö–û–ù–¢–†–ê–ö–¢–´ –°–ï–†–í–ò–°–û–í
// ============================================================================

/// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ isolate —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å RPC –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
/// - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ RPC –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å isolate —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
/// - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ isolate —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è CPU-intensive –æ–ø–µ—Ä–∞—Ü–∏–π
/// - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é RPC –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å Responder/Caller –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
/// - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞–º–∏
/// –ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
abstract interface class ICalculatorContract implements IRpcContract {
  static const name = 'Calculator';
  static const methodCompute = 'compute';
  static const methodBatchCompute = 'batchCompute';
  static const methodStreamCompute = 'streamCompute';

  Future<ComputeResponse> compute(ComputeRequest request);
  Future<BatchComputeResponse> batchCompute(BatchComputeRequest request);
  Stream<ComputeStepResponse> streamCompute(Stream<ComputeRequest> requests);
}

// ============================================================================
// üì¶ –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
// ============================================================================

/// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
class ComputeRequest {
  final String operationType;
  final List<double> numbers;
  final Map<String, dynamic> parameters;

  const ComputeRequest({
    required this.operationType,
    required this.numbers,
    this.parameters = const {},
  });

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  factory ComputeRequest.generateLarge(int numbersCount) {
    final random = Random();
    final numbers =
        List.generate(numbersCount, (_) => random.nextDouble() * 1000);

    return ComputeRequest(
      operationType: 'complexAnalysis',
      numbers: numbers,
      parameters: {
        'iterations': 10000,
        'precision': 0.001,
        'algorithm': 'monte_carlo',
        'timestamp': DateTime.now().toIso8601String(),
      },
    );
  }
}

/// –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
class ComputeResponse {
  final double result;
  final Map<String, dynamic> details;
  final Duration processingTime;
  final bool success;

  const ComputeResponse({
    required this.result,
    required this.details,
    required this.processingTime,
    required this.success,
  });
}

/// –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞–∫–µ—Ç–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
class BatchComputeRequest {
  final List<ComputeRequest> requests;
  final bool parallel;

  const BatchComputeRequest({
    required this.requests,
    this.parallel = true,
  });
}

/// –û—Ç–≤–µ—Ç –Ω–∞ –ø–∞–∫–µ—Ç–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
class BatchComputeResponse {
  final List<ComputeResponse> results;
  final Duration totalProcessingTime;
  final int successCount;

  const BatchComputeResponse({
    required this.results,
    required this.totalProcessingTime,
    required this.successCount,
  });
}

/// –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Ç–æ–∫–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
class ComputeStepResponse {
  final String requestId;
  final double intermediateResult;
  final String step;
  final bool isComplete;

  const ComputeStepResponse({
    required this.requestId,
    required this.intermediateResult,
    required this.step,
    required this.isComplete,
  });
}

// ============================================================================
// üéØ –†–ï–°–ü–û–ù–î–ï–† (–°–µ—Ä–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤ –∏–∑–æ–ª—è—Ç–µ)
// ============================================================================

/// –†–µ—Å–ø–æ–Ω–¥–µ—Ä –¥–ª—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
final class CalculatorResponder extends RpcResponderContract
    implements ICalculatorContract {
  CalculatorResponder() : super(ICalculatorContract.name) {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã
    addUnaryMethod<ComputeRequest, ComputeResponse>(
      methodName: ICalculatorContract.methodCompute,
      handler: compute,
    );

    addUnaryMethod<BatchComputeRequest, BatchComputeResponse>(
      methodName: ICalculatorContract.methodBatchCompute,
      handler: batchCompute,
    );

    addBidirectionalMethod<ComputeRequest, ComputeStepResponse>(
      methodName: ICalculatorContract.methodStreamCompute,
      handler: streamCompute,
    );
  }

  @override
  Future<ComputeResponse> compute(ComputeRequest request,
      {RpcContext? context}) async {
    final stopwatch = Stopwatch()..start();
    print(
        'üßÆ [Calculator] –û–±—Ä–∞–±–æ—Ç–∫–∞ ${request.operationType} —Å ${request.numbers.length} —á–∏—Å–ª–∞–º–∏');

    // CPU-intensive –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∏–∑–æ–ª—è—Ç–∞!)
    double result = 0.0;
    final details = <String, dynamic>{};

    switch (request.operationType) {
      case 'sum':
        result = request.numbers.reduce((a, b) => a + b);
        details['operation'] = 'sum';
        break;
      case 'product':
        result = request.numbers.reduce((a, b) => a * b);
        details['operation'] = 'product';
        break;
      case 'mean':
        result =
            request.numbers.reduce((a, b) => a + b) / request.numbers.length;
        details['operation'] = 'mean';
        details['count'] = request.numbers.length;
        break;
      case 'variance':
        final mean =
            request.numbers.reduce((a, b) => a + b) / request.numbers.length;
        final squaredDiffs =
            request.numbers.map((x) => (x - mean) * (x - mean));
        result = squaredDiffs.reduce((a, b) => a + b) / request.numbers.length;
        details['operation'] = 'variance';
        details['mean'] = mean;
        break;
      case 'complexAnalysis':
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        final iterations = request.parameters['iterations'] as int? ?? 1000;
        double tempResult = 0.0;
        for (int i = 0; i < iterations; i++) {
          for (final number in request.numbers) {
            tempResult += sin(number * i) * cos(number / (i + 1));
          }
        }
        result = tempResult / iterations;
        details['operation'] = 'complexAnalysis';
        details['iterations'] = iterations;
        details['numbersProcessed'] = request.numbers.length;
        break;
      default:
        result = request.numbers.isEmpty ? 0.0 : request.numbers.first;
        details['operation'] = 'identity';
    }

    stopwatch.stop();
    print(
        '‚úÖ [Calculator] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${stopwatch.elapsedMilliseconds}–º—Å');

    return ComputeResponse(
      result: result,
      details: details,
      processingTime: stopwatch.elapsed,
      success: true,
    );
  }

  @override
  Future<BatchComputeResponse> batchCompute(BatchComputeRequest request,
      {RpcContext? context}) async {
    final stopwatch = Stopwatch()..start();
    print(
        'üìä [Calculator] –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${request.requests.length} –∑–∞–ø—Ä–æ—Å–æ–≤');

    final results = <ComputeResponse>[];
    int successCount = 0;

    if (request.parallel) {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–∑–æ–ª—è—Ç–∞)
      final futures = request.requests.map((req) async {
        try {
          final result = await compute(req);
          if (result.success) successCount++;
          return result;
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: $e');
          return ComputeResponse(
            result: 0.0,
            details: {'error': e.toString()},
            processingTime: Duration.zero,
            success: false,
          );
        }
      });

      results.addAll(await Future.wait(futures));
    } else {
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      for (final req in request.requests) {
        try {
          final result = await compute(req);
          results.add(result);
          if (result.success) successCount++;
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: $e');
          results.add(ComputeResponse(
            result: 0.0,
            details: {'error': e.toString()},
            processingTime: Duration.zero,
            success: false,
          ));
        }
      }
    }

    stopwatch.stop();
    print(
        '‚úÖ [Calculator] –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${stopwatch.elapsedMilliseconds}–º—Å');

    return BatchComputeResponse(
      results: results,
      totalProcessingTime: stopwatch.elapsed,
      successCount: successCount,
    );
  }

  @override
  Stream<ComputeStepResponse> streamCompute(Stream<ComputeRequest> requests,
      {RpcContext? context}) async* {
    await for (final request in requests) {
      final requestId = 'req_${DateTime.now().millisecondsSinceEpoch}';

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—ç—Ç–∞–ø–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      final steps = ['parsing', 'validation', 'computation', 'optimization'];
      double currentResult = 0.0;

      for (int i = 0; i < steps.length; i++) {
        await Future.delayed(Duration(milliseconds: 50));

        // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        switch (steps[i]) {
          case 'parsing':
            currentResult = request.numbers.length.toDouble();
            break;
          case 'validation':
            currentResult =
                request.numbers.where((n) => n > 0).length.toDouble();
            break;
          case 'computation':
            currentResult = request.numbers.isEmpty
                ? 0.0
                : request.numbers.reduce((a, b) => a + b) /
                    request.numbers.length;
            break;
          case 'optimization':
            currentResult = currentResult * 1.1; // "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π" —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            break;
        }

        final response = ComputeStepResponse(
          requestId: requestId,
          intermediateResult: currentResult,
          step: steps[i],
          isComplete: i == steps.length - 1,
        );

        yield response;
      }
    }
  }
}

// ============================================================================
// üöÄ –ö–ê–õ–ï–† (–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
// ============================================================================

/// –ö–∞–ª–µ—Ä –¥–ª—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
final class CalculatorCaller extends RpcCallerContract
    implements ICalculatorContract {
  CalculatorCaller(RpcCallerEndpoint endpoint)
      : super(ICalculatorContract.name, endpoint);

  @override
  Future<ComputeResponse> compute(ComputeRequest request) async {
    return callUnary<ComputeRequest, ComputeResponse>(
      methodName: ICalculatorContract.methodCompute,
      request: request,
    );
  }

  @override
  Future<BatchComputeResponse> batchCompute(BatchComputeRequest request) async {
    return callUnary<BatchComputeRequest, BatchComputeResponse>(
      methodName: ICalculatorContract.methodBatchCompute,
      request: request,
    );
  }

  @override
  Stream<ComputeStepResponse> streamCompute(Stream<ComputeRequest> requests) {
    return callBidirectionalStream<ComputeRequest, ComputeStepResponse>(
      methodName: ICalculatorContract.methodStreamCompute,
      requests: requests,
    );
  }
}

// ============================================================================
// üéØ MAIN DEMO
// ============================================================================

Future<void> main() async {
  print('üöÄ RPC Dart + Isolate Transport Demo');
  print('=' * 50);

  // –°–æ–∑–¥–∞–µ–º isolate —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  final isolateResult = await RpcIsolateTransport.spawn(
    entrypoint: isolateServerEntrypoint,
    customParams: {},
    isolateId: 'calculator-demo',
    debugName: 'Calculator Demo Server',
  );

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  final callerEndpoint = RpcCallerEndpoint(transport: isolateResult.transport);
  final calculator = CalculatorCaller(callerEndpoint);

  try {
    // ================================================================
    // üßÆ –ü–†–û–°–¢–´–ï –í–´–ß–ò–°–õ–ï–ù–ò–Ø
    // ================================================================

    print('\nüßÆ === –ü–†–û–°–¢–´–ï –í–´–ß–ò–°–õ–ï–ù–ò–Ø ===');

    final simpleRequest = ComputeRequest(
      operationType: 'mean',
      numbers: [1.0, 2.0, 3.0, 4.0, 5.0],
    );

    final simpleResponse = await calculator.compute(simpleRequest);
    if (simpleResponse.success) {
      print('‚úÖ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${simpleResponse.result}');
      print('   ‚è±Ô∏è –í—Ä–µ–º—è: ${simpleResponse.processingTime.inMilliseconds}–º—Å');
    }

    // ================================================================
    // ‚ö° CPU-INTENSIVE –í–´–ß–ò–°–õ–ï–ù–ò–Ø (–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏–∑–æ–ª—è—Ç–∞!)
    // ================================================================

    print('\n‚ö° === CPU-INTENSIVE –í–´–ß–ò–°–õ–ï–ù–ò–Ø ===');

    final largeRequest = ComputeRequest.generateLarge(50000); // 50K —á–∏—Å–µ–ª
    print('üìä –°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å —Å ${largeRequest.numbers.length} —á–∏—Å–ª–∞–º–∏');

    final processingStopwatch = Stopwatch()..start();
    final complexResponse = await calculator.compute(largeRequest);
    processingStopwatch.stop();

    if (complexResponse.success) {
      print('‚úÖ –°–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
      print('   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∏—Å–µ–ª: ${largeRequest.numbers.length}');
      print('   üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${complexResponse.result.toStringAsFixed(4)}');
      print(
          '   ‚è±Ô∏è –í—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä: ${processingStopwatch.elapsedMilliseconds}–º—Å');
      print(
          '   ‚öôÔ∏è –í—Ä–µ–º—è –≤ –∏–∑–æ–ª—è—Ç–µ: ${complexResponse.processingTime.inMilliseconds}–º—Å');
    }

    // ================================================================
    // üì¶ –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
    // ================================================================

    print('\nüì¶ === –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ===');

    final batchRequests = [
      ComputeRequest(
          operationType: 'sum',
          numbers: List.generate(1000, (i) => i.toDouble())),
      ComputeRequest(operationType: 'product', numbers: [1.1, 2.2, 3.3]),
      ComputeRequest(
          operationType: 'variance',
          numbers: List.generate(5000, (i) => (i * 0.1))),
    ];

    final batchRequest =
        BatchComputeRequest(requests: batchRequests, parallel: true);
    final batchResponse = await calculator.batchCompute(batchRequest);

    print('‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    print('   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${batchResponse.results.length}');
    print('   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${batchResponse.successCount}');
    print(
        '   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${batchResponse.totalProcessingTime.inMilliseconds}–º—Å');

    for (int i = 0; i < batchResponse.results.length; i++) {
      final result = batchResponse.results[i];
      print(
          '      ${i + 1}. ${result.details['operation']}: ${result.result.toStringAsFixed(4)}');
    }

    // ================================================================
    // üåä BIDIRECTIONAL STREAMING (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ isolate —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ!)
    // ================================================================

    print('\nüåä === BIDIRECTIONAL STREAMING ===');

    // –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    final streamingRequests = Stream.fromIterable([
      ComputeRequest(operationType: 'mean', numbers: [10.0, 20.0, 30.0]),
      ComputeRequest(operationType: 'sum', numbers: [1.0, 2.0, 3.0, 4.0]),
      ComputeRequest(
          operationType: 'variance', numbers: [5.0, 15.0, 25.0, 35.0]),
    ]).asyncMap((request) async {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
      await Future.delayed(Duration(milliseconds: 100));
      return request;
    });

    print('üìä –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
    await for (final step in calculator.streamCompute(streamingRequests)) {
      final status = step.isComplete ? '‚úÖ' : 'üîÑ';
      print(
          '   $status ${step.step}: ${step.intermediateResult.toStringAsFixed(2)}');
    }

    print('\nüèÅ –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    // ================================================================
    // üéØ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê ISOLATE –¢–†–ê–ù–°–ü–û–†–¢–ê
    // ================================================================

    print('\nüéØ === –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê ISOLATE –¢–†–ê–ù–°–ü–û–†–¢–ê ===');
    print('‚úÖ CPU-intensive –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç UI');
    print('‚úÖ –ò—Å—Ç–∏–Ω–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –Ω–∞ –º–Ω–æ–≥–æ—è–¥–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö');
    print('‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ - –∫—Ä–∞—à –∏–∑–æ–ª—è—Ç–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫');
    print('‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤');
    print('‚úÖ –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ RPC –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ–∂–¥—É –∏–∑–æ–ª—è—Ç–∞–º–∏');
    print('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞');
  } catch (e, stackTrace) {
    print('‚ùå –û—à–∏–±–∫–∞: $e');
    print('üìç Stack trace: $stackTrace');
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    await callerEndpoint.close();
    isolateResult.kill();
    print('\nüèÅ Demo –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

/// Entry point –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∏–∑–æ–ª—è—Ç–µ
@pragma('vm:entry-point')
void isolateServerEntrypoint(
    IRpcTransport transport, Map<String, dynamic> params) {
  print('üñ•Ô∏è [Isolate Server] –ó–∞–ø—É—â–µ–Ω Calculator RPC —Å–µ—Ä–≤–µ—Ä');

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RPC endpoint –≤ –∏–∑–æ–ª—è—Ç–µ
  final responderEndpoint = RpcResponderEndpoint(transport: transport);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
  responderEndpoint.registerServiceContract(CalculatorResponder());

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  responderEndpoint.start();

  print('‚úÖ [Isolate Server] Calculator —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
}
