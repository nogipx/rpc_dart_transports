// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: MIT

import 'dart:async';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';

/// –ú–æ—â–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ RPC —Å –Ω–∞—Å—Ç–æ—è—â–∏–º HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º! üöÄ
Future<void> main() async {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  RpcLogger.setDefaultMinLogLevel(RpcLoggerLevel.debug);

  print('üöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –¢–ò–ü–û–í RPC –° HTTP/2 –¢–†–ê–ù–°–ü–û–†–¢–û–ú === üöÄ\n');
  print(
      'üì± –ü–æ–∫–∞–∂–µ–º Unary, Server Streaming, Client Streaming –∏ Bidirectional!\n');

  // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP/2 —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞—Å—Ç–æ—è—â–∏–º RPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
  print('üì° –ó–∞–ø—É—Å–∫ HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞ —Å RPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º...');
  final serverPort = 8765;
  final rpcServer = RpcHttp2Server.createWithContracts(
    port: serverPort,
    logger: RpcLogger('Http2Server'),
    contracts: [
      _DemoServiceContract(),
    ],
  );
  await rpcServer.start();

  try {
    // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    await Future.delayed(Duration(milliseconds: 500));

    // –°–æ–∑–¥–∞–µ–º HTTP/2 –∫–ª–∏–µ–Ω—Ç–∞
    print('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ HTTP/2 –∫–ª–∏–µ–Ω—Ç–∞...');
    final transport = await RpcHttp2CallerTransport.connect(
      host: 'localhost',
      port: serverPort,
      logger: RpcLogger('Http2Client'),
    );

    try {
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π endpoint
      final callerEndpoint = RpcCallerEndpoint(
        transport: transport,
        debugLabel: 'HttpClientEndpoint',
      );

      print('\nüéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –¢–ò–ü–û–í RPC === üéØ\n');

      // 1. Unary RPC - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å, –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
      await _demonstrateUnaryRpc(callerEndpoint);

      // 2. Server Streaming RPC - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
      await _demonstrateServerStreamingRpc(callerEndpoint);

      // 3. Client Streaming RPC - –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
      await _demonstrateClientStreamingRpc(callerEndpoint);

      // 4. Bidirectional Streaming RPC - –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
      await _demonstrateBidirectionalRpc(callerEndpoint);

      print('\nüéâ === –í–°–ï –¢–ò–ü–´ RPC –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û! === üéâ');
      print('üî• HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ–∫–∞–∑–∞–ª —Å–µ–±—è –Ω–∞ –≤—Å–µ 100%!');
    } finally {
      await transport.close();
      print('\nüîå HTTP/2 –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç');
    }
  } finally {
    await rpcServer.stop();
    print('üì° HTTP/2 —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

/// 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Unary RPC (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å -> –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç)
Future<void> _demonstrateUnaryRpc(RpcCallerEndpoint endpoint) async {
  print('üéØ 1. UNARY RPC - Echo —Å–µ—Ä–≤–∏—Å');
  print('   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: "Hello, HTTP/2 Unary World!"');

  try {
    final response = await endpoint.unaryRequest<RpcString, RpcString>(
      serviceName: 'DemoService',
      methodName: 'Echo',
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
      request: RpcString('Hello, HTTP/2 Unary World!'),
    );

    print('   ‚úÖ –ü–æ–ª—É—á–∏–ª–∏: "${response.value}"');
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞: $e');
  }
  print('');
}

/// 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Server Streaming RPC (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å -> –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤)
Future<void> _demonstrateServerStreamingRpc(RpcCallerEndpoint endpoint) async {
  print('üéØ 2. SERVER STREAMING RPC - –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
  print('   –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º: –ø–æ—Ç–æ–∫ –∏–∑ 5 —Å–æ–æ–±—â–µ–Ω–∏–π');

  try {
    final responseStream = endpoint.serverStream<RpcString, RpcString>(
      serviceName: 'DemoService',
      methodName: 'GetStream',
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
      request: RpcString('–î–∞–π—Ç–µ –º–Ω–µ HTTP/2 –ø–æ—Ç–æ–∫!'),
    );

    int count = 0;
    await for (final response in responseStream) {
      count++;
      print('   üì® –°–æ–æ–±—â–µ–Ω–∏–µ $count: "${response.value}"');
    }
    print('   ‚úÖ –ü–æ–ª—É—á–∏–ª–∏ $count —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç HTTP/2 —Å–µ—Ä–≤–µ—Ä–∞');
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞: $e');
  }
  print('');
}

/// 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Client Streaming RPC (–ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ -> –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç)
Future<void> _demonstrateClientStreamingRpc(RpcCallerEndpoint endpoint) async {
  print('üéØ 3. CLIENT STREAMING RPC - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ HTTP/2 —Å–µ—Ä–≤–µ—Ä—É');
  print('   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: 4 —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä—É');

  try {
    final messages = [
      RpcString('HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏–µ #1'),
      RpcString('HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏–µ #2'),
      RpcString('HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏–µ #3'),
      RpcString('HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏–µ #4'),
    ];

    // –°–æ–∑–¥–∞–µ–º Stream –∑–∞–Ω–æ–≤–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "already listened to"
    Stream<RpcString> createRequestStream() {
      return Stream.fromIterable(messages).asyncMap((msg) async {
        print('   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: "${msg.value}"');
        await Future.delayed(Duration(milliseconds: 200));
        return msg;
      });
    }

    final getResponse = endpoint.clientStream<RpcString, RpcString>(
      serviceName: 'DemoService',
      methodName: 'AccumulateMessages',
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
    );

    final response = await getResponse(createRequestStream());
    print('   ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: "${response.value}"');
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞: $e');
  }
  print('');
}

/// 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Bidirectional Streaming RPC (–ø–æ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ <-> –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤)
Future<void> _demonstrateBidirectionalRpc(RpcCallerEndpoint endpoint) async {
  print('üéØ 4. BIDIRECTIONAL STREAMING RPC - HTTP/2 —á–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
  print('   –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—é—é HTTP/2 —Å–≤—è–∑—å');

  try {
    final messages = [
      RpcString('–ü—Ä–∏–≤–µ—Ç, HTTP/2 —Å–µ—Ä–≤–µ—Ä!'),
      RpcString('–ö–∞–∫ –¥–µ–ª–∞ —Å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º?'),
      RpcString('HTTP/2 —Ä—É–ª–∏—Ç!'),
    ];

    final requestStream = Stream.fromIterable(messages).asyncMap((msg) async {
      await Future.delayed(Duration(milliseconds: 300));
      print('   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: "${msg.value}"');
      return msg;
    });

    final responseStream = endpoint.bidirectionalStream<RpcString, RpcString>(
      serviceName: 'DemoService',
      methodName: 'Chat',
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
      requests: requestStream,
    );

    int count = 0;
    await for (final response in responseStream) {
      count++;
      print('   üì® –û—Ç–≤–µ—Ç $count: "${response.value}"');
    }
    print('   ‚úÖ HTTP/2 —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±–º–µ–Ω—è–ª–∏—Å—å $count —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏');
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞: $e');
  }
  print('');
}

// –°—Ç–∞—Ä—ã–π _Http2RpcServer —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º RpcHttp2Server!

/// –ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ RPC —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è HTTP/2
final class _DemoServiceContract extends RpcResponderContract {
  _DemoServiceContract() : super('DemoService');

  @override
  void setup() {
    // 1. Unary RPC - Echo –º–µ—Ç–æ–¥
    addUnaryMethod<RpcString, RpcString>(
      methodName: 'Echo',
      handler: (request, {context}) async {
        final message = request.value;
        print('üîÑ HTTP/2 Echo: –ø–æ–ª—É—á–µ–Ω "$message"');
        return RpcString('HTTP/2 Echo: $message');
      },
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTTP/2 –ø—Ä–µ—Ñ–∏–∫—Å–æ–º Echo',
    );

    // 2. Server Streaming RPC - –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    addServerStreamMethod<RpcString, RpcString>(
      methodName: 'GetStream',
      handler: (request, {context}) async* {
        final message = request.value;
        print('üîÑ HTTP/2 GetStream: –∑–∞–ø—Ä–æ—Å "$message"');

        for (int i = 1; i <= 5; i++) {
          await Future.delayed(Duration(milliseconds: 200));
          yield RpcString('HTTP/2 –ø–æ—Ç–æ–∫ #$i –∏–∑ 5: –æ—Ç–≤–µ—Ç –Ω–∞ "$message"');
        }
        print('üîÑ HTTP/2 GetStream: –∑–∞–≤–µ—Ä—à–µ–Ω');
      },
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
      description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫ –∏–∑ 5 HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏–π',
    );

    // 3. Client Streaming RPC - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    addClientStreamMethod<RpcString, RpcString>(
      methodName: 'AccumulateMessages',
      handler: (requestStream, {context}) async {
        print('üîÑ HTTP/2 AccumulateMessages: –Ω–∞—á–∞—Ç');

        final messages = <String>[];
        await for (final request in requestStream) {
          messages.add(request.value);
          print('üîÑ HTTP/2 AccumulateMessages: –ø–æ–ª—É—á–µ–Ω–æ "${request.value}"');
        }

        final result =
            'HTTP/2 –Ω–∞–∫–æ–ø–ª–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.join(", ")}';
        print('üîÑ HTTP/2 AccumulateMessages: –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º');
        return RpcString(result);
      },
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
      description: '–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –≤—Å–µ HTTP/2 —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É',
    );

    // 4. Bidirectional Streaming RPC - —á–∞—Ç
    addBidirectionalMethod<RpcString, RpcString>(
      methodName: 'Chat',
      handler: (requestStream, {context}) async* {
        print('üîÑ HTTP/2 Chat: –Ω–∞—á–∞—Ç');

        await for (final request in requestStream) {
          final message = request.value;
          print('üîÑ HTTP/2 Chat: –ø–æ–ª—É—á–µ–Ω–æ "$message"');

          // –û—Ç–≤–µ—á–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
          await Future.delayed(Duration(milliseconds: 100));
          yield RpcString('HTTP/2 —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞: $message');
        }

        print('üîÑ HTTP/2 Chat: –∑–∞–≤–µ—Ä—à–µ–Ω');
      },
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
      description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π HTTP/2 —á–∞—Ç —Å —ç—Ö–æ-–æ—Ç–≤–µ—Ç–∞–º–∏',
    );
  }
}
