// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: MIT

import 'dart:async';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';

/// üöÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä HTTP/2 RPC —Å–µ—Ä–≤–µ—Ä–∞
Future<void> main() async {
  RpcLogger.setDefaultMinLogLevel(RpcLoggerLevel.info);

  const port = 8080;

  // === –°–û–ó–î–ê–ï–ú –°–ï–†–í–ï–† ===
  final server = RpcHttp2Server(
    port: port,
    onEndpointCreated: (endpoint) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞ –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      endpoint.registerServiceContract(EchoService());
    },
  );

  try {
    await server.start();
    print('üöÄ HTTP/2 —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $port');

    // === –°–û–ó–î–ê–ï–ú –ö–õ–ò–ï–ù–¢–ê ===
    final transport = await RpcHttp2CallerTransport.connect(
      host: 'localhost',
      port: port,
    );

    try {
      final client = RpcCallerEndpoint(transport: transport);

      // === –í–´–ü–û–õ–ù–Ø–ï–ú RPC –í–´–ó–û–í ===
      final response = await client.unaryRequest<RpcString, RpcString>(
        serviceName: 'Echo',
        methodName: 'Say',
        requestCodec: RpcString.codec,
        responseCodec: RpcString.codec,
        request: RpcString('–ü—Ä–∏–≤–µ—Ç, HTTP/2!'),
      );

      print('üì® –û—Ç–≤–µ—Ç: "${response.value}"');
    } finally {
      await transport.close();
    }

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await Future.delayed(Duration(milliseconds: 100));
  } finally {
    await server.stop();
  }

  print('‚úÖ –ì–æ—Ç–æ–≤–æ!');
}

/// –ü—Ä–æ—Å—Ç–æ–π Echo —Å–µ—Ä–≤–∏—Å
final class EchoService extends RpcResponderContract {
  EchoService() : super('Echo');

  @override
  void setup() {
    addUnaryMethod<RpcString, RpcString>(
      methodName: 'Say',
      handler: (request, {context}) async => RpcString('–≠—Ö–æ: ${request.value}'),
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
    );
  }
}
