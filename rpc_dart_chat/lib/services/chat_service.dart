import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';

import '../models/chat_models.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º
class ChatService extends ChangeNotifier {
  static const String _defaultRoom = 'general';

  RouterClientWithReconnect? _routerClient;
  String? _clientId;
  String? _currentUsername;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
  final Map<String, List<ChatMessage>> _messagesByRoom = {_defaultRoom: []};
  final List<ChatMessage> _privateMessages = [];
  final Set<UserProfile> _onlineUsers = {};
  final Set<ChatRoom> _availableRooms = {};
  String _currentRoom = _defaultRoom;

  // –°—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∞–Ω–∏—è
  final Map<String, Timer> _typingTimers = {};
  final Set<String> _currentlyTyping = {};

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  ReconnectState _connectionState = ReconnectState.disconnected;

  // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Timer? _updateTimer;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  List<ChatMessage> get currentMessages => _messagesByRoom[_currentRoom] ?? [];
  List<ChatMessage> get privateMessages => _privateMessages;
  Set<UserProfile> get onlineUsers => _onlineUsers;
  Set<ChatRoom> get availableRooms => _availableRooms;
  String get currentRoom => _currentRoom;
  String? get currentUsername => _currentUsername;
  String? get clientId => _clientId;
  bool get isConnected =>
      _routerClient != null && _clientId != null && _connectionState == ReconnectState.connected;
  Set<String> get currentlyTyping => _currentlyTyping;
  ReconnectState get connectionState => _connectionState;

  /// –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Ä–æ—É—Ç–µ—Ä—É
  Future<void> connect({
    required String serverUrl,
    required String username,
    RpcLogger? logger,
  }) async {
    try {
      _currentUsername = username;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      _connectionState = ReconnectState.reconnecting;
      notifyListeners();

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      _routerClient = RouterClientWithReconnect(
        serverUri: Uri.parse(serverUrl),
        reconnectConfig: ReconnectConfig(
          strategy: ReconnectStrategy.exponentialBackoff,
          enableJitter: true,
        ),
        logger: logger,
      );

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      await _routerClient!.connect();

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
      _clientId = await _routerClient!.register(
        clientName: username,
        groups: [_currentRoom],
        metadata: {
          'platform': 'flutter',
          'version': '1.0.0',
          'joinedAt': DateTime.now().millisecondsSinceEpoch,
        },
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º P2P
      await _routerClient!.initializeP2P(
        onP2PMessage: _handleP2PMessage,
        filterRouterHeartbeats: true,
      );

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      await _routerClient!.subscribeToEvents();
      _routerClient!.events.listen(_handleRouterEvent);

      // –°–ª—É—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      _routerClient!.connectionState.listen((state) {
        _connectionState = state;

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        if (state == ReconnectState.connected) {
          _startPeriodicUpdates();
        } else {
          _stopPeriodicUpdates();
        }

        notifyListeners();
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ
      _connectionState = ReconnectState.connected;

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
      _availableRooms.add(
        ChatRoom(
          id: _defaultRoom,
          name: '–û–±—â–∞—è',
          description: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è',
          createdAt: DateTime.now(),
        ),
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      _addMessage(
        ChatMessage.system(message: '‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, $username!', room: _currentRoom),
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await _updateOnlineUsers();

      notifyListeners();
    } catch (e) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ disconnected
      _connectionState = ReconnectState.disconnected;
      notifyListeners();
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
    }
  }

  /// –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —á–∞—Ç–∞
  Future<void> disconnect() async {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    _stopPeriodicUpdates();

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø–µ—á–∞—Ç–∞–Ω–∏—è
    for (final timer in _typingTimers.values) {
      timer.cancel();
    }
    _typingTimers.clear();
    _currentlyTyping.clear();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await _routerClient?.dispose();
    _routerClient = null;
    _clientId = null;

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    _messagesByRoom.clear();
    _privateMessages.clear();
    _onlineUsers.clear();
    _availableRooms.clear();
    _currentRoom = _defaultRoom;
    _connectionState = ReconnectState.disconnected;

    notifyListeners();
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
  Future<void> sendMessage(String text) async {
    if (!isConnected || text.trim().isEmpty) return;

    final message = ChatMessage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      username: _currentUsername!,
      message: text.trim(),
      room: _currentRoom,
      timestamp: DateTime.now(),
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä
    await _routerClient!.sendMulticast(_currentRoom, {'chatMessage': message.toJson()});

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    _addMessage(message);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    await _stopTyping();
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  Future<void> sendPrivateMessage(String targetUserId, String text) async {
    if (!isConnected || text.trim().isEmpty) return;

    final message = ChatMessage.private(
      username: _currentUsername!,
      message: text.trim(),
      targetUserId: targetUserId,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä
    await _routerClient!.sendUnicast(targetUserId, {'privateMessage': message.toJson()});

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    _privateMessages.add(message);
    notifyListeners();
  }

  /// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  Future<void> joinRoom(String roomId) async {
    if (!isConnected || roomId == _currentRoom) return;

    final oldRoom = _currentRoom;
    _currentRoom = roomId;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Ä–æ—É—Ç–µ—Ä–µ
    await _routerClient!.updateMetadata({'currentRoom': roomId, 'previousRoom': oldRoom});

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!_messagesByRoom.containsKey(roomId)) {
      _messagesByRoom[roomId] = [];
    }

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    _addMessage(
      ChatMessage.system(message: 'üö™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É "$roomId"', room: roomId),
    );

    // –û—á–∏—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—á–∞—Ç–∞–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–Ω–∞—Ç—ã
    _currentlyTyping.clear();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    _updateOnlineUsers();

    notifyListeners();
  }

  /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
  Future<void> createRoom(String name, String? description) async {
    if (!isConnected) return;

    final room = ChatRoom(
      id: _generateRoomId(name),
      name: name,
      description: description,
      createdAt: DateTime.now(),
      createdBy: _clientId!,
      members: {_clientId!},
    );

    _availableRooms.add(room);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await _routerClient!.sendBroadcast({'roomCreated': room.toJson()});

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    await joinRoom(room.id);

    notifyListeners();
  }

  /// –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—á–∞—Ç–∞–Ω–∏–µ
  Future<void> startTyping() async {
    if (!isConnected) return;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—á–∞—Ç–∞–Ω–∏–∏
    await _routerClient!.sendMulticast(_currentRoom, {
      'typing': {'username': _currentUsername!, 'room': _currentRoom, 'action': 'start'},
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    _typingTimers[_currentUsername!]?.cancel();
    _typingTimers[_currentUsername!] = Timer(Duration(seconds: 3), () {
      _stopTyping();
    });
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—á–∞—Ç–∞–Ω–∏–µ
  Future<void> _stopTyping() async {
    if (!isConnected) return;

    _typingTimers[_currentUsername!]?.cancel();
    _typingTimers.remove(_currentUsername!);

    await _routerClient!.sendMulticast(_currentRoom, {
      'typing': {'username': _currentUsername!, 'room': _currentRoom, 'action': 'stop'},
    });
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
  Future<void> addReaction(String messageId, String emoji) async {
    if (!isConnected) return;

    await _routerClient!.sendMulticast(_currentRoom, {
      'reaction': {
        'messageId': messageId,
        'emoji': emoji,
        'action': 'add',
        'username': _currentUsername!,
      },
    });
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è
  Future<void> reconnect() async {
    if (_routerClient != null) {
      await _routerClient!.reconnect();
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç P2P —Å–æ–æ–±—â–µ–Ω–∏—è
  void _handleP2PMessage(RouterMessage message) {
    final payload = message.payload;
    if (payload == null) return;

    // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    if (payload.containsKey('chatMessage')) {
      final chatMessage = ChatMessage.fromJson(payload['chatMessage']);
      _addMessage(chatMessage);
    }
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    else if (payload.containsKey('privateMessage')) {
      final privateMessage = ChatMessage.fromJson(payload['privateMessage']);
      _privateMessages.add(privateMessage);
      notifyListeners();
    }
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—á–∞—Ç–∞–Ω–∏–∏
    else if (payload.containsKey('typing')) {
      _handleTypingNotification(payload['typing']);
    }
    // –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    else if (payload.containsKey('reaction')) {
      _handleReaction(payload['reaction']);
    }
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
    else if (payload.containsKey('roomCreated')) {
      final room = ChatRoom.fromJson(payload['roomCreated']);
      _availableRooms.add(room);
      notifyListeners();
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Ä–æ—É—Ç–µ—Ä–∞
  void _handleRouterEvent(RouterEvent event) {
    switch (event.type) {
      case RouterEventType.clientConnected:
        final username = event.data['clientName'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        _addMessage(
          ChatMessage.system(message: 'üëã $username –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É', room: _currentRoom),
        );
        _updateOnlineUsers();
        break;

      case RouterEventType.clientDisconnected:
        final clientId = event.data['clientId'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        _onlineUsers.removeWhere((user) => user.userId == clientId);
        _addMessage(ChatMessage.system(message: 'üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç', room: _currentRoom));
        notifyListeners();
        break;

      case RouterEventType.topologyChanged:
        // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        _updateOnlineUsers();
        break;

      case RouterEventType.routerStats:
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        break;

      default:
        break;
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  void _startPeriodicUpdates() {
    _stopPeriodicUpdates(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    _updateTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      _updateOnlineUsers();
    });

    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    _updateOnlineUsers();
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  void _stopPeriodicUpdates() {
    _updateTimer?.cancel();
    _updateTimer = null;
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—á–∞—Ç–∞–Ω–∏–∏
  void _handleTypingNotification(Map<String, dynamic> data) {
    final username = data['username'] as String?;
    final room = data['room'] as String?;
    final action = data['action'] as String?;

    if (username == null || room != _currentRoom || username == _currentUsername) {
      return;
    }

    if (action == 'start') {
      _currentlyTyping.add(username);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      Timer(Duration(seconds: 5), () {
        _currentlyTyping.remove(username);
        notifyListeners();
      });
    } else if (action == 'stop') {
      _currentlyTyping.remove(username);
    }

    notifyListeners();
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏
  void _handleReaction(Map<String, dynamic> data) {
    final messageId = data['messageId'] as String?;
    final emoji = data['emoji'] as String?;
    final action = data['action'] as String?;

    if (messageId == null || emoji == null || action == null) return;

    final messages = _messagesByRoom[_currentRoom] ?? [];
    for (int i = 0; i < messages.length; i++) {
      if (messages[i].id == messageId) {
        if (action == 'add') {
          messages[i] = messages[i].addReaction(emoji);
        } else if (action == 'remove') {
          messages[i] = messages[i].removeReaction(emoji);
        }
        notifyListeners();
        break;
      }
    }
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
  void _addMessage(ChatMessage message) {
    final roomMessages = _messagesByRoom[message.room] ?? [];
    roomMessages.add(message);
    _messagesByRoom[message.room] = roomMessages;

    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ

    notifyListeners();
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> _updateOnlineUsers() async {
    if (!isConnected) return;

    try {
      final clients = await _routerClient!.getOnlineClients();
      final previousCount = _onlineUsers.length;

      _onlineUsers.clear();

      for (final client in clients) {
        _onlineUsers.add(
          UserProfile(
            userId: client.clientId,
            username: client.clientName ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            lastSeen: client.lastActivity,
            rooms: Set.from(client.groups),
            metadata: client.metadata,
          ),
        );
      }

      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (_onlineUsers.length != previousCount) {
        debugPrint('üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: ${_onlineUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω');
      }

      notifyListeners();
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');

      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      if (_connectionState == ReconnectState.connected) {
        Timer(const Duration(seconds: 5), () {
          if (isConnected) {
            _updateOnlineUsers();
          }
        });
      }
    }
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –∫–æ–º–Ω–∞—Ç—ã
  String _generateRoomId(String name) {
    final clean = name.toLowerCase().replaceAll(RegExp(r'[^a-z0-9]'), '');
    final random = Random().nextInt(1000);
    return '${clean}_$random';
  }

  @override
  void dispose() {
    disconnect();
    super.dispose();
  }
}
