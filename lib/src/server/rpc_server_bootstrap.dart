// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: MIT

import 'dart:async';
import 'dart:io';

import 'package:args/args.dart';
import 'package:rpc_dart/rpc_dart.dart';

import 'rpc_server_interface.dart';

const String _defaultVersion = '1.0.0';

/// üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∞—Å–∞–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ production-ready RPC —Å–µ—Ä–≤–µ—Ä–æ–≤
///
/// –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º:
/// - CLI –ø–∞—Ä—Å–∏–Ω–≥ —Å –∫—Ä–∞—Å–∏–≤–æ–π —Å–ø—Ä–∞–≤–∫–æ–π
/// - Daemon —Ä–µ–∂–∏–º —Å PID —Ñ–∞–π–ª–∞–º–∏
/// - Graceful shutdown —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã
/// - Error handling —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
/// - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª/–∫–æ–Ω—Å–æ–ª—å
/// - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏
///
/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/// ```dart
/// void main(List<String> args) async {
///   final bootstrap = RpcServerBootstrap(
///     appName: 'My RPC Server',
///     version: '1.0.0',
///     contracts: [MyServiceContract()],
///   );
///
///   await bootstrap.run(args);
/// }
/// ```
class RpcServerBootstrap {
  final String appName;
  final String version;
  final String description;
  final List<RpcResponderContract> contracts;
  final IRpcServer server;
  final RpcLogger? logger;

  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  late final _SignalHandler _signalHandler;
  late final _ErrorHandler _errorHandler;
  late final _ServerConfig _config;

  RpcServerBootstrap({
    required this.appName,
    this.version = _defaultVersion,
    this.description = '',
    required this.contracts,
    required this.server,
    this.logger,
  });

  /// –ì–ª–∞–≤–Ω—ã–π entry point - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å full production –æ–±–≤—è–∑–∫–æ–π
  Future<void> run(List<String> arguments) async {
    runZonedGuarded<void>(
      () => _runWithErrorHandling(arguments),
      (error, stackTrace) => _handleGlobalError(error, stackTrace),
    );
  }

  /// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  Future<void> _runWithErrorHandling(List<String> arguments) async {
    try {
      // 1. –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
      final parser = _createArgParser();
      late final ArgResults args;

      try {
        args = parser.parse(arguments);
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: $e\n');
        _printUsage(parser);
        exit(1);
      }

      // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      if (args['help'] as bool) {
        _printUsage(parser);
        return;
      }

      if (args['version'] as bool) {
        print('üöÄ $appName v$version');
        return;
      }

      // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      _config = _ServerConfig.fromArgs(args);
      _config.validate();

      // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      _errorHandler = _ErrorHandler(
        verbose: _config.verbose,
        isDaemon: _config.isDaemonChild,
        logFile: _config.logFile,
      );

      _signalHandler = _SignalHandler();

      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º daemon –∫–æ–º–∞–Ω–¥—ã
      if (_config.stopDaemon) {
        await _stopDaemon();
        return;
      }

      if (_config.statusDaemon) {
        await _statusDaemon();
        return;
      }

      if (_config.reloadDaemon) {
        await _reloadDaemon();
        return;
      }

      // 6. –î–µ–º–æ–Ω–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (_config.daemon && !_config.isDaemonChild) {
        await _daemonize(arguments);
        return; // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
      }

      // 7. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
      _setupSignalHandlers();

      // 8. –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      await _startServer();

      // 9. –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await _signalHandler._waitForShutdown();

      // 10. Graceful shutdown
      await _gracefulShutdown();
    } catch (e, stackTrace) {
      await _errorHandler.handleError(e, stackTrace);
      exit(1);
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç RPC —Å–µ—Ä–≤–µ—Ä
  Future<void> _startServer() async {
    print('üöÄ –ó–∞–ø—É—Å–∫ $appName v$version');
    print('üì° ${server.runtimeType} —Å–µ—Ä–≤–µ—Ä –Ω–∞ ${server.host}:${server.port}');

    if (contracts.isEmpty) {
      throw ArgumentError('–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ RPC –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
    }

    // –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–∏
    // (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ RpcHttp2Server.createWithContracts)

    await server.start();

    final contractNames = contracts.map((c) => c.serviceName).join(', ');
    print('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: $contractNames');

    if (_config.isDaemonChild) {
      await _logDaemonReady();
    } else {
      print('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è graceful shutdown');
    }
  }

  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
  void _setupSignalHandlers() {
    _signalHandler.initialize();

    if (_config.isDaemonChild) {
      _signalHandler.onReload = () async {
        await _logDaemonEvent('Configuration reload requested');
        print('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
      };

      _signalHandler.onStats = () async {
        await _logDaemonEvent('Statistics requested');
        if (server.isRunning) {
          final stats = '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${server.endpoints.length}';
          await _logDaemonStats(stats);
          print('üìä $stats');
        }
      };

      _signalHandler.onToggleDebug = () async {
        await _logDaemonEvent('Debug mode toggle requested');
        print('üêõ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞...');
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      };
    }
  }

  /// Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  Future<void> _gracefulShutdown() async {
    print('üîÑ Graceful shutdown...');

    try {
      await server.stop().timeout(
        Duration(seconds: 10),
        onTimeout: () {
          print('‚ö†Ô∏è Graceful shutdown –ø—Ä–µ–≤—ã—Å–∏–ª 10 —Å–µ–∫—É–Ω–¥');
          exit(1);
        },
      );
      print('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: $e');
      exit(1);
    }
  }

  /// –î–µ–º–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
  Future<void> _daemonize(List<String> originalArgs) async {
    if (!Platform.isLinux && !Platform.isMacOS) {
      throw UnsupportedError(
          'Daemon —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Linux/macOS');
    }

    print('üîÑ –ó–∞–ø—É—Å–∫ –≤ daemon —Ä–µ–∂–∏–º–µ...');

    final pidFile = _config.defaultPidFile;
    final logFile = _config.defaultLogFile;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω
    await _checkExistingDaemon(pidFile);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    final childArgs = originalArgs.toList();
    childArgs.removeWhere((arg) => arg == '--daemon' || arg == '-d');
    childArgs.add('--_daemon-child');

    // –°–æ–∑–¥–∞–µ–º detached –ø—Ä–æ—Ü–µ—Å—Å
    final process = await Process.start(
      Platform.resolvedExecutable,
      [Platform.script.toFilePath(), ...childArgs],
      mode: ProcessStartMode.detached,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    await Future.delayed(Duration(milliseconds: 1000));
    if (!_isProcessRunning(process.pid)) {
      throw Exception('–î–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
    await File(pidFile).writeAsString('${process.pid}');

    print('‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: ${process.pid}');
    print('üìÑ PID —Ñ–∞–π–ª: $pidFile');
    print('üìù –õ–æ–≥–∏: $logFile');
    print('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');

    exit(0);
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç daemon
  Future<void> _stopDaemon() async {
    final pidFile = _config.defaultPidFile;

    if (!await File(pidFile).exists()) {
      print('‚ùå Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      exit(1);
    }

    final pid = int.parse(await File(pidFile).readAsString());

    if (!_isProcessRunning(pid)) {
      print('‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      await File(pidFile).delete();
      exit(1);
    }

    print('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon PID: $pid');

    if (Process.killPid(pid, ProcessSignal.sigterm)) {
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      for (int i = 0; i < 100; i++) {
        if (!_isProcessRunning(pid)) {
          await File(pidFile).delete();
          print('‚úÖ Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          return;
        }
        await Future.delayed(Duration(milliseconds: 100));
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      Process.killPid(pid, ProcessSignal.sigkill);
      await File(pidFile).delete();
      print('‚úÖ Daemon –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } else {
      print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon');
      exit(1);
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å daemon
  Future<void> _statusDaemon() async {
    final pidFile = _config.defaultPidFile;

    if (!await File(pidFile).exists()) {
      print('‚ùå Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      exit(1);
    }

    final pid = int.parse(await File(pidFile).readAsString());

    if (_isProcessRunning(pid)) {
      print('‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω —Å PID: $pid');
      print('üìÑ PID —Ñ–∞–π–ª: $pidFile');
      print('üìù –õ–æ–≥–∏: ${_config.defaultLogFile}');
    } else {
      print('‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª');
      await File(pidFile).delete();
      exit(1);
    }
  }

  /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç daemon
  Future<void> _reloadDaemon() async {
    final pidFile = _config.defaultPidFile;

    if (!await File(pidFile).exists()) {
      print('‚ùå Daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      exit(1);
    }

    final pid = int.parse(await File(pidFile).readAsString());

    if (_isProcessRunning(pid)) {
      if (Process.killPid(pid, ProcessSignal.sighup)) {
        print('‚úÖ –°–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        await _logDaemonEvent('Reload signal sent');
      } else {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª');
        exit(1);
      }
    } else {
      print('‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      exit(1);
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  /// –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  ArgParser _createArgParser() {
    return ArgParser()
      ..addOption('host',
          abbr: 'h', defaultsTo: 'localhost', help: '–•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      ..addOption('port', abbr: 'p', defaultsTo: '8080', help: '–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      ..addOption('log-level',
          allowed: ['debug', 'info', 'warning', 'error'], defaultsTo: 'info')
      ..addFlag('verbose', abbr: 'v', help: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
      ..addFlag('quiet', abbr: 'q', help: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º')
      ..addOption('log-file', help: '–§–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è daemon —Ä–µ–∂–∏–º–∞')
      ..addFlag('daemon', abbr: 'd', help: '–ó–∞–ø—É—Å–∫ –≤ daemon —Ä–µ–∂–∏–º–µ')
      ..addFlag('stop', help: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon')
      ..addFlag('status', help: '–°—Ç–∞—Ç—É—Å daemon')
      ..addFlag('reload', help: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å daemon')
      ..addFlag('_daemon-child', hide: true, help: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥')
      ..addOption('pid-file', help: 'PID —Ñ–∞–π–ª –¥–ª—è daemon')
      ..addFlag('help', help: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É')
      ..addFlag('version', help: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é');
  }

  /// –ü–µ—á–∞—Ç–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
  void _printUsage(ArgParser parser) {
    print('üöÄ $appName v$version');
    if (description.isNotEmpty) {
      print(description);
    }
    print('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    print('  dart run [—Ñ–∞–π–ª] [–æ–ø—Ü–∏–∏]');
    print('\n–û–ø—Ü–∏–∏:');
    print(parser.usage);
    print('\n–ü—Ä–∏–º–µ—Ä—ã:');
    print('  dart run server.dart                    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
    print('  dart run server.dart -p 9090            # –ù–∞ –ø–æ—Ä—Ç—É 9090');
    print('  dart run server.dart --daemon            # –í daemon —Ä–µ–∂–∏–º–µ');
    print('  dart run server.dart --status            # –°—Ç–∞—Ç—É—Å daemon');
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω
  Future<void> _checkExistingDaemon(String pidFile) async {
    if (await File(pidFile).exists()) {
      final pid = int.parse(await File(pidFile).readAsString());
      if (_isProcessRunning(pid)) {
        throw Exception('Daemon —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID: $pid');
      } else {
        await File(pidFile).delete();
      }
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
  bool _isProcessRunning(int pid) {
    try {
      final result = Process.runSync('ps', ['-p', pid.toString()]);
      return result.exitCode == 0;
    } catch (e) {
      return false;
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ daemon
  Future<void> _logDaemonEvent(String event) async {
    if (_config.logFile == null) return;
    try {
      final timestamp = DateTime.now().toIso8601String();
      await File(_config.logFile!).writeAsString(
        '$timestamp: [INFO] $event\n',
        mode: FileMode.writeOnlyAppend,
      );
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å daemon
  Future<void> _logDaemonReady() async {
    await _logDaemonEvent(
        '$appName daemon ready on ${_config.host}:${_config.port}');
  }

  /// –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É daemon
  Future<void> _logDaemonStats(String stats) async {
    await _logDaemonEvent('Statistics: $stats');
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
  Future<void> _handleGlobalError(Object error, StackTrace stackTrace) async {
    final errorHandler = _ErrorHandler(
      verbose: true,
      isDaemon: false,
    );
    await errorHandler.handleError(error, stackTrace);
    exit(1);
  }
}

// === –í–ù–£–¢–†–ï–ù–ù–ò–ï –ö–õ–ê–°–°–´ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ bin/router/) ===

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
class _ServerConfig {
  final String host;
  final int port;
  final bool verbose;
  final bool quiet;
  final String? logFile;
  final bool daemon;
  final bool isDaemonChild;
  final bool stopDaemon;
  final bool statusDaemon;
  final bool reloadDaemon;
  final String? pidFile;

  const _ServerConfig({
    required this.host,
    required this.port,
    required this.verbose,
    required this.quiet,
    this.logFile,
    required this.daemon,
    required this.isDaemonChild,
    required this.stopDaemon,
    required this.statusDaemon,
    required this.reloadDaemon,
    this.pidFile,
  });

  static _ServerConfig fromArgs(ArgResults args) {
    return _ServerConfig(
      host: args['host'] as String,
      port: int.parse(args['port'] as String),
      verbose: args['verbose'] as bool,
      quiet: args['quiet'] as bool,
      logFile: args['log-file'] as String?,
      daemon: args['daemon'] as bool,
      isDaemonChild: args['_daemon-child'] as bool,
      stopDaemon: args['stop'] as bool,
      statusDaemon: args['status'] as bool,
      reloadDaemon: args['reload'] as bool,
      pidFile: args['pid-file'] as String?,
    );
  }

  void validate() {
    if (port < 1 || port > 65535) {
      throw ArgumentError('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535');
    }
    if (quiet && verbose) {
      throw ArgumentError('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quiet –∏ verbose –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
    }
  }

  String get defaultPidFile => pidFile ?? '/tmp/rpc_server.pid';
  String get defaultLogFile => logFile ?? '/tmp/rpc_server.log';
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
class _SignalHandler {
  final Completer<void> _shutdownCompleter = Completer<void>();
  bool _shutdownInitiated = false;

  void Function()? onReload;
  void Function()? onStats;
  void Function()? onToggleDebug;

  void initialize() {
    ProcessSignal.sigint.watch().listen(_handleSigint);
    ProcessSignal.sigterm.watch().listen(_handleSigterm);

    if (Platform.isLinux || Platform.isMacOS) {
      ProcessSignal.sighup.watch().listen(_handleSighup);
      ProcessSignal.sigusr1.watch().listen(_handleSigusr1);
      ProcessSignal.sigusr2.watch().listen(_handleSigusr2);
    }
  }

  Future<void> _waitForShutdown() async {
    await _shutdownCompleter.future;
  }

  void _handleSigint(ProcessSignal signal) {
    if (!_shutdownInitiated) {
      _shutdownInitiated = true;
      print('\nüõë –ü–æ–ª—É—á–µ–Ω SIGINT, graceful shutdown...');
      _shutdownCompleter.complete();
    } else {
      print('\n‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ!');
      exit(130);
    }
  }

  void _handleSigterm(ProcessSignal signal) {
    if (!_shutdownInitiated) {
      _shutdownInitiated = true;
      print('\nüõë –ü–æ–ª—É—á–µ–Ω SIGTERM, graceful shutdown...');
      _shutdownCompleter.complete();
    }
  }

  void _handleSighup(ProcessSignal signal) {
    print('\nüîÑ –ü–æ–ª—É—á–µ–Ω SIGHUP, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...');
    onReload?.call();
  }

  void _handleSigusr1(ProcessSignal signal) {
    print('\nüìä –ü–æ–ª—É—á–µ–Ω SIGUSR1, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...');
    onStats?.call();
  }

  void _handleSigusr2(ProcessSignal signal) {
    print('\nüêõ –ü–æ–ª—É—á–µ–Ω SIGUSR2, debug...');
    onToggleDebug?.call();
  }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
class _ErrorHandler {
  final bool verbose;
  final bool isDaemon;
  final String? logFile;

  const _ErrorHandler({
    required this.verbose,
    required this.isDaemon,
    this.logFile,
  });

  Future<void> handleError(dynamic error, StackTrace? stackTrace) async {
    final timestamp = DateTime.now().toIso8601String();
    final message = 'üö® –û–®–ò–ë–ö–ê [$timestamp]: $error';

    if (verbose && stackTrace != null) {
      print('$message\nüìç Stack trace:\n$stackTrace');
    } else {
      print(message);
    }

    if (isDaemon && logFile != null) {
      try {
        await File(logFile!).writeAsString(
          '$message\n',
          mode: FileMode.writeOnlyAppend,
        );
      } catch (e) {
        stderr.writeln('Failed to log error: $e');
      }
    }
  }
}
