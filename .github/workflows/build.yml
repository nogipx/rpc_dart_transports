name: Build RPC Dart Router

on:
  workflow_dispatch:

jobs:
  build:
    name: Build RPC Dart Router
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: rpc_dart_router-linux
            executable_ext: ''
          - os: macos-latest
            artifact_name: rpc_dart_router-macos
            executable_ext: ''
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Get version from pubspec.yaml
      id: version
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          version=$(grep '^version:' rpc_dart_transports/pubspec.yaml | cut -d' ' -f2)
        else
          version=$(grep '^version:' rpc_dart_transports/pubspec.yaml | awk '{print $2}')
        fi
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Version: $version"
      shell: bash
      working-directory: .
    
    - name: Create build directory
      run: mkdir -p build
      working-directory: rpc_dart_transports
    
    - name: Get dependencies
      run: dart pub get
      working-directory: rpc_dart_transports
    
    - name: Run tests
      run: dart test
      working-directory: rpc_dart_transports
    
    - name: Build executable
      run: |
        dart compile exe bin/rpc_dart_router.dart -o build/${{ matrix.artifact_name }}${{ matrix.executable_ext }}
      working-directory: rpc_dart_transports
      
    - name: Test executable
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          ./build/${{ matrix.artifact_name }}${{ matrix.executable_ext }} --version
        else
          chmod +x build/${{ matrix.artifact_name }}${{ matrix.executable_ext }}
          ./build/${{ matrix.artifact_name }}${{ matrix.executable_ext }} --version
        fi
      working-directory: rpc_dart_transports
      shell: bash
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}
        path: rpc_dart_transports/build/${{ matrix.artifact_name }}${{ matrix.executable_ext }}
        retention-days: 30

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Download artifacts for summary
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Display build summary
      run: |
        echo "üöÄ **RPC Dart Router Build Summary**"
        echo ""
        echo "üì¶ **–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:**"
        find artifacts -type f -name "rpc_dart_router-*" -exec basename {} \; | sort
        echo ""
        echo "üíæ **–†–∞–∑–º–µ—Ä—ã:**"
        find artifacts -type f -name "rpc_dart_router-*" -exec ls -lh {} \; | awk '{print $9 " - " $5}'
        echo ""
        echo "‚ÑπÔ∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–µ–ª–∏–∑—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ GitHub Releases"