// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: MIT

import 'dart:async';
import 'dart:math';
import 'package:rpc_dart_transports/rpc_dart_transports.dart';
import 'package:test/test.dart';

// ============================================================================
// üì¶ –ú–û–î–ï–õ–ò –î–õ–Ø ZERO-COPY –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è zero-copy —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ isolate —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ sendDirectObject
/// –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestDataModel {
  final String id;
  final List<double> numbers;
  final Map<String, dynamic> metadata;

  const TestDataModel({
    required this.id,
    required this.numbers,
    required this.metadata,
  });

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  factory TestDataModel.generate(int size) {
    final random = Random();
    final numbers = List.generate(size, (i) => random.nextDouble() * 100);

    return TestDataModel(
      id: 'test_data_${DateTime.now().millisecondsSinceEpoch}',
      numbers: numbers,
      metadata: {
        'size': size,
        'generatedAt': DateTime.now().toIso8601String(),
        'complexData': List.generate(
            100,
            (i) => {
                  'index': i,
                  'value': random.nextDouble(),
                  'nested': {
                    'level1': {'level2': 'value_$i'}
                  },
                }),
      },
    );
  }

  @override
  String toString() => 'TestDataModel(id: $id, numbers: ${numbers.length})';
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
class ProcessingResult {
  final String originalId;
  final double sum;
  final double average;
  final int processedCount;
  final Duration processingTime;

  const ProcessingResult({
    required this.originalId,
    required this.sum,
    required this.average,
    required this.processedCount,
    required this.processingTime,
  });

  @override
  String toString() =>
      'ProcessingResult(originalId: $originalId, sum: $sum, average: ${average.toStringAsFixed(2)}, processingTime: ${processingTime.inMilliseconds}ms)';
}

// ============================================================================
// üñ•Ô∏è –°–ï–†–í–ï–† –î–õ–Ø –ò–ó–û–õ–Ø–¢–ê
// ============================================================================

@pragma('vm:entry-point')
void processingServer(IRpcTransport transport, Map<String, dynamic> params) {
  print('üñ•Ô∏è [Processing Server] –ó–∞–ø—É—Å–∫ –≤ –∏–∑–æ–ª—è—Ç–µ');

  transport.incomingMessages.listen((message) async {
    if (message.isDirect && message.directPayload != null) {
      final payload = message.directPayload;

      if (payload is TestDataModel) {
        final stopwatch = Stopwatch()..start();
        print('üìä [Processing Server] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${payload.id}');
        print('   üìà Numbers: ${payload.numbers.length}');

        // CPU-intensive –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        final sum = payload.numbers.reduce((a, b) => a + b);
        final average = sum / payload.numbers.length;

        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await Future.delayed(Duration(milliseconds: 10));

        stopwatch.stop();

        final result = ProcessingResult(
          originalId: payload.id,
          sum: sum,
          average: average,
          processedCount: payload.numbers.length,
          processingTime: stopwatch.elapsed,
        );

        print('‚úÖ [Processing Server] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${stopwatch.elapsedMilliseconds}–º—Å');

        await transport.sendDirectObject(message.streamId, result, endStream: true);
      }
    }
  });

  print('‚úÖ [Processing Server] –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ');
}

// ============================================================================
// üß™ –¢–ï–°–¢–´
// ============================================================================

void main() {
  group('Isolate Transport Zero-Copy Tests', () {
    test('–ø—Ä–æ—Å—Ç–æ–π_zero_copy_–æ–±—ä–µ–∫—Ç_–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è_–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () async {
      // Arrange
      final result = await RpcIsolateTransport.spawn(
        entrypoint: processingServer,
        customParams: {},
        isolateId: 'simple-test',
      );

      final transport = result.transport;
      final testData = TestDataModel.generate(100);

      try {
        // Act
        final streamId = transport.createStream();
        final responsesFuture = transport
            .getMessagesForStream(streamId)
            .where((msg) => msg.isDirect && msg.directPayload is ProcessingResult)
            .first;

        await transport.sendDirectObject(streamId, testData);
        final response = await responsesFuture;
        final processingResult = response.directPayload as ProcessingResult;

        // Assert
        expect(processingResult.originalId, equals(testData.id));
        expect(processingResult.processedCount, equals(100));
        expect(processingResult.sum, greaterThan(0));
        expect(processingResult.average, greaterThan(0));
        expect(processingResult.average, equals(processingResult.sum / 100));

        print('‚úÖ Zero-copy —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω:');
        print('   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processingResult.processedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        print('   üìà –°—É–º–º–∞: ${processingResult.sum.toStringAsFixed(2)}');
        print('   üìà –°—Ä–µ–¥–Ω–µ–µ: ${processingResult.average.toStringAsFixed(2)}');
        print('   ‚è±Ô∏è –í—Ä–µ–º—è: ${processingResult.processingTime.inMilliseconds}–º—Å');
      } finally {
        await transport.close();
        result.kill();
      }
    });

    test('–±–æ–ª—å—à–æ–π_–æ–±—ä–µ–∫—Ç_–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è_—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ', () async {
      // Arrange
      final result = await RpcIsolateTransport.spawn(
        entrypoint: processingServer,
        customParams: {},
        isolateId: 'performance-test',
      );

      final transport = result.transport;
      final largeData = TestDataModel.generate(5000); // 5K numbers

      try {
        // Act
        final streamId = transport.createStream();
        final responsesFuture = transport
            .getMessagesForStream(streamId)
            .where((msg) => msg.isDirect && msg.directPayload is ProcessingResult)
            .first;

        final stopwatch = Stopwatch()..start();
        await transport.sendDirectObject(streamId, largeData);
        final response = await responsesFuture;
        stopwatch.stop();

        final processingResult = response.directPayload as ProcessingResult;

        // Assert
        expect(processingResult.originalId, equals(largeData.id));
        expect(processingResult.processedCount, equals(5000));
        expect(stopwatch.elapsedMilliseconds, lessThan(1000)); // –ú–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞

        print('üöÄ Performance —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω:');
        print('   üìä –†–∞–∑–º–µ—Ä: 5000 —á–∏—Å–µ–ª + —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ');
        print('   ‚è±Ô∏è –í—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä: ${stopwatch.elapsedMilliseconds}–º—Å');
        print(
            '   ‚öôÔ∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∏–∑–æ–ª—è—Ç–µ: ${processingResult.processingTime.inMilliseconds}–º—Å');
        print(
            '   üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: sum=${processingResult.sum.toStringAsFixed(2)}, avg=${processingResult.average.toStringAsFixed(2)}');
        print(
            '   ‚ö° Zero-copy —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${(processingResult.processingTime.inMilliseconds / stopwatch.elapsedMilliseconds * 100).toStringAsFixed(1)}%');
      } finally {
        await transport.close();
        result.kill();
      }
    });
  });
}
