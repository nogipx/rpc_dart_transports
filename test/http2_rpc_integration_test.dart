// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: MIT

import 'dart:async';
import 'dart:io';

import 'package:test/test.dart';
import 'package:http2/http2.dart' as http2;
import 'package:rpc_dart_transports/rpc_dart_transports.dart';

void main() {
  group('HTTP/2 RPC Integration Tests (High-Level API)', () {
    late Http2RpcTestServer testServer;
    late RpcHttp2CallerTransport clientTransport;
    late RpcCallerEndpoint callerEndpoint;

    setUpAll(() async {
      testServer = Http2RpcTestServer();
      await testServer.start();

      // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ –¥–æ–ª–≥–æ–∂–∏–≤—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
      clientTransport = await RpcHttp2CallerTransport.connect(
        host: 'localhost',
        port: testServer.port,
        logger: RpcLogger('TestClient'),
      );

      callerEndpoint = RpcCallerEndpoint(transport: clientTransport);

      print('üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–ª–≥–æ–∂–∏–≤—É—â–µ–µ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    });

    tearDownAll(() async {
      await callerEndpoint.close();
      await testServer.stop();
      print('üîí –î–æ–ª–≥–æ–∂–∏–≤—É—â–µ–µ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    });

    test('unary_rpc_—á–µ—Ä–µ–∑_caller_–∏_responder', () async {
      // Act - –¥–µ–ª–∞–µ–º —É–Ω–∞—Ä–Ω—ã–π RPC –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ high-level API
      final response = await callerEndpoint.unaryRequest<RpcString, RpcString>(
        serviceName: 'TestService',
        methodName: 'Echo',
        requestCodec: RpcString.codec,
        responseCodec: RpcString.codec,
        request: RpcString('Hello from high-level RPC!'),
      );

      // Assert
      expect(response.value, equals('Server Echo: Hello from high-level RPC!'));

      print('‚úÖ Unary RPC —á–µ—Ä–µ–∑ Caller/Responder —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
    });

    test('server_streaming_rpc_—á–µ—Ä–µ–∑_caller_–∏_responder', () async {
      final responses = <String>[];
      final completer = Completer<void>();

      // Act - —Å–æ–∑–¥–∞–µ–º server streaming RPC –≤—ã–∑–æ–≤
      final responseStream = callerEndpoint.serverStream<RpcString, RpcString>(
        serviceName: 'TestService',
        methodName: 'ServerStream',
        requestCodec: RpcString.codec,
        responseCodec: RpcString.codec,
        request: RpcString('Generate messages'),
      );

      // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã
      responseStream.listen(
        (rpcString) {
          responses.add(rpcString.value);
          print('üì® –ü–æ–ª—É—á–µ–Ω server streaming –æ—Ç–≤–µ—Ç: ${rpcString.value}');

          if (responses.length >= 3) {
            completer.complete();
          }
        },
        onError: (error) => completer.completeError(error),
        onDone: () {
          if (!completer.isCompleted) {
            completer.complete();
          }
        },
      );

      // Assert
      await completer.future.timeout(
        Duration(seconds: 15),
        onTimeout: () =>
            throw TimeoutException('Timeout waiting for server streaming'),
      );

      expect(responses.length, equals(3));
      expect(responses[0], contains('Stream message #1'));
      expect(responses[1], contains('Stream message #2'));
      expect(responses[2], contains('Stream message #3'));

      print('‚úÖ Server Streaming RPC —á–µ—Ä–µ–∑ Caller/Responder —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
    });

    test('client_streaming_rpc_—á–µ—Ä–µ–∑_caller_–∏_responder', () async {
      // Act - —Å–æ–∑–¥–∞–µ–º client streaming RPC –≤—ã–∑–æ–≤
      final messages = [
        RpcString('Message 1'),
        RpcString('Message 2'),
        RpcString('Message 3')
      ];

      final requestStream = Stream.fromIterable(messages).map((msg) {
        print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º client streaming —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msg.value}');
        return msg;
      });

      final callFunction = callerEndpoint.clientStream<RpcString, RpcString>(
        serviceName: 'TestService',
        methodName: 'ClientStream',
        requestCodec: RpcString.codec,
        responseCodec: RpcString.codec,
      );

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç
      final response = await callFunction(requestStream).timeout(
        Duration(seconds: 5),
        onTimeout: () => throw TimeoutException(
            'Timeout waiting for client streaming response'),
      );

      // Assert
      expect(response.value, contains('Received 3 client messages'));

      print('‚úÖ Client Streaming RPC —á–µ—Ä–µ–∑ Caller/Responder —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
    });

    test('bidirectional_streaming_rpc_—á–µ—Ä–µ–∑_caller_–∏_responder', () async {
      final responses = <String>[];
      final completer = Completer<void>();

      // Act - —Å–æ–∑–¥–∞–µ–º bidirectional streaming RPC –≤—ã–∑–æ–≤
      final messages = [
        RpcString('Bidirectional message #1'),
        RpcString('Bidirectional message #2'),
        RpcString('Bidirectional message #3')
      ];

      // –°–æ–∑–¥–∞–µ–º StreamController –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
      final requestController = StreamController<RpcString>();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –Ω–æ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º —Å—Ä–∞–∑—É
      Future.microtask(() async {
        for (final msg in messages) {
          await Future.delayed(Duration(milliseconds: 200));
          print('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º bidirectional —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msg.value}');
          requestController.add(msg);
        }

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∏—Ç—å
        await Future.delayed(Duration(milliseconds: 300));
        print('üèÅ –ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç request stream');
        requestController.close();
      });

      final requestStream = requestController.stream;

      final responseStream =
          callerEndpoint.bidirectionalStream<RpcString, RpcString>(
        serviceName: 'TestService',
        methodName: 'BidirectionalStream',
        requestCodec: RpcString.codec,
        responseCodec: RpcString.codec,
        requests: requestStream,
      );

      // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã
      responseStream.listen(
        (rpcString) {
          responses.add(rpcString.value);
          print('üîÑ –ü–æ–ª—É—á–µ–Ω bidirectional –æ—Ç–≤–µ—Ç: ${rpcString.value}');

          if (responses.length >= 3) {
            completer.complete();
          }
        },
        onError: (error) => completer.completeError(error),
        onDone: () {
          print('üèÅ Bidirectional response stream –∑–∞–≤–µ—Ä—à–µ–Ω');
          if (!completer.isCompleted) {
            completer.complete();
          }
        },
      );

      // Assert
      await completer.future.timeout(
        Duration(seconds: 30),
        onTimeout: () => throw TimeoutException(
            'Timeout waiting for bidirectional responses'),
      );

      expect(responses.length, equals(3));
      expect(responses[0], equals('Echo: Bidirectional message #1'));
      expect(responses[1], equals('Echo: Bidirectional message #2'));
      expect(responses[2], equals('Echo: Bidirectional message #3'));

      print(
          '‚úÖ Bidirectional Streaming RPC —á–µ—Ä–µ–∑ Caller/Responder —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
    });

    test('–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ_rpc_–≤—ã–∑–æ–≤—ã_—Ä–∞–∑–Ω—ã—Ö_—Ç–∏–ø–æ–≤', () async {
      // Act - –¥–µ–ª–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
      final futures = <Future>[];

      // Unary –≤—ã–∑–æ–≤
      futures.add(
        callerEndpoint
            .unaryRequest<RpcString, RpcString>(
          serviceName: 'TestService',
          methodName: 'Echo',
          requestCodec: RpcString.codec,
          responseCodec: RpcString.codec,
          request: RpcString('Parallel unary'),
        )
            .then((response) {
          expect(response.value, contains('Parallel unary'));
          print('‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π unary –∑–∞–≤–µ—Ä—à–µ–Ω: ${response.value}');
        }),
      );

      // Server streaming –≤—ã–∑–æ–≤
      futures.add(
        callerEndpoint
            .serverStream<RpcString, RpcString>(
              serviceName: 'TestService',
              methodName: 'ServerStream',
              requestCodec: RpcString.codec,
              responseCodec: RpcString.codec,
              request: RpcString('Parallel server stream'),
            )
            .take(2)
            .toList()
            .then((responses) {
          expect(responses.length, equals(2));
          print(
              '‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π server streaming –∑–∞–≤–µ—Ä—à–µ–Ω: ${responses.length} –æ—Ç–≤–µ—Ç–æ–≤');
        }),
      );

      // Assert
      await Future.wait(futures).timeout(
        Duration(seconds: 15),
        onTimeout: () => throw TimeoutException('Timeout in parallel RPC test'),
      );

      print(
          '‚úÖ –í—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ RPC –≤—ã–∑–æ–≤—ã —á–µ—Ä–µ–∑ Caller/Responder –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    });
  });
}

/// HTTP/2 RPC —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º RpcResponderEndpoint
class Http2RpcTestServer {
  ServerSocket? _serverSocket;
  int _port = 0;
  final List<StreamSubscription> _subscriptions = [];
  final List<RpcResponderEndpoint> _responderEndpoints = [];

  int get port => _port;

  Future<void> start() async {
    _serverSocket = await ServerSocket.bind('localhost', 0);
    _port = _serverSocket!.port;

    print('üöÄ HTTP/2 RPC —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $_port');

    final subscription = _serverSocket!.listen((socket) {
      _handleConnection(socket);
    });

    _subscriptions.add(subscription);
  }

  Future<void> stop() async {
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö RPC –æ–ø–µ—Ä–∞—Ü–∏–π
    await Future.delayed(Duration(milliseconds: 100));

    for (final subscription in _subscriptions) {
      await subscription.cancel();
    }
    _subscriptions.clear();

    for (final endpoint in _responderEndpoints) {
      await endpoint.close();
    }
    _responderEndpoints.clear();

    await _serverSocket?.close();
    _serverSocket = null;

    print('üõë HTTP/2 RPC —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  void _handleConnection(Socket socket) {
    print(
        'üìû –ù–æ–≤–æ–µ RPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç ${socket.remoteAddress}:${socket.remotePort}');

    try {
      // –°–æ–∑–¥–∞–µ–º HTTP/2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      final connection = http2.ServerTransportConnection.viaSocket(socket);
      final serverTransport =
          RpcHttp2ResponderTransport(connection: connection);

      // –°–æ–∑–¥–∞–µ–º RpcResponderEndpoint —Å HTTP/2 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
      final responderEndpoint =
          RpcResponderEndpoint(transport: serverTransport);
      _responderEndpoints.add(responderEndpoint);

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
      _registerTestService(responderEndpoint);

      // –ó–∞–ø—É—Å–∫–∞–µ–º endpoint
      responderEndpoint.start();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
      socket.destroy();
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ RPC –º–µ—Ç–æ–¥–æ–≤
  void _registerTestService(RpcResponderEndpoint endpoint) {
    final contract = TestServiceContract();
    endpoint.registerServiceContract(contract);
    print(
        'üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω TestService —Å ${contract.methods.length} –º–µ—Ç–æ–¥–∞–º–∏');
  }
}

/// –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
final class TestServiceContract extends RpcResponderContract {
  TestServiceContract() : super('TestService');

  @override
  void setup() {
    // Unary –º–µ—Ç–æ–¥
    addUnaryMethod<RpcString, RpcString>(
      methodName: 'Echo',
      handler: (request, {context}) async {
        final message = request.value;
        print('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ unary Echo: $message');
        return RpcString('Server Echo: $message');
      },
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
    );

    // Server streaming –º–µ—Ç–æ–¥
    addServerStreamMethod<RpcString, RpcString>(
      methodName: 'ServerStream',
      handler: (request, {context}) async* {
        final message = request.value;
        print('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ server streaming: $message');

        for (int i = 1; i <= 3; i++) {
          await Future.delayed(Duration(milliseconds: 100));
          yield RpcString('Stream message #$i for: $message');
        }
      },
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
    );

    // Client streaming –º–µ—Ç–æ–¥
    addClientStreamMethod<RpcString, RpcString>(
      methodName: 'ClientStream',
      handler: (requestStream, {context}) async {
        print('üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ client streaming');

        final messages = <String>[];
        await for (final request in requestStream) {
          final message = request.value;
          messages.add(message);
          print('üì• –ü–æ–ª—É—á–µ–Ω–æ client streaming —Å–æ–æ–±—â–µ–Ω–∏–µ: $message');
        }

        return RpcString(
            'Received ${messages.length} client messages: ${messages.join(", ")}');
      },
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
    );

    // Bidirectional streaming –º–µ—Ç–æ–¥
    addBidirectionalMethod<RpcString, RpcString>(
      methodName: 'BidirectionalStream',
      handler: (requestStream, {context}) async* {
        print('üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ bidirectional streaming');

        await for (final request in requestStream) {
          final message = request.value;
          print('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ bidirectional —Å–æ–æ–±—â–µ–Ω–∏—è: $message');

          final response = RpcString('Echo: $message');
          print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º bidirectional –æ—Ç–≤–µ—Ç: ${response.value}');
          yield response;

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
          await Future.delayed(Duration(milliseconds: 50));
          print('‚úÖ Bidirectional –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${response.value}');
        }

        print('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ bidirectional streaming –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      },
      requestCodec: RpcString.codec,
      responseCodec: RpcString.codec,
    );
  }
}
