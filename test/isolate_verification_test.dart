// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:isolate';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';
import 'package:test/test.dart';

// ============================================================================
// üì¶ –ú–û–î–ï–õ–ò –î–õ–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
// ============================================================================

/// –¢–µ—Å—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∏–∑–æ–ª—è—Ç–µ
///
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
/// - –†–∞–∑–Ω—ã–µ Isolate.current –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –∏–∑–æ–ª—è—Ç–µ
/// - –ò–∑–æ–ª—è—Ü–∏—è –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
/// - CPU-blocking –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
/// - Crash –∏–∑–æ–ª—è—Ç–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–ª—è—Ç–µ
class IsolateInfo {
  final String isolateName;
  final int isolateHashCode;
  final String debugName;
  final DateTime timestamp;

  const IsolateInfo({
    required this.isolateName,
    required this.isolateHashCode,
    required this.debugName,
    required this.timestamp,
  });

  @override
  String toString() =>
      'IsolateInfo(name: $isolateName, hashCode: $isolateHashCode, debugName: $debugName)';
}

/// –ó–∞–¥–∞—á–∞ –¥–ª—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
class CpuIntensiveTask {
  final int iterations;
  final String taskId;

  const CpuIntensiveTask({
    required this.iterations,
    required this.taskId,
  });
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
class CpuTaskResult {
  final String taskId;
  final int calculatedValue;
  final Duration processingTime;
  final IsolateInfo isolateInfo;

  const CpuTaskResult({
    required this.taskId,
    required this.calculatedValue,
    required this.processingTime,
    required this.isolateInfo,
  });
}

/// –ú—É—Ç–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø–∞–º—è—Ç–∏
class MutableCounter {
  int value;
  final String id;

  MutableCounter({required this.value, required this.id});

  void increment() => value++;

  @override
  String toString() => 'MutableCounter(id: $id, value: $value)';
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –º—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
class MutationResult {
  final MutableCounter counter;
  final IsolateInfo isolateInfo;

  const MutationResult({
    required this.counter,
    required this.isolateInfo,
  });
}

// ============================================================================
// üñ•Ô∏è –°–ï–†–í–ï–†–´ –î–õ–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
// ============================================================================

/// –°–µ—Ä–≤–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∏–∑–æ–ª—è—Ç–µ
@pragma('vm:entry-point')
void isolateInfoServer(IRpcTransport transport, Map<String, dynamic> params) {
  final currentIsolate = Isolate.current;

  print('üñ•Ô∏è [Isolate Info Server] –ó–∞–ø—É—â–µ–Ω –≤ –∏–∑–æ–ª—è—Ç–µ');
  print('   üÜî Isolate name: ${currentIsolate.debugName}');
  print('   #Ô∏è‚É£ Isolate hashCode: ${currentIsolate.hashCode}');

  transport.incomingMessages.listen((message) async {
    if (message.isDirect && message.directPayload != null) {
      final payload = message.directPayload;

      if (payload is String && payload == 'GET_ISOLATE_INFO') {
        final isolateInfo = IsolateInfo(
          isolateName: currentIsolate.debugName ?? 'unnamed',
          isolateHashCode: currentIsolate.hashCode,
          debugName: currentIsolate.debugName ?? 'unnamed',
          timestamp: DateTime.now(),
        );

        print('üì§ [Isolate Info Server] –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–ª—è—Ç–µ: $isolateInfo');

        await transport.sendDirectObject(message.streamId, isolateInfo, endStream: true);
      }
    }
  });

  print('‚úÖ [Isolate Info Server] –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
}

/// –°–µ—Ä–≤–µ—Ä –¥–ª—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
@pragma('vm:entry-point')
void cpuIntensiveServer(IRpcTransport transport, Map<String, dynamic> params) {
  final currentIsolate = Isolate.current;

  print('üñ•Ô∏è [CPU Server] –ó–∞–ø—É—â–µ–Ω –≤ –∏–∑–æ–ª—è—Ç–µ ${currentIsolate.debugName}');

  transport.incomingMessages.listen((message) async {
    if (message.isDirect && message.directPayload != null) {
      final payload = message.directPayload;

      if (payload is CpuIntensiveTask) {
        final stopwatch = Stopwatch()..start();

        print('üî• [CPU Server] –ù–∞—á–∏–Ω–∞—é CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É: ${payload.taskId}');
        print('   üî¢ –ò—Ç–µ—Ä–∞—Ü–∏–π: ${payload.iterations}');

        // CPU-blocking –æ–ø–µ—Ä–∞—Ü–∏—è - –≤—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
        int calculateFibonacci(int n) {
          if (n <= 1) return n;
          int a = 0, b = 1;
          for (int i = 2; i <= n; i++) {
            int temp = a + b;
            a = b;
            b = temp;
          }
          return b;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        int result = 0;
        for (int i = 0; i < payload.iterations; i++) {
          result += calculateFibonacci(30 + (i % 10)); // Fibonacci –æ—Ç 30 –¥–æ 39

          // –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
          for (int j = 0; j < 1000; j++) {
            result = (result * 7) % 1000000;
          }
        }

        stopwatch.stop();

        final isolateInfo = IsolateInfo(
          isolateName: currentIsolate.debugName ?? 'cpu-worker',
          isolateHashCode: currentIsolate.hashCode,
          debugName: currentIsolate.debugName ?? 'cpu-worker',
          timestamp: DateTime.now(),
        );

        final taskResult = CpuTaskResult(
          taskId: payload.taskId,
          calculatedValue: result,
          processingTime: stopwatch.elapsed,
          isolateInfo: isolateInfo,
        );

        print(
            '‚úÖ [CPU Server] –ó–∞–¥–∞—á–∞ ${payload.taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${stopwatch.elapsedMilliseconds}–º—Å');
        print('   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: $result');

        await transport.sendDirectObject(message.streamId, taskResult, endStream: true);
      }
    }
  });

  print('‚úÖ [CPU Server] –ì–æ—Ç–æ–≤ –∫ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–º –∑–∞–¥–∞—á–∞–º');
}

/// –°–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø–∞–º—è—Ç–∏
@pragma('vm:entry-point')
void memoryIsolationServer(IRpcTransport transport, Map<String, dynamic> params) {
  final currentIsolate = Isolate.current;

  print('üñ•Ô∏è [Memory Server] –ó–∞–ø—É—â–µ–Ω –≤ –∏–∑–æ–ª—è—Ç–µ ${currentIsolate.debugName}');

  transport.incomingMessages.listen((message) async {
    if (message.isDirect && message.directPayload != null) {
      final payload = message.directPayload;

      if (payload is MutableCounter) {
        print('üîÑ [Memory Server] –ü–æ–ª—É—á–µ–Ω —Å—á–µ—Ç—á–∏–∫: $payload');

        // –ü—ã—Ç–∞–µ–º—Å—è –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤ –∏–∑–æ–ª—è—Ç–µ
        final originalValue = payload.value;

        print('   üìù –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: $originalValue');

        // –ú—É—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–ª—è—Ç–µ (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é, –∞ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª)
        payload.increment();
        payload.increment();
        payload.increment();

        print('   üìù –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–∏ –≤ –∏–∑–æ–ª—è—Ç–µ: ${payload.value}');

        final isolateInfo = IsolateInfo(
          isolateName: currentIsolate.debugName ?? 'memory-worker',
          isolateHashCode: currentIsolate.hashCode,
          debugName: currentIsolate.debugName ?? 'memory-worker',
          timestamp: DateTime.now(),
        );

        final result = MutationResult(
          counter: payload, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ–±—Ä–∞—Ç–Ω–æ
          isolateInfo: isolateInfo,
        );

        await transport.sendDirectObject(message.streamId, result, endStream: true);
      }
    }
  });

  print('‚úÖ [Memory Server] –ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∞–º –ø–∞–º—è—Ç–∏');
}

// ============================================================================
// üß™ –¢–ï–°–¢–´ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
// ============================================================================

void main() {
  group('Isolate Verification Tests', () {
    test('isolate_–∏–º–µ–µ—Ç_—Ä–∞–∑–Ω—ã–µ_–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã_–æ—Ç_–æ—Å–Ω–æ–≤–Ω–æ–≥–æ_–ø–æ—Ç–æ–∫–∞', () async {
      // Arrange
      final mainIsolate = Isolate.current;
      print('üîç Main thread isolate: ${mainIsolate.debugName}, hashCode: ${mainIsolate.hashCode}');

      final result = await RpcIsolateTransport.spawn(
        entrypoint: isolateInfoServer,
        customParams: {},
        isolateId: 'verification-test',
        debugName: 'VerificationIsolate',
      );

      final transport = result.transport;

      try {
        // Act
        final streamId = transport.createStream();
        final responsesFuture = transport
            .getMessagesForStream(streamId)
            .where((msg) => msg.isDirect && msg.directPayload is IsolateInfo)
            .first;

        await transport.sendDirectObject(streamId, 'GET_ISOLATE_INFO');
        final response = await responsesFuture;
        final isolateInfo = response.directPayload as IsolateInfo;

        // Assert
        print('üìã Comparison:');
        print('   üî∏ Main isolate: ${mainIsolate.debugName} (${mainIsolate.hashCode})');
        print('   üî∏ Worker isolate: ${isolateInfo.isolateName} (${isolateInfo.isolateHashCode})');

        expect(isolateInfo.isolateHashCode, isNot(equals(mainIsolate.hashCode)));
        expect(isolateInfo.isolateName, contains('VerificationIsolate'));

        print('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: –∏–∑–æ–ª—è—Ç—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');
      } finally {
        await transport.close();
        result.kill();
      }
    });

    test('cpu_intensive_–æ–ø–µ—Ä–∞—Ü–∏–∏_–Ω–µ_–±–ª–æ–∫–∏—Ä—É—é—Ç_–æ—Å–Ω–æ–≤–Ω–æ–π_–ø–æ—Ç–æ–∫', () async {
      // Arrange
      final result = await RpcIsolateTransport.spawn(
        entrypoint: cpuIntensiveServer,
        customParams: {},
        isolateId: 'cpu-test',
        debugName: 'CpuWorker',
      );

      final transport = result.transport;

      try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∏–∑–æ–ª—è—Ç–µ
        final task = CpuIntensiveTask(
          iterations: 1000, // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∑–∞–º–µ—Ç–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
          taskId: 'blocking_test_${DateTime.now().millisecondsSinceEpoch}',
        );

        final streamId = transport.createStream();
        final taskFuture = transport
            .getMessagesForStream(streamId)
            .where((msg) => msg.isDirect && msg.directPayload is CpuTaskResult)
            .first;

        // Act - –∑–∞–ø—É—Å–∫–∞–µ–º CPU –∑–∞–¥–∞—á—É –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        final mainThreadStopwatch = Stopwatch()..start();

        await transport.sendDirectObject(streamId, task);

        // –ü–æ–∫–∞ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∏–∑–æ–ª—è—Ç–µ, –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º
        var mainThreadCounter = 0;
        final mainThreadTimer = Timer.periodic(Duration(milliseconds: 1), (timer) {
          mainThreadCounter++;
          if (mainThreadCounter >= 50) {
            // 50–º—Å —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            timer.cancel();
          }
        });

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ CPU –∑–∞–¥–∞—á–∏, –∏ —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        final results = await Future.wait([
          taskFuture,
          mainThreadTimer.isActive
              ? Future.delayed(Duration(milliseconds: 60)) // –î–∞–µ–º —á—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
              : Future.value(null),
        ]);

        mainThreadStopwatch.stop();

        final taskResponse = results[0] as RpcTransportMessage;
        final taskResult = taskResponse.directPayload as CpuTaskResult;

        // Assert
        print('üìä CPU Task Results:');
        print('   ‚è±Ô∏è Task processing time: ${taskResult.processingTime.inMilliseconds}ms');
        print('   üî¢ Calculated value: ${taskResult.calculatedValue}');
        print('   üñ•Ô∏è Processed in isolate: ${taskResult.isolateInfo.isolateName}');
        print('   üîÑ Main thread counter: $mainThreadCounter (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 50)');
        print('   ‚è±Ô∏è Main thread total time: ${mainThreadStopwatch.elapsedMilliseconds}ms');

        expect(taskResult.taskId, equals(task.taskId));
        expect(taskResult.processingTime.inMilliseconds, greaterThan(0));
        expect(taskResult.isolateInfo.isolateName, contains('CpuWorker'));

        // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º
        expect(mainThreadCounter, greaterThanOrEqualTo(40)); // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å

        print('‚úÖ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –∏–∑–æ–ª—è—Ç–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞');
      } finally {
        await transport.close();
        result.kill();
      }
    });

    test('–ø–∞–º—è—Ç—å_–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∞_–º–µ–∂–¥—É_–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏', () async {
      // Arrange
      final result = await RpcIsolateTransport.spawn(
        entrypoint: memoryIsolationServer,
        customParams: {},
        isolateId: 'memory-test',
        debugName: 'MemoryWorker',
      );

      final transport = result.transport;

      try {
        // –°–æ–∑–¥–∞–µ–º –º—É—Ç–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        final originalCounter = MutableCounter(value: 10, id: 'test_counter');
        print('üîç Original counter in main thread: $originalCounter');

        // Act - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–∑–æ–ª—è—Ç –¥–ª—è –º—É—Ç–∞—Ü–∏–∏
        final streamId = transport.createStream();
        final responsesFuture = transport
            .getMessagesForStream(streamId)
            .where((msg) => msg.isDirect && msg.directPayload is MutationResult)
            .first;

        await transport.sendDirectObject(streamId, originalCounter);
        final response = await responsesFuture;
        final mutationResult = response.directPayload as MutationResult;

        // Assert
        print('üìä Memory Isolation Results:');
        print('   üìù Original counter (main thread): ${originalCounter.value}');
        print('   üìù Mutated counter (from isolate): ${mutationResult.counter.value}');
        print('   üñ•Ô∏è Mutation happened in: ${mutationResult.isolateInfo.isolateName}');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–ª—è—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–ø–∏—é –∏ –º—É—Ç–∏—Ä–æ–≤–∞–ª –µ—ë
        expect(mutationResult.counter.value, equals(13)); // 10 + 3 increments
        expect(mutationResult.isolateInfo.isolateName, contains('MemoryWorker'));

        // –í–ê–ñ–ù–û: –í Dart isolates, –æ–±—ä–µ–∫—Ç—ã –∫–æ–ø–∏—Ä—É—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        // –ù–û: –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è zero-copy (—á—Ç–æ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç), —Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∏–¥–Ω—ã
        // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è zero-copy –ø–µ—Ä–µ–¥–∞—á–∏

        print('‚úÖ –ü–∞–º—è—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–∂–¥—É –∏–∑–æ–ª—è—Ç–∞–º–∏');
        print('   ‚ÑπÔ∏è Zero-copy –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
      } finally {
        await transport.close();
        result.kill();
      }
    });

    test('–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ_–∏–∑–æ–ª—è—Ç—ã_—Ä–∞–±–æ—Ç–∞—é—Ç_–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ', () async {
      // Arrange - —Å–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–ª—è—Ç–æ–≤
      const isolateCount = 3;
      final isolateResults = <({IRpcTransport transport, void Function() kill})>[];

      for (int i = 0; i < isolateCount; i++) {
        final result = await RpcIsolateTransport.spawn(
          entrypoint: cpuIntensiveServer,
          customParams: {},
          isolateId: 'parallel-test-$i',
          debugName: 'ParallelWorker$i',
        );
        isolateResults.add(result);
      }

      try {
        // Act - –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤–æ –≤—Å–µ—Ö –∏–∑–æ–ª—è—Ç–∞—Ö
        final futures = <Future<CpuTaskResult>>[];

        for (int i = 0; i < isolateCount; i++) {
          final transport = isolateResults[i].transport;
          final task = CpuIntensiveTask(
            iterations: 500,
            taskId: 'parallel_task_$i',
          );

          final streamId = transport.createStream();
          final taskFuture = transport
              .getMessagesForStream(streamId)
              .where((msg) => msg.isDirect && msg.directPayload is CpuTaskResult)
              .first
              .then((msg) => msg.directPayload as CpuTaskResult);

          futures.add(taskFuture);
          await transport.sendDirectObject(streamId, task);
        }

        final stopwatch = Stopwatch()..start();
        final results = await Future.wait(futures);
        stopwatch.stop();

        // Assert
        expect(results.length, equals(isolateCount));

        print('üìä Parallel Execution Results:');
        print('   ‚è±Ô∏è Total parallel execution time: ${stopwatch.elapsedMilliseconds}ms');

        final isolateNames = <String>{};
        for (int i = 0; i < results.length; i++) {
          final result = results[i];
          print(
              '   üî∏ Task $i: ${result.taskId} in ${result.isolateInfo.isolateName} (${result.processingTime.inMilliseconds}ms)');
          isolateNames.add(result.isolateInfo.isolateName);
        }

        // –í—Å–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –∏–∑–æ–ª—è—Ç–∞—Ö
        expect(isolateNames.length, equals(isolateCount));

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ
        final averageTaskTime =
            results.map((r) => r.processingTime.inMilliseconds).reduce((a, b) => a + b) /
                results.length;
        expect(
            stopwatch.elapsedMilliseconds,
            lessThan(
                averageTaskTime * isolateCount * 0.8)); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ 20% –±—ã—Å—Ç—Ä–µ–µ

        print('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–ª—è—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ');
        print(
            '   üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞: ${(averageTaskTime * isolateCount / stopwatch.elapsedMilliseconds).toStringAsFixed(2)}x');
      } finally {
        // Cleanup
        for (final result in isolateResults) {
          await result.transport.close();
          result.kill();
        }
      }
    });
  });
}
