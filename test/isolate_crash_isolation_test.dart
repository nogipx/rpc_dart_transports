// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:async';
import 'dart:isolate';

import 'package:rpc_dart_transports/rpc_dart_transports.dart';
import 'package:test/test.dart';

// ============================================================================
// üí• CRASH-–°–ï–†–í–ï–†–´
// ============================================================================

/// –¢–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ crash-–∏–∑–æ–ª—è—Ü–∏–∏
///
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ:
/// - Crash –∏–∑–æ–ª—è—Ç–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
/// - –î—Ä—É–≥–∏–µ –∏–∑–æ–ª—è—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
/// - –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
/// –°–µ—Ä–≤–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ø–∞–¥–∞–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ
@pragma('vm:entry-point')
void crashingServer(IRpcTransport transport, Map<String, dynamic> params) {
  final currentIsolate = Isolate.current;

  print('üíÄ [Crashing Server] –ó–∞–ø—É—â–µ–Ω –≤ –∏–∑–æ–ª—è—Ç–µ ${currentIsolate.debugName}');

  transport.incomingMessages.listen((message) async {
    if (message.isDirect && message.directPayload != null) {
      final payload = message.directPayload;

      if (payload is String) {
        switch (payload) {
          case 'PING':
            print('üèì [Crashing Server] PONG –æ—Ç ${currentIsolate.debugName}');
            await transport.sendDirectObject(message.streamId, 'PONG', endStream: true);
            break;

          case 'CRASH_NOW':
            print('üí• [Crashing Server] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∫ –∫—Ä–∞—Ö—É! –£–º–∏—Ä–∞—é...');
            // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫—Ä–∞—Ö–∞
            throw StateError('Intentional crash for testing');

          case 'MEMORY_BOMB':
            print('üí£ [Crashing Server] –ó–∞–ø—É—Å–∫–∞—é memory bomb...');
            // –°–æ–∑–¥–∞–µ–º –æ–≥—Ä–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            final memoryBomb = <List<int>>[];
            for (int i = 0; i < 100000; i++) {
              memoryBomb.add(List.filled(10000, i));
            }
            break;

          case 'INFINITE_LOOP':
            print('üîÑ [Crashing Server] –ó–∞–ø—É—Å–∫–∞—é –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª...');
            while (true) {
              // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –±–µ–∑ yield
              for (int i = 0; i < 1000000; i++) {
                final _ = i * i;
              }
            }
        }
      }
    }
  });

  print('‚úÖ [Crashing Server] –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–∏ –∫—Ä–∞—à–∞–º)');
}

/// –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
@pragma('vm:entry-point')
void stableServer(IRpcTransport transport, Map<String, dynamic> params) {
  final currentIsolate = Isolate.current;

  print('üõ°Ô∏è [Stable Server] –ó–∞–ø—É—â–µ–Ω –≤ –∏–∑–æ–ª—è—Ç–µ ${currentIsolate.debugName}');

  transport.incomingMessages.listen((message) async {
    if (message.isDirect && message.directPayload != null) {
      final payload = message.directPayload;

      if (payload is String && payload == 'PING') {
        print('üèì [Stable Server] PONG –æ—Ç ${currentIsolate.debugName}');
        await transport.sendDirectObject(message.streamId, 'PONG from stable', endStream: true);
      }
    }
  });

  print('‚úÖ [Stable Server] –ì–æ—Ç–æ–≤ –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ');
}

// ============================================================================
// üß™ –¢–ï–°–¢–´ CRASH-–ò–ó–û–õ–Ø–¶–ò–ò
// ============================================================================

void main() {
  group('Isolate Crash Isolation Tests', () {
    test('crash_–∏–∑–æ–ª—è—Ç–∞_–Ω–µ_–≤–ª–∏—è–µ—Ç_–Ω–∞_–æ—Å–Ω–æ–≤–Ω–æ–π_–ø—Ä–æ—Ü–µ—Å—Å', () async {
      // Arrange - —Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—à–∞—â–∏–π—Å—è –∏–∑–æ–ª—è—Ç
      final crashResult = await RpcIsolateTransport.spawn(
        entrypoint: crashingServer,
        customParams: {},
        isolateId: 'crash-test',
        debugName: 'CrashWorker',
      );

      // –ò —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–∑–æ–ª—è—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
      final stableResult = await RpcIsolateTransport.spawn(
        entrypoint: stableServer,
        customParams: {},
        isolateId: 'stable-test',
        debugName: 'StableWorker',
      );

      try {
        // Act 1 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –∏–∑–æ–ª—è—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç
        print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');

        // Ping crash worker
        final crashStreamId = crashResult.transport.createStream();
        final crashPingFuture = crashResult.transport
            .getMessagesForStream(crashStreamId)
            .where((msg) => msg.isDirect && msg.directPayload == 'PONG')
            .first
            .timeout(Duration(seconds: 2));

        await crashResult.transport.sendDirectObject(crashStreamId, 'PING');
        await crashPingFuture;
        print('‚úÖ Crash worker –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping');

        // Ping stable worker
        final stableStreamId1 = stableResult.transport.createStream();
        final stablePingFuture1 = stableResult.transport
            .getMessagesForStream(stableStreamId1)
            .where((msg) => msg.isDirect && msg.directPayload == 'PONG from stable')
            .first
            .timeout(Duration(seconds: 2));

        await stableResult.transport.sendDirectObject(stableStreamId1, 'PING');
        await stablePingFuture1;
        print('‚úÖ Stable worker –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping');

        // Act 2 - –∫—Ä–∞—à–∏–º –ø–µ—Ä–≤—ã–π –∏–∑–æ–ª—è—Ç
        print('üí• –ö—Ä–∞—à–∏–º –ø–µ—Ä–≤—ã–π –∏–∑–æ–ª—è—Ç...');

        final crashStreamId2 = crashResult.transport.createStream();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫—Ä–∞—à–∞ –∏ –æ–∂–∏–¥–∞–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–µ—Ç—Å—è
        await crashResult.transport.sendDirectObject(crashStreamId2, 'CRASH_NOW');

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –∫—Ä–∞—à –ø—Ä–æ–∏–∑–æ—à–µ–ª
        await Future.delayed(Duration(milliseconds: 100));

        // Act 3 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏ –¥—Ä—É–≥–æ–π –∏–∑–æ–ª—è—Ç –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å) –≤—Å–µ –µ—â–µ –∂–∏–≤—ã
        final mainThreadValue = 42 * 2; // –ü—Ä–æ—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        expect(mainThreadValue, equals(84));
        print('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–ª—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–∑–æ–ª—è—Ç –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        final stableStreamId2 = stableResult.transport.createStream();
        final stablePingFuture2 = stableResult.transport
            .getMessagesForStream(stableStreamId2)
            .where((msg) => msg.isDirect && msg.directPayload == 'PONG from stable')
            .first
            .timeout(Duration(seconds: 2));

        await stableResult.transport.sendDirectObject(stableStreamId2, 'PING');
        await stablePingFuture2;
        print('‚úÖ Stable worker –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞ –¥—Ä—É–≥–æ–≥–æ –∏–∑–æ–ª—è—Ç–∞');

        // Act 4 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ crashed worker –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ—Ä—Ç–≤
        print('üíÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ crashed worker –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ—Ä—Ç–≤...');

        final crashStreamId3 = crashResult.transport.createStream();
        final shouldTimeout = crashResult.transport
            .getMessagesForStream(crashStreamId3)
            .where((msg) => msg.isDirect)
            .first
            .timeout(Duration(milliseconds: 500));

        try {
          await crashResult.transport.sendDirectObject(crashStreamId3, 'PING');
          await shouldTimeout;
          fail('Crashed worker –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å');
        } on TimeoutException {
          print('‚úÖ Crashed worker –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ—Ä—Ç–≤ (timeout –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∏)');
        }
      } finally {
        // Cleanup
        await crashResult.transport.close();
        await stableResult.transport.close();
        crashResult.kill();
        stableResult.kill();
      }
    });

    test('–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ_crash_–Ω–µ_–≤–ª–∏—è—é—Ç_–Ω–∞_–æ—Å—Ç–∞–≤—à–∏–µ—Å—è_–∏–∑–æ–ª—è—Ç—ã', () async {
      // Arrange - —Å–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–ª—è—Ç–æ–≤
      const totalIsolates = 5;
      final isolateResults = <({IRpcTransport transport, void Function() kill, String name})>[];

      // –°–æ–∑–¥–∞–µ–º 3 crash –∏–∑–æ–ª—è—Ç–∞ –∏ 2 stable
      for (int i = 0; i < totalIsolates; i++) {
        final isStable = i >= 3; // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –±—É–¥—É—Ç stable
        final result = await RpcIsolateTransport.spawn(
          entrypoint: isStable ? stableServer : crashingServer,
          customParams: {},
          isolateId: 'multi-test-$i',
          debugName: isStable ? 'StableWorker$i' : 'CrashWorker$i',
        );
        isolateResults.add((
          transport: result.transport,
          kill: result.kill,
          name: isStable ? 'stable-$i' : 'crash-$i'
        ));
      }

      try {
        // Act 1 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏–∑–æ–ª—è—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏–∑–æ–ª—è—Ç—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç...');

        for (int i = 0; i < totalIsolates; i++) {
          final isolate = isolateResults[i];
          final streamId = isolate.transport.createStream();
          final pingFuture = isolate.transport
              .getMessagesForStream(streamId)
              .where((msg) => msg.isDirect)
              .first
              .timeout(Duration(seconds: 2));

          await isolate.transport.sendDirectObject(streamId, 'PING');
          await pingFuture;
          print('‚úÖ ${isolate.name} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping');
        }

        // Act 2 - –∫—Ä–∞—à–∏–º –ø–µ—Ä–≤—ã–µ 3 –∏–∑–æ–ª—è—Ç–∞ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
        print('üí• –ö—Ä–∞—à–∏–º –ø–µ—Ä–≤—ã–µ 3 –∏–∑–æ–ª—è—Ç–∞...');

        for (int i = 0; i < 3; i++) {
          final crashIsolate = isolateResults[i];
          final streamId = crashIsolate.transport.createStream();

          print('üíÄ –ö—Ä–∞—à–∏–º ${crashIsolate.name}...');
          await crashIsolate.transport.sendDirectObject(streamId, 'CRASH_NOW');
          await Future.delayed(Duration(milliseconds: 50)); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫—Ä–∞—à
        }

        // Act 3 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ stable –∏–∑–æ–ª—è—Ç—ã –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ stable –∏–∑–æ–ª—è—Ç—ã –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç...');

        final stableIndices = [3, 4]; // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∏–∑–æ–ª—è—Ç–∞
        for (final index in stableIndices) {
          final stableIsolate = isolateResults[index];
          final streamId = stableIsolate.transport.createStream();
          final pingFuture = stableIsolate.transport
              .getMessagesForStream(streamId)
              .where((msg) => msg.isDirect && msg.directPayload == 'PONG from stable')
              .first
              .timeout(Duration(seconds: 2));

          await stableIsolate.transport.sendDirectObject(streamId, 'PING');
          await pingFuture;
          print('‚úÖ ${stableIsolate.name} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –∫—Ä–∞—à–µ–π');
        }

        // Act 4 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–±–∏–ª–µ–Ω
        print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...');

        final mainThreadCalculations = <int>[];
        for (int i = 0; i < 100; i++) {
          mainThreadCalculations.add(i * i);
        }

        expect(mainThreadCalculations.length, equals(100));
        expect(mainThreadCalculations.last, equals(99 * 99));
        print('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–∞–±–∏–ª—å–Ω—ã–º');
      } finally {
        // Cleanup
        for (final result in isolateResults) {
          await result.transport.close();
          result.kill();
        }
      }
    });
  });
}
